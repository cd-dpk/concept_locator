0
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java
1
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorGui.java
2
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java
3
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperationsExecutor.java
4
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java
5
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java
6
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorGui.java
7
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java
8
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculator.java
9
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorGui.java
10
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorOperation.java
11
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java
12
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculatorGui.java
13
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java
14
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/matrixCalculator/MatrixCalculator.java
15
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunter.java
16
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterGui.java
17
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterOperation.java
18
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java
19
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorGui.java
20
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java
21
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java
22
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterGui.java
23
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationArea.java
24
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationEnergy.java
25
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationLength.java
26
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationPower.java
27
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationTemperature.java
28
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationTime.java
29
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationVolume.java
30
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationWeight.java
31
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/About.java
32
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/AboutGui.java
33
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java
34
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/ProfileGui.java
35
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java
36
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/MainApp.java
37
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java
38
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrameGui.java
39
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java
40
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java
41
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/utils/fileIO/FileIO.java
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,initialComponent
60 , 274
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		AdvCalcGui = new AdvancedCalculatorGui();
		//operation object
		advCalcOptExecutor = new AdvancedCalculatorOperationsExecutor();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"AdvancedCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jButtonNumerical = AdvCalcGui.jButtonNumerical;					//10 buttons(0-9)
		jButtonPoint = AdvCalcGui.jButtonPoint;							//point(.)
		jButtonOperator = AdvCalcGui.jButtonOperator;					//+, -, *, /, SQRT(), =
		jButtonComplexOperator = AdvCalcGui.jButtonComplexOperator;		//trigonometric, logarithm, factorial
		jButtonShift = AdvCalcGui.jButtonShift;							//Inverter
		jButtonMemory = AdvCalcGui.jButtonMemory;						//M, MS
		jButtonBracket = AdvCalcGui.jButtonBracket;						// (, )
		jButtonClear = AdvCalcGui.jButtonClear; 						//AC, C, back space
		jLabelDisplay = AdvCalcGui.jLabelDisplay;						//result
		jTextDisplay = AdvCalcGui.jTextDisplay;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
			jButtonNumerical[i].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
				put(KeyStroke.getKeyStroke(48+i, 0), i+"_pressed");
			jButtonNumerical[i].getActionMap().put(i+"_pressed", new AbstractAction() {
				public void actionPerformed(ActionEvent evt) {
					jButtonNumericalActionPerformed(evt);
				}
			});
		}
		//Point
		jButtonPoint.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD,0), "POINT_pressed");
		jButtonPoint.getActionMap().put("POINT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonPoint.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonNumericalActionPerformed(evt);
            }
        });
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperator(evt);
	            }
	        });
		}
		jButtonOperator[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,InputEvent.SHIFT_MASK), "PLUS_pressed");
		jButtonOperator[0].getActionMap().put("PLUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,0), "MINUS_pressed");
		jButtonOperator[1].getActionMap().put("MINUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_8,InputEvent.SHIFT_MASK), "MULT_pressed");
		jButtonOperator[2].getActionMap().put("MULT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,0), "DIVD_pressed");
		jButtonOperator[3].getActionMap().put("DIVD_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[5].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,0), "EQL_pressed");
		jButtonOperator[5].getActionMap().put("EQL_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_R,0), "SQRT_pressed");
		jButtonOperator[4].getActionMap().put("SQRT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[6].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_6,InputEvent.SHIFT_MASK), "POW_pressed");
		jButtonOperator[6].getActionMap().put("POW_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		//Complex Operator Buttons
		for(int i=0; i<22; i++){	
			jButtonComplexOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperator(evt);
	            }
	        });
		}
		//shift button
		jButtonShift.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonShiftActionPerformed(evt);
            }
        });
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonMemoryActionPerformed(evt);
	            }
	        });
		}
		jButtonMemory[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
    		put(KeyStroke.getKeyStroke(KeyEvent.VK_M,0), "MEM_pressed");
		jButtonMemory[0].getActionMap().put("MEM_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		jButtonMemory[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "STO_pressed");
		jButtonMemory[1].getActionMap().put("STO_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		//bracket button
		for(int i=0; i<2; i++){
			jButtonBracket[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperator(evt);
	            }
	        });
		}
		jButtonBracket[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_9,InputEvent.SHIFT_MASK), "(_pressed");
		jButtonBracket[0].getActionMap().put("(_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonBracket[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_0,InputEvent.SHIFT_MASK), ")_pressed");
		jButtonBracket[1].getActionMap().put(")_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonClearActionPerformed(evt);
	            }
	        });
		}
		jButtonClear[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C,0), "CLR_pressed");
		jButtonClear[0].getActionMap().put("CLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0), "ACLR_pressed");
		jButtonClear[1].getActionMap().put("ACLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), "BSPACE_pressed");
		jButtonClear[2].getActionMap().put("BSPACE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//**Setting Criterion of the Frame**//
		super.gui.add(AdvCalcGui);
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Advanced Calculator");
		super.gui.setResizable(false);
		super.gui.setBounds(230, 115, 500, 420);
		super.gui.setFocusable(true);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			   End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA   End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization  operation  object  instruction  10  buttons  point      SQRT   trigonometric  logarithm  factorial  Inverter   MS    AC   back  space  result  Numeric  Buttons  Point  Operator  Buttons  Complex  Operator  Buttons  shift  button  Memory  Buttons  bracket  button  Clear  Buttons  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  Adv Calc Gui  AdvCalcGui Advanced Calculator Gui  AdvancedCalculatorGui adv Calc Opt Executor  advCalcOptExecutor Advanced Calculator Operations Executor  AdvancedCalculatorOperationsExecutor instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Advanced Calculator Instruction  AdvancedCalculatorInstruction txt Exception e instruction EMPTY j Button Numerical  jButtonNumerical Adv Calc Gui  AdvCalcGui j Button Numerical  jButtonNumerical j Button Point  jButtonPoint Adv Calc Gui  AdvCalcGui j Button Point  jButtonPoint j Button Operator  jButtonOperator Adv Calc Gui  AdvCalcGui j Button Operator  jButtonOperator j Button Complex Operator  jButtonComplexOperator Adv Calc Gui  AdvCalcGui j Button Complex Operator  jButtonComplexOperator j Button Shift  jButtonShift Adv Calc Gui  AdvCalcGui j Button Shift  jButtonShift j Button Memory  jButtonMemory Adv Calc Gui  AdvCalcGui j Button Memory  jButtonMemory j Button Bracket  jButtonBracket Adv Calc Gui  AdvCalcGui j Button Bracket  jButtonBracket j Button Clear  jButtonClear Adv Calc Gui  AdvCalcGui j Button Clear  jButtonClear j Label Display  jLabelDisplay Adv Calc Gui  AdvCalcGui j Label Display  jLabelDisplay j Text Display  jTextDisplay Adv Calc Gui  AdvCalcGui j Text Display  jTextDisplay i 0 i 10 i j Button Numerical  jButtonNumerical i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Numerical  jButtonNumerical i get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke 48 i 0 i _pressed j Button Numerical  jButtonNumerical i get Action Map  getActionMap put i _pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Point  jButtonPoint get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK PERIOD  VK_PERIOD 0 POINT _pressed  POINT_pressed j Button Point  jButtonPoint get Action Map  getActionMap put POINT _pressed  POINT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Point  jButtonPoint add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt i 0 i 7 i j Button Operator  jButtonOperator i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK EQUALS  VK_EQUALS Input Event  InputEvent SHIFT MASK  SHIFT_MASK PLUS _pressed  PLUS_pressed j Button Operator  jButtonOperator 0 get Action Map  getActionMap put PLUS _pressed  PLUS_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK MINUS  VK_MINUS 0 MINUS _pressed  MINUS_pressed j Button Operator  jButtonOperator 1 get Action Map  getActionMap put MINUS _pressed  MINUS_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _8  VK_8 Input Event  InputEvent SHIFT MASK  SHIFT_MASK MULT _pressed  MULT_pressed j Button Operator  jButtonOperator 2 get Action Map  getActionMap put MULT _pressed  MULT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 3 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK SLASH  VK_SLASH 0 DIVD _pressed  DIVD_pressed j Button Operator  jButtonOperator 3 get Action Map  getActionMap put DIVD _pressed  DIVD_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 5 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK EQUALS  VK_EQUALS 0 EQL _pressed  EQL_pressed j Button Operator  jButtonOperator 5 get Action Map  getActionMap put EQL _pressed  EQL_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 4 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK R  VK_R 0 SQRT _pressed  SQRT_pressed j Button Operator  jButtonOperator 4 get Action Map  getActionMap put SQRT _pressed  SQRT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Operator  jButtonOperator 6 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _6  VK_6 Input Event  InputEvent SHIFT MASK  SHIFT_MASK POW _pressed  POW_pressed j Button Operator  jButtonOperator 6 get Action Map  getActionMap put POW _pressed  POW_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt i 0 i 22 i j Button Complex Operator  jButtonComplexOperator i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Shift  jButtonShift add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Shift Action Performed  jButtonShiftActionPerformed evt i 0 i 2 i j Button Memory  jButtonMemory i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt j Button Memory  jButtonMemory 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK M  VK_M 0 MEM _pressed  MEM_pressed j Button Memory  jButtonMemory 0 get Action Map  getActionMap put MEM _pressed  MEM_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt j Button Memory  jButtonMemory 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK S  VK_S 0 STO _pressed  STO_pressed j Button Memory  jButtonMemory 1 get Action Map  getActionMap put STO _pressed  STO_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt i 0 i 2 i j Button Bracket  jButtonBracket i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Bracket  jButtonBracket 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _9  VK_9 Input Event  InputEvent SHIFT MASK  SHIFT_MASK _pressed j Button Bracket  jButtonBracket 0 get Action Map  getActionMap put _pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt j Button Bracket  jButtonBracket 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _0  VK_0 Input Event  InputEvent SHIFT MASK  SHIFT_MASK _pressed j Button Bracket  jButtonBracket 1 get Action Map  getActionMap put _pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator  jButtonOperator evt i 0 i 3 i j Button Clear  jButtonClear i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK C  VK_C 0 CLR _pressed  CLR_pressed j Button Clear  jButtonClear 0 get Action Map  getActionMap put CLR _pressed  CLR_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK A  VK_A 0 ACLR _pressed  ACLR_pressed j Button Clear  jButtonClear 1 get Action Map  getActionMap put ACLR _pressed  ACLR_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK BACK SPACE  VK_BACK_SPACE 0 BSPACE _pressed  BSPACE_pressed j Button Clear  jButtonClear 2 get Action Map  getActionMap put BSPACE _pressed  BSPACE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt gui add Adv Calc Gui  AdvCalcGui gui set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE gui set Title  setTitle Advanced Calculator gui set Resizable  setResizable gui set Bounds  setBounds 230 115 500 420 gui set Focusable  setFocusable 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, operation, object, instruction, buttons, point, sqrt, trigonometric, logarithm, factorial, inverter, ms, ac, back, space, result, numeric, operator, complex, shift, button, memory, bracket, clear, setting, criterion, frame, method, initializing, variables, placing, specific, specifies, criteria, main, adv, calc, advcalcgui, advanced, calculator, advancedcalculatorgui, opt, executor, advcalcoptexecutor, operations, advancedcalculatoroperationsexecutor, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, advancedcalculatorinstruction, txt, exception, empty, numerical, jbuttonnumerical, jbuttonpoint, jbuttonoperator, jbuttoncomplexoperator, jbuttonshift, jbuttonmemory, jbuttonbracket, jbuttonclear, label, display, jlabeldisplay, text, jtextdisplay, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttonnumericalactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, _pressed, getactionmap, abstract, abstractaction, keyevent, vk, period, vk_period, point_pressed, equals, vk_equals, inputevent, mask, shift_mask, plus_pressed, minus, vk_minus, minus_pressed, _8, vk_8, mult, mult_pressed, slash, vk_slash, divd, divd_pressed, eql, eql_pressed, vk_r, sqrt_pressed, _6, vk_6, pow, pow_pressed, jbuttonshiftactionperformed, jbuttonmemoryactionperformed, vk_m, mem, mem_pressed, vk_s, sto, sto_pressed, _9, vk_9, _0, vk_0, jbuttonclearactionperformed, vk_c, clr, clr_pressed, vk_a, aclr, aclr_pressed, vk_back_space, bspace, bspace_pressed, set, default, close, setdefaultcloseoperation, javax, swing, constants, windowconstants, exit, exit_on_close, title, settitle, resizable, setresizable, bounds, setbounds, focusable, setfocusable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,jButtonNumericalActionPerformed
278 , 287
------------------------------------------------------------------------
	//numarical buttons
	private void jButtonNumericalActionPerformed(ActionEvent evt){
		if(inputString.length()<100){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				inputString=inputString + evt.getActionCommand();	
				number=number+evt.getActionCommand();
			}
		}
		jTextDisplay.setText(inputString);
	}

------------------------------------------------------------------------
 j Button Numerical Action Performed  jButtonNumericalActionPerformed  numarical  buttons   input String  inputString length 100 number contains evt get Action Command  getActionCommand equals input String  inputString input String  inputString evt get Action Command  getActionCommand number number evt get Action Command  getActionCommand j Text Display  jTextDisplay set Text  setText input String  inputString 
------------------------------------------------------------------------
[button, numerical, action, performed, jbuttonnumericalactionperformed, numarical, buttons, input, string, inputstring, length, number, evt, command, getactioncommand, equals, text, display, jtextdisplay, set, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,jButtonOperator
288 , 330
------------------------------------------------------------------------
	//operator buttons
	private void jButtonOperator(ActionEvent evt){
		if(evt.getActionCommand().equals("=")){
			if(!inputString.endsWith(" ")) {
				inputString = inputString + " ";
			}
			String result = advCalcOptExecutor.infixEvaluation(inputString);
			jLabelDisplay.setText(result);
			if(!result.equals("")) ans=result;
		}
		else{
			if(number.length()>0){
				inputString=inputString + " ";
			}
			if(inputString.length()<120){
				String actionCommand=evt.getActionCommand();
				if(actionCommand=="PI"){
					inputString=inputString + "3.141592654 ";
				}else if(actionCommand=="E"){
					inputString=inputString + "2.718281828 ";
				}else if(actionCommand=="Ans"){
					inputString=inputString + ans + " ";
				}else if(actionCommand=="nPr"){
					inputString=inputString + "P ";
				}else if(actionCommand=="nCr"){
					inputString=inputString + "C ";
				}else if(actionCommand=="n!"){
					inputString=inputString + "fact ";
				}else if(actionCommand=="x 10^"){
					inputString=inputString + "x 10 ^ ";
				}else{
					if(actionCommand.equals("*")){
						actionCommand="x";
					}else if(actionCommand.equals("r")){
						actionCommand="sqrt";
					}
					inputString=inputString + actionCommand + " ";
				}
			}
			jTextDisplay.setText(inputString);
		}
		number=""; 
	}

------------------------------------------------------------------------
 j Button Operator  jButtonOperator  operator  buttons   evt get Action Command  getActionCommand equals input String  inputString ends With  endsWith input String  inputString input String  inputString String result adv Calc Opt Executor  advCalcOptExecutor infix Evaluation  infixEvaluation input String  inputString j Label Display  jLabelDisplay set Text  setText result result equals ans result number length 0 input String  inputString input String  inputString input String  inputString length 120 String action Command  actionCommand evt get Action Command  getActionCommand action Command  actionCommand PI input String  inputString input String  inputString 3 141592654 action Command  actionCommand E input String  inputString input String  inputString 2 718281828 action Command  actionCommand Ans input String  inputString input String  inputString ans action Command  actionCommand n Pr  nPr input String  inputString input String  inputString P action Command  actionCommand n Cr  nCr input String  inputString input String  inputString C action Command  actionCommand n input String  inputString input String  inputString fact action Command  actionCommand x 10 input String  inputString input String  inputString x 10 action Command  actionCommand equals action Command  actionCommand x action Command  actionCommand equals r action Command  actionCommand sqrt input String  inputString input String  inputString action Command  actionCommand j Text Display  jTextDisplay set Text  setText input String  inputString number 
------------------------------------------------------------------------
[button, operator, jbuttonoperator, buttons, evt, action, command, getactioncommand, equals, input, string, inputstring, ends, endswith, result, adv, calc, opt, executor, advcalcoptexecutor, infix, evaluation, infixevaluation, label, display, jlabeldisplay, set, text, settext, ans, number, length, actioncommand, pi, pr, npr, cr, ncr, fact, sqrt, jtextdisplay]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,jButtonShiftActionPerformed
331 , 366
------------------------------------------------------------------------
	//Shift
	private void jButtonShiftActionPerformed(ActionEvent evt){
		if(!shiftOn){
			shiftOn=true;
			jButtonComplexOperator[0].setLocation(600, 320); 
			jButtonComplexOperator[1].setLocation(600, 320); 
			jButtonComplexOperator[2].setLocation(270, 320); 
			jButtonComplexOperator[3].setLocation(324, 320); 
			jButtonComplexOperator[6].setLocation(600, 280);
			jButtonComplexOperator[7].setLocation(600, 280);
			jButtonComplexOperator[8].setLocation(270, 280);
			jButtonComplexOperator[9].setLocation(324, 280);
			jButtonComplexOperator[12].setLocation(600, 240);
			jButtonComplexOperator[13].setLocation(600, 240);
			jButtonComplexOperator[14].setLocation(270, 240);
			jButtonComplexOperator[15].setLocation(324, 240);
			jButtonShift.setBackground(new java.awt.Color(255, 255, 225));
			jButtonShift.setText("<~Shift~>");
		}else{
			shiftOn=false;
			jButtonComplexOperator[0].setLocation(270, 320);
			jButtonComplexOperator[1].setLocation(324, 320);
			jButtonComplexOperator[2].setLocation(600, 320);
			jButtonComplexOperator[3].setLocation(600, 320);
			jButtonComplexOperator[6].setLocation(270, 280);
			jButtonComplexOperator[7].setLocation(324, 280);
			jButtonComplexOperator[8].setLocation(600, 280);
			jButtonComplexOperator[9].setLocation(600, 280);
			jButtonComplexOperator[12].setLocation(270, 240);
			jButtonComplexOperator[13].setLocation(324, 240);
			jButtonComplexOperator[14].setLocation(600, 240);
			jButtonComplexOperator[15].setLocation(600, 240);
			jButtonShift.setBackground(new java.awt.Color(178, 190, 200));
			jButtonShift.setText("Shift");
		}
	}

------------------------------------------------------------------------
 j Button Shift Action Performed  jButtonShiftActionPerformed  Shift   shift On  shiftOn shift On  shiftOn j Button Complex Operator  jButtonComplexOperator 0 set Location  setLocation 600 320 j Button Complex Operator  jButtonComplexOperator 1 set Location  setLocation 600 320 j Button Complex Operator  jButtonComplexOperator 2 set Location  setLocation 270 320 j Button Complex Operator  jButtonComplexOperator 3 set Location  setLocation 324 320 j Button Complex Operator  jButtonComplexOperator 6 set Location  setLocation 600 280 j Button Complex Operator  jButtonComplexOperator 7 set Location  setLocation 600 280 j Button Complex Operator  jButtonComplexOperator 8 set Location  setLocation 270 280 j Button Complex Operator  jButtonComplexOperator 9 set Location  setLocation 324 280 j Button Complex Operator  jButtonComplexOperator 12 set Location  setLocation 600 240 j Button Complex Operator  jButtonComplexOperator 13 set Location  setLocation 600 240 j Button Complex Operator  jButtonComplexOperator 14 set Location  setLocation 270 240 j Button Complex Operator  jButtonComplexOperator 15 set Location  setLocation 324 240 j Button Shift  jButtonShift set Background  setBackground java awt Color 255 255 225 j Button Shift  jButtonShift set Text  setText Shift shift On  shiftOn j Button Complex Operator  jButtonComplexOperator 0 set Location  setLocation 270 320 j Button Complex Operator  jButtonComplexOperator 1 set Location  setLocation 324 320 j Button Complex Operator  jButtonComplexOperator 2 set Location  setLocation 600 320 j Button Complex Operator  jButtonComplexOperator 3 set Location  setLocation 600 320 j Button Complex Operator  jButtonComplexOperator 6 set Location  setLocation 270 280 j Button Complex Operator  jButtonComplexOperator 7 set Location  setLocation 324 280 j Button Complex Operator  jButtonComplexOperator 8 set Location  setLocation 600 280 j Button Complex Operator  jButtonComplexOperator 9 set Location  setLocation 600 280 j Button Complex Operator  jButtonComplexOperator 12 set Location  setLocation 270 240 j Button Complex Operator  jButtonComplexOperator 13 set Location  setLocation 324 240 j Button Complex Operator  jButtonComplexOperator 14 set Location  setLocation 600 240 j Button Complex Operator  jButtonComplexOperator 15 set Location  setLocation 600 240 j Button Shift  jButtonShift set Background  setBackground java awt Color 178 190 200 j Button Shift  jButtonShift set Text  setText Shift 
------------------------------------------------------------------------
[button, shift, action, performed, jbuttonshiftactionperformed, shifton, complex, operator, jbuttoncomplexoperator, set, location, setlocation, jbuttonshift, background, setbackground, java, awt, color, text, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,jButtonMemoryActionPerformed
367 , 378
------------------------------------------------------------------------
	//memory buttons
	private void jButtonMemoryActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="M" || evt.getActionCommand().equals("m")){
			number=number+memory;
			inputString=inputString+memory;
			jTextDisplay.setText(inputString);
		}else if(evt.getActionCommand()=="MS" || evt.getActionCommand().equals("s")){
			if(jLabelDisplay.getText().length()>0){
				memory=Double.parseDouble(jLabelDisplay.getText());
			}
		}
	}

------------------------------------------------------------------------
 j Button Memory Action Performed  jButtonMemoryActionPerformed  memory  buttons   evt get Action Command  getActionCommand M evt get Action Command  getActionCommand equals m number number memory input String  inputString input String  inputString memory j Text Display  jTextDisplay set Text  setText input String  inputString evt get Action Command  getActionCommand MS evt get Action Command  getActionCommand equals s j Label Display  jLabelDisplay get Text  getText length 0 memory Double parse Double  parseDouble j Label Display  jLabelDisplay get Text  getText 
------------------------------------------------------------------------
[button, memory, action, performed, jbuttonmemoryactionperformed, buttons, evt, command, getactioncommand, equals, number, input, string, inputstring, text, display, jtextdisplay, set, settext, ms, label, jlabeldisplay, gettext, length, double, parse, parsedouble]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,jButtonClearActionPerformed
379 , 399
------------------------------------------------------------------------
	//clear button
	private void jButtonClearActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="<B" || evt.getActionCommand().equals("\b")){
			if(inputString.length()>0){
				inputString=inputString.substring(0, inputString.length()-1);
			}
			if(number.length()>0){
				number=number.substring(0, number.length()-1);
			}
			jTextDisplay.setText(inputString);
		}else if(evt.getActionCommand()=="C" || evt.getActionCommand().equals("c")){
			inputString="";
			number="";
			jTextDisplay.setText(inputString);
		}else if(evt.getActionCommand()=="AC" || evt.getActionCommand().equals("a")){
			inputString="";
			number="";
			jTextDisplay.setText("");
			jLabelDisplay.setText("");
		}
	}

------------------------------------------------------------------------
 j Button Clear Action Performed  jButtonClearActionPerformed  clear  button   evt get Action Command  getActionCommand B evt get Action Command  getActionCommand equals b input String  inputString length 0 input String  inputString input String  inputString substring 0 input String  inputString length 1 number length 0 number number substring 0 number length 1 j Text Display  jTextDisplay set Text  setText input String  inputString evt get Action Command  getActionCommand C evt get Action Command  getActionCommand equals c input String  inputString number j Text Display  jTextDisplay set Text  setText input String  inputString evt get Action Command  getActionCommand AC evt get Action Command  getActionCommand equals a input String  inputString number j Text Display  jTextDisplay set Text  setText j Label Display  jLabelDisplay set Text  setText 
------------------------------------------------------------------------
[button, clear, action, performed, jbuttonclearactionperformed, evt, command, getactioncommand, equals, input, string, inputstring, length, substring, number, text, display, jtextdisplay, set, settext, ac, label, jlabeldisplay]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,main
409 , 419
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new AdvancedCalculator();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Advanced Calculator  AdvancedCalculator 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, advanced, calculator, advancedcalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,AdvancedCalculator
50 , 59
------------------------------------------------------------------------
	/***##Constructor##***/
	public AdvancedCalculator() {
		inputString="";
    	number="";
    	shiftOn=false;
    	memory=0;
    	ans="";
		initialComponent();
		super.jCBItemMode[1].setSelected(true);
	}

------------------------------------------------------------------------
 Advanced Calculator  AdvancedCalculator   Constructor  input String  inputString number shift On  shiftOn memory 0 ans initial Component  initialComponent j CB Item Mode  jCBItemMode 1 set Selected  setSelected 
------------------------------------------------------------------------
[advanced, calculator, advancedcalculator, constructor, input, string, inputstring, number, shift, shifton, memory, ans, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, selected, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculator.java,AdvancedCalculator
20 , 420
------------------------------------------------------------------------
/**
 * A Advanced Calculator
 * 
 * @author Minhas Kamal
 */
public class AdvancedCalculator extends UltimateCalculatorFrame{
	// GUI Declaration
	private AdvancedCalculatorGui AdvCalcGui;
	//operational object
	private AdvancedCalculatorOperationsExecutor advCalcOptExecutor;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JButton[] jButtonNumerical;
	private JButton[] jButtonOperator;
	private JButton[] jButtonComplexOperator;
	private JButton[] jButtonBracket;
	private JButton[] jButtonMemory;
	private JButton[] jButtonClear;
	private JButton jButtonShift;
	private JButton jButtonPoint;
	private JLabel jLabelDisplay;
	private JTextField jTextDisplay;
    //other variables
    private String inputString;
    private String number;
  	private boolean shiftOn;
  	private double memory;
  	private String ans;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public AdvancedCalculator() {
		inputString="";
    	number="";
    	shiftOn=false;
    	memory=0;
    	ans="";
		initialComponent();
		super.jCBItemMode[1].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		AdvCalcGui = new AdvancedCalculatorGui();
		//operation object
		advCalcOptExecutor = new AdvancedCalculatorOperationsExecutor();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"AdvancedCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jButtonNumerical = AdvCalcGui.jButtonNumerical;					//10 buttons(0-9)
		jButtonPoint = AdvCalcGui.jButtonPoint;							//point(.)
		jButtonOperator = AdvCalcGui.jButtonOperator;					//+, -, *, /, SQRT(), =
		jButtonComplexOperator = AdvCalcGui.jButtonComplexOperator;		//trigonometric, logarithm, factorial
		jButtonShift = AdvCalcGui.jButtonShift;							//Inverter
		jButtonMemory = AdvCalcGui.jButtonMemory;						//M, MS
		jButtonBracket = AdvCalcGui.jButtonBracket;						// (, )
		jButtonClear = AdvCalcGui.jButtonClear; 						//AC, C, back space
		jLabelDisplay = AdvCalcGui.jLabelDisplay;						//result
		jTextDisplay = AdvCalcGui.jTextDisplay;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
			jButtonNumerical[i].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
				put(KeyStroke.getKeyStroke(48+i, 0), i+"_pressed");
			jButtonNumerical[i].getActionMap().put(i+"_pressed", new AbstractAction() {
				public void actionPerformed(ActionEvent evt) {
					jButtonNumericalActionPerformed(evt);
				}
			});
		}
		//Point
		jButtonPoint.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD,0), "POINT_pressed");
		jButtonPoint.getActionMap().put("POINT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonPoint.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonNumericalActionPerformed(evt);
            }
        });
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperator(evt);
	            }
	        });
		}
		jButtonOperator[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,InputEvent.SHIFT_MASK), "PLUS_pressed");
		jButtonOperator[0].getActionMap().put("PLUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,0), "MINUS_pressed");
		jButtonOperator[1].getActionMap().put("MINUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_8,InputEvent.SHIFT_MASK), "MULT_pressed");
		jButtonOperator[2].getActionMap().put("MULT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,0), "DIVD_pressed");
		jButtonOperator[3].getActionMap().put("DIVD_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[5].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,0), "EQL_pressed");
		jButtonOperator[5].getActionMap().put("EQL_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_R,0), "SQRT_pressed");
		jButtonOperator[4].getActionMap().put("SQRT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonOperator[6].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_6,InputEvent.SHIFT_MASK), "POW_pressed");
		jButtonOperator[6].getActionMap().put("POW_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		//Complex Operator Buttons
		for(int i=0; i<22; i++){	
			jButtonComplexOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperator(evt);
	            }
	        });
		}
		//shift button
		jButtonShift.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonShiftActionPerformed(evt);
            }
        });
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonMemoryActionPerformed(evt);
	            }
	        });
		}
		jButtonMemory[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
    		put(KeyStroke.getKeyStroke(KeyEvent.VK_M,0), "MEM_pressed");
		jButtonMemory[0].getActionMap().put("MEM_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		jButtonMemory[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "STO_pressed");
		jButtonMemory[1].getActionMap().put("STO_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		//bracket button
		for(int i=0; i<2; i++){
			jButtonBracket[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperator(evt);
	            }
	        });
		}
		jButtonBracket[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_9,InputEvent.SHIFT_MASK), "(_pressed");
		jButtonBracket[0].getActionMap().put("(_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		jButtonBracket[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_0,InputEvent.SHIFT_MASK), ")_pressed");
		jButtonBracket[1].getActionMap().put(")_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperator(evt);
	        }
	    });
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonClearActionPerformed(evt);
	            }
	        });
		}
		jButtonClear[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C,0), "CLR_pressed");
		jButtonClear[0].getActionMap().put("CLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0), "ACLR_pressed");
		jButtonClear[1].getActionMap().put("ACLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), "BSPACE_pressed");
		jButtonClear[2].getActionMap().put("BSPACE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//**Setting Criterion of the Frame**//
		super.gui.add(AdvCalcGui);
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Advanced Calculator");
		super.gui.setResizable(false);
		super.gui.setBounds(230, 115, 500, 420);
		super.gui.setFocusable(true);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	//numarical buttons
	private void jButtonNumericalActionPerformed(ActionEvent evt){
		if(inputString.length()<100){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				inputString=inputString + evt.getActionCommand();	
				number=number+evt.getActionCommand();
			}
		}
		jTextDisplay.setText(inputString);
	}
	//operator buttons
	private void jButtonOperator(ActionEvent evt){
		if(evt.getActionCommand().equals("=")){
			if(!inputString.endsWith(" ")) {
				inputString = inputString + " ";
			}
			String result = advCalcOptExecutor.infixEvaluation(inputString);
			jLabelDisplay.setText(result);
			if(!result.equals("")) ans=result;
		}
		else{
			if(number.length()>0){
				inputString=inputString + " ";
			}
			if(inputString.length()<120){
				String actionCommand=evt.getActionCommand();
				if(actionCommand=="PI"){
					inputString=inputString + "3.141592654 ";
				}else if(actionCommand=="E"){
					inputString=inputString + "2.718281828 ";
				}else if(actionCommand=="Ans"){
					inputString=inputString + ans + " ";
				}else if(actionCommand=="nPr"){
					inputString=inputString + "P ";
				}else if(actionCommand=="nCr"){
					inputString=inputString + "C ";
				}else if(actionCommand=="n!"){
					inputString=inputString + "fact ";
				}else if(actionCommand=="x 10^"){
					inputString=inputString + "x 10 ^ ";
				}else{
					if(actionCommand.equals("*")){
						actionCommand="x";
					}else if(actionCommand.equals("r")){
						actionCommand="sqrt";
					}
					inputString=inputString + actionCommand + " ";
				}
			}
			jTextDisplay.setText(inputString);
		}
		number=""; 
	}
	//Shift
	private void jButtonShiftActionPerformed(ActionEvent evt){
		if(!shiftOn){
			shiftOn=true;
			jButtonComplexOperator[0].setLocation(600, 320); 
			jButtonComplexOperator[1].setLocation(600, 320); 
			jButtonComplexOperator[2].setLocation(270, 320); 
			jButtonComplexOperator[3].setLocation(324, 320); 
			jButtonComplexOperator[6].setLocation(600, 280);
			jButtonComplexOperator[7].setLocation(600, 280);
			jButtonComplexOperator[8].setLocation(270, 280);
			jButtonComplexOperator[9].setLocation(324, 280);
			jButtonComplexOperator[12].setLocation(600, 240);
			jButtonComplexOperator[13].setLocation(600, 240);
			jButtonComplexOperator[14].setLocation(270, 240);
			jButtonComplexOperator[15].setLocation(324, 240);
			jButtonShift.setBackground(new java.awt.Color(255, 255, 225));
			jButtonShift.setText("<~Shift~>");
		}else{
			shiftOn=false;
			jButtonComplexOperator[0].setLocation(270, 320);
			jButtonComplexOperator[1].setLocation(324, 320);
			jButtonComplexOperator[2].setLocation(600, 320);
			jButtonComplexOperator[3].setLocation(600, 320);
			jButtonComplexOperator[6].setLocation(270, 280);
			jButtonComplexOperator[7].setLocation(324, 280);
			jButtonComplexOperator[8].setLocation(600, 280);
			jButtonComplexOperator[9].setLocation(600, 280);
			jButtonComplexOperator[12].setLocation(270, 240);
			jButtonComplexOperator[13].setLocation(324, 240);
			jButtonComplexOperator[14].setLocation(600, 240);
			jButtonComplexOperator[15].setLocation(600, 240);
			jButtonShift.setBackground(new java.awt.Color(178, 190, 200));
			jButtonShift.setText("Shift");
		}
	}
	//memory buttons
	private void jButtonMemoryActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="M" || evt.getActionCommand().equals("m")){
			number=number+memory;
			inputString=inputString+memory;
			jTextDisplay.setText(inputString);
		}else if(evt.getActionCommand()=="MS" || evt.getActionCommand().equals("s")){
			if(jLabelDisplay.getText().length()>0){
				memory=Double.parseDouble(jLabelDisplay.getText());
			}
		}
	}
	//clear button
	private void jButtonClearActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="<B" || evt.getActionCommand().equals("\b")){
			if(inputString.length()>0){
				inputString=inputString.substring(0, inputString.length()-1);
			}
			if(number.length()>0){
				number=number.substring(0, number.length()-1);
			}
			jTextDisplay.setText(inputString);
		}else if(evt.getActionCommand()=="C" || evt.getActionCommand().equals("c")){
			inputString="";
			number="";
			jTextDisplay.setText(inputString);
		}else if(evt.getActionCommand()=="AC" || evt.getActionCommand().equals("a")){
			inputString="";
			number="";
			jTextDisplay.setText("");
			jLabelDisplay.setText("");
		}
	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new AdvancedCalculator();
	}
}

------------------------------------------------------------------------
 Advanced Calculator  AdvancedCalculator  GUI  Declaration  operational  object    variables   
    Advanced  Calculator 
  Calculator
   
      Minhas  Kamal 
  Kamal
  Advanced Calculator Gui  AdvancedCalculatorGui Adv Calc Gui  AdvCalcGui Advanced Calculator Operations Executor  AdvancedCalculatorOperationsExecutor adv Calc Opt Executor  advCalcOptExecutor J Button  JButton j Button Numerical  jButtonNumerical J Button  JButton j Button Operator  jButtonOperator J Button  JButton j Button Complex Operator  jButtonComplexOperator J Button  JButton j Button Bracket  jButtonBracket J Button  JButton j Button Memory  jButtonMemory J Button  JButton j Button Clear  jButtonClear J Button  JButton j Button Shift  jButtonShift J Button  JButton j Button Point  jButtonPoint J Label  JLabel j Label Display  jLabelDisplay J Text Field  JTextField j Text Display  jTextDisplay String input String  inputString String number shift On  shiftOn memory String ans 
------------------------------------------------------------------------
[advanced, calculator, advancedcalculator, gui, declaration, operational, object, variables, minhas, kamal, advancedcalculatorgui, adv, calc, advcalcgui, operations, executor, advancedcalculatoroperationsexecutor, opt, advcalcoptexecutor, button, jbutton, numerical, jbuttonnumerical, operator, jbuttonoperator, complex, jbuttoncomplexoperator, bracket, jbuttonbracket, memory, jbuttonmemory, clear, jbuttonclear, shift, jbuttonshift, point, jbuttonpoint, label, jlabel, display, jlabeldisplay, text, field, jtextfield, jtextdisplay, string, input, inputstring, number, shifton, ans]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorGui.java,initialComponent
42 , 219
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jButtonNumerical=new JButton[10];			//10 buttons(0-9)
		jButtonPoint=new JButton();					//point(.)
		jButtonOperator=new JButton[7];				//+, -, *, /, SQRT(), =
		jButtonComplexOperator=new JButton[22];		//trigonometric, logarithm, factorial
		jButtonShift = new JButton();				//Inverter
		jButtonMemory=new JButton[2];				//M, MS
		jButtonBracket=new JButton[2];				// (, )
		jButtonClear=new JButton[3]; 				//AC, C, back space
		jLabelDisplay=new JLabel();					//result
		jTextDisplay=new JTextField();
		jTextStore=new JTextField[4];				//space to store
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i] = new JButton(""+i);
			jButtonNumerical[i].setSize(50, 40);
			jButtonNumerical[i].setLocation(((i-1)%3)*50+10, 280-(((i-1)/3)*40));
			jButtonNumerical[i].setFont(new Font("Calibri", 0, 19));
			jButtonNumerical[i].setBackground(new Color(200, 200, 190));
			jButtonNumerical[i].setBorder(null);
		}
		jButtonNumerical[0].setLocation(10, 320); jButtonNumerical[0].setSize(100, 40);
		//Point
		jButtonPoint.setBackground(new Color(210, 210, 190));
		jButtonPoint.setText("."); jButtonPoint.setBounds(110, 320, 50, 40);
		jButtonPoint.setFont(new Font("Vrinda", 0, 26));
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i] = new JButton();
			jButtonOperator[i].setSize(45, 40);
			jButtonOperator[i].setFont(new Font("Calibri", 0, 17));
			jButtonOperator[i].setBackground(new Color(188, 188, 188));
			jButtonOperator[i].setBorder(null);
		}
		jButtonOperator[0].setText("+"); jButtonOperator[0].setLocation(170, 320);
		jButtonOperator[1].setText("-"); jButtonOperator[1].setLocation(170, 280);
		jButtonOperator[2].setText("x"); jButtonOperator[2].setLocation(170, 240);
		jButtonOperator[3].setText("/"); jButtonOperator[3].setLocation(170, 200);
		jButtonOperator[5].setText("="); jButtonOperator[5].setBounds(215, 280, 45, 80);
			jButtonOperator[5].setFont(new Font("Arial", 0, 19));
		jButtonOperator[4].setText("sqrt"); jButtonOperator[4].setLocation(215, 240);
		jButtonOperator[6].setText("^"); jButtonOperator[6].setLocation(215, 200);
		//Complex Operator Buttons
		for(int i=0; i<22; i++){	
			jButtonComplexOperator[i] = new JButton();
			jButtonComplexOperator[i].setSize(53, 40);
			jButtonComplexOperator[i].setFont(new Font("Calibri", 0, 15));
			jButtonComplexOperator[i].setBackground(new Color(178, 178, 178));
			jButtonComplexOperator[i].setBorder(null);
		}
		jButtonComplexOperator[0].setLocation(270, 320); jButtonComplexOperator[0].setText("tan");
			jButtonComplexOperator[1].setLocation(324, 320); jButtonComplexOperator[1].setText("cbrt");
			jButtonComplexOperator[2].setLocation(600, 320); jButtonComplexOperator[2].setText("atan");
			jButtonComplexOperator[3].setLocation(600, 320); jButtonComplexOperator[3].setText("tanh");
			jButtonComplexOperator[4].setLocation(378, 320); jButtonComplexOperator[4].setText("x 10^");
			jButtonComplexOperator[5].setLocation(432, 320); jButtonComplexOperator[5].setText("Ans");
			jButtonComplexOperator[6].setLocation(270, 280); jButtonComplexOperator[6].setText("cos");
			jButtonComplexOperator[7].setLocation(324, 280); jButtonComplexOperator[7].setText("cube");
			jButtonComplexOperator[8].setLocation(600, 280); jButtonComplexOperator[8].setText("acos");
			jButtonComplexOperator[9].setLocation(600, 280); jButtonComplexOperator[9].setText("cosh");
			jButtonComplexOperator[10].setLocation(378, 280); jButtonComplexOperator[10].setText("ln");
			jButtonComplexOperator[11].setLocation(432, 280); jButtonComplexOperator[11].setText("PI");
			jButtonComplexOperator[12].setLocation(270, 240); jButtonComplexOperator[12].setText("sin");
			jButtonComplexOperator[13].setLocation(324, 240); jButtonComplexOperator[13].setText("sqre");
			jButtonComplexOperator[14].setLocation(600, 240); jButtonComplexOperator[14].setText("asin");
			jButtonComplexOperator[15].setLocation(600, 240); jButtonComplexOperator[15].setText("sinh");
			jButtonComplexOperator[16].setLocation(378, 240); jButtonComplexOperator[16].setText("log");
			jButtonComplexOperator[17].setLocation(432, 240); jButtonComplexOperator[17].setText("E");
			jButtonComplexOperator[18].setLocation(270, 200); jButtonComplexOperator[18].setText("nPr");
			jButtonComplexOperator[19].setLocation(324, 200); jButtonComplexOperator[19].setText("nCr");
			jButtonComplexOperator[20].setLocation(378, 200); jButtonComplexOperator[20].setText("n!");
			jButtonComplexOperator[21].setLocation(432, 200); jButtonComplexOperator[21].setText("mod");
		//shift button
		jButtonShift.setText("Shift");
		jButtonShift.setBounds(270, 150, 105, 33);
		jButtonShift.setBorder(null);
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i] = new JButton(); 
			jButtonMemory[i].setSize(50, 33);
			jButtonMemory[i].setFont(new Font("Arial", 0, 13));
			jButtonMemory[i].setBorder(null);
		}
		jButtonMemory[0].setText("M"); jButtonMemory[0].setLocation(10, 150);
		jButtonMemory[1].setText("MS"); jButtonMemory[1].setLocation(60, 150);
		//bracket button
		for(int i=0; i<2; i++){
			jButtonBracket[i] = new JButton();
			jButtonBracket[i].setSize(45, 33);
			jButtonBracket[i].setFont(new Font("Arial", 0, 13));
			jButtonBracket[i].setBorder(null);
		}
		jButtonBracket[0].setText("("); jButtonBracket[0].setLocation(170, 150);
		jButtonBracket[1].setText(")"); jButtonBracket[1].setLocation(215, 150);
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i] = new JButton();
			jButtonClear[i].setSize(53, 33);
			jButtonClear[i].setFont(new Font("Vrinda", 0, 17));
			jButtonClear[i].setBorder(null);
		}
		jButtonClear[0].setText("C"); jButtonClear[0].setLocation(378, 150);
		jButtonClear[1].setText("AC"); jButtonClear[1].setLocation(432, 150);
		jButtonClear[2].setText("<B"); jButtonClear[2].setLocation(110, 150); jButtonClear[2].setSize(50, 33);
		//Display text
		jTextDisplay.setSize(360, 43);
		jTextDisplay.setHorizontalAlignment(2);
		jTextDisplay.setFont(new Font("Tahoma", 0, 17));
		jTextDisplay.setBackground(new Color(220, 220, 220));
		jTextDisplay.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		jTextDisplay.setLocation(10, 18);
		jTextDisplay.setEditable(false);
		//Display label
		jLabelDisplay.setSize(360, 60);
		jLabelDisplay.setHorizontalAlignment(4);
		jLabelDisplay.setFont(new Font("Lucida Console", 0, 20));
		jLabelDisplay.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		jLabelDisplay.setLocation(10, 63);
		//text field for store
		for(int i=0; i<4; i++){
			jTextStore[i] = new JTextField();
			jTextStore[i].setSize(105, 25);
			jTextStore[i].setBackground(new Color(235, 235, 235));
			jTextStore[i].setCaretColor(new Color(178, 178, 78));
		}
		jTextStore[0].setLocation(382, 16);
		jTextStore[1].setLocation(382, 44);
		jTextStore[2].setLocation(382, 72);
		jTextStore[3].setLocation(382, 100);
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding buttons
		for(int i=0; i<10; i++){
			add(jButtonNumerical[i]);
		}
		add(jButtonPoint);
		for(int i=0; i<7; i++){
			add(jButtonOperator[i]);
		}
		for(int i=0; i<22; i++){
			add(jButtonComplexOperator[i]);
		}
		for(int i=0; i<2; i++){
			add(jButtonMemory[i]);
		}
		for(int i=0; i<3; i++){
			add(jButtonClear[i]);
		}
		add(jButtonShift);
		for(int i=0; i<2; i++){
			add(jButtonBracket[i]);
		}
		//adding display labels
		add(jLabelDisplay);
		add(jTextDisplay);
		//adding text fields
		for(int i=0; i<4; i++){
			add(jTextStore[i]);
		}
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		setBounds(0, 0, 500, 410);
		setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"AdvancedCalculatorBackground.jpg")));
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		   End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										   End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	   End   Adding  Components  															 _______ A _______  _______A_______  10  buttons  point      SQRT   trigonometric  logarithm  factorial  Inverter   MS    AC   back  space  result  space   store  Numeric  Buttons  Point  Operator  Buttons  Complex  Operator  Buttons  shift  button  Memory  Buttons  bracket  button  Clear  Buttons  Display  text  Display  label  text  field   store  adding  buttons  adding  display  labels  adding  text  fields  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Button Numerical  jButtonNumerical J Button  JButton 10 j Button Point  jButtonPoint J Button  JButton j Button Operator  jButtonOperator J Button  JButton 7 j Button Complex Operator  jButtonComplexOperator J Button  JButton 22 j Button Shift  jButtonShift J Button  JButton j Button Memory  jButtonMemory J Button  JButton 2 j Button Bracket  jButtonBracket J Button  JButton 2 j Button Clear  jButtonClear J Button  JButton 3 j Label Display  jLabelDisplay J Label  JLabel j Text Display  jTextDisplay J Text Field  JTextField j Text Store  jTextStore J Text Field  JTextField 4 i 0 i 10 i j Button Numerical  jButtonNumerical i J Button  JButton i j Button Numerical  jButtonNumerical i set Size  setSize 50 40 j Button Numerical  jButtonNumerical i set Location  setLocation i 1 3 50 10 280 i 1 3 40 j Button Numerical  jButtonNumerical i set Font  setFont Font Calibri 0 19 j Button Numerical  jButtonNumerical i set Background  setBackground Color 200 200 190 j Button Numerical  jButtonNumerical i set Border  setBorder j Button Numerical  jButtonNumerical 0 set Location  setLocation 10 320 j Button Numerical  jButtonNumerical 0 set Size  setSize 100 40 j Button Point  jButtonPoint set Background  setBackground Color 210 210 190 j Button Point  jButtonPoint set Text  setText j Button Point  jButtonPoint set Bounds  setBounds 110 320 50 40 j Button Point  jButtonPoint set Font  setFont Font Vrinda 0 26 i 0 i 7 i j Button Operator  jButtonOperator i J Button  JButton j Button Operator  jButtonOperator i set Size  setSize 45 40 j Button Operator  jButtonOperator i set Font  setFont Font Calibri 0 17 j Button Operator  jButtonOperator i set Background  setBackground Color 188 188 188 j Button Operator  jButtonOperator i set Border  setBorder j Button Operator  jButtonOperator 0 set Text  setText j Button Operator  jButtonOperator 0 set Location  setLocation 170 320 j Button Operator  jButtonOperator 1 set Text  setText j Button Operator  jButtonOperator 1 set Location  setLocation 170 280 j Button Operator  jButtonOperator 2 set Text  setText x j Button Operator  jButtonOperator 2 set Location  setLocation 170 240 j Button Operator  jButtonOperator 3 set Text  setText j Button Operator  jButtonOperator 3 set Location  setLocation 170 200 j Button Operator  jButtonOperator 5 set Text  setText j Button Operator  jButtonOperator 5 set Bounds  setBounds 215 280 45 80 j Button Operator  jButtonOperator 5 set Font  setFont Font Arial 0 19 j Button Operator  jButtonOperator 4 set Text  setText sqrt j Button Operator  jButtonOperator 4 set Location  setLocation 215 240 j Button Operator  jButtonOperator 6 set Text  setText j Button Operator  jButtonOperator 6 set Location  setLocation 215 200 i 0 i 22 i j Button Complex Operator  jButtonComplexOperator i J Button  JButton j Button Complex Operator  jButtonComplexOperator i set Size  setSize 53 40 j Button Complex Operator  jButtonComplexOperator i set Font  setFont Font Calibri 0 15 j Button Complex Operator  jButtonComplexOperator i set Background  setBackground Color 178 178 178 j Button Complex Operator  jButtonComplexOperator i set Border  setBorder j Button Complex Operator  jButtonComplexOperator 0 set Location  setLocation 270 320 j Button Complex Operator  jButtonComplexOperator 0 set Text  setText tan j Button Complex Operator  jButtonComplexOperator 1 set Location  setLocation 324 320 j Button Complex Operator  jButtonComplexOperator 1 set Text  setText cbrt j Button Complex Operator  jButtonComplexOperator 2 set Location  setLocation 600 320 j Button Complex Operator  jButtonComplexOperator 2 set Text  setText atan j Button Complex Operator  jButtonComplexOperator 3 set Location  setLocation 600 320 j Button Complex Operator  jButtonComplexOperator 3 set Text  setText tanh j Button Complex Operator  jButtonComplexOperator 4 set Location  setLocation 378 320 j Button Complex Operator  jButtonComplexOperator 4 set Text  setText x 10 j Button Complex Operator  jButtonComplexOperator 5 set Location  setLocation 432 320 j Button Complex Operator  jButtonComplexOperator 5 set Text  setText Ans j Button Complex Operator  jButtonComplexOperator 6 set Location  setLocation 270 280 j Button Complex Operator  jButtonComplexOperator 6 set Text  setText cos j Button Complex Operator  jButtonComplexOperator 7 set Location  setLocation 324 280 j Button Complex Operator  jButtonComplexOperator 7 set Text  setText cube j Button Complex Operator  jButtonComplexOperator 8 set Location  setLocation 600 280 j Button Complex Operator  jButtonComplexOperator 8 set Text  setText acos j Button Complex Operator  jButtonComplexOperator 9 set Location  setLocation 600 280 j Button Complex Operator  jButtonComplexOperator 9 set Text  setText cosh j Button Complex Operator  jButtonComplexOperator 10 set Location  setLocation 378 280 j Button Complex Operator  jButtonComplexOperator 10 set Text  setText ln j Button Complex Operator  jButtonComplexOperator 11 set Location  setLocation 432 280 j Button Complex Operator  jButtonComplexOperator 11 set Text  setText PI j Button Complex Operator  jButtonComplexOperator 12 set Location  setLocation 270 240 j Button Complex Operator  jButtonComplexOperator 12 set Text  setText sin j Button Complex Operator  jButtonComplexOperator 13 set Location  setLocation 324 240 j Button Complex Operator  jButtonComplexOperator 13 set Text  setText sqre j Button Complex Operator  jButtonComplexOperator 14 set Location  setLocation 600 240 j Button Complex Operator  jButtonComplexOperator 14 set Text  setText asin j Button Complex Operator  jButtonComplexOperator 15 set Location  setLocation 600 240 j Button Complex Operator  jButtonComplexOperator 15 set Text  setText sinh j Button Complex Operator  jButtonComplexOperator 16 set Location  setLocation 378 240 j Button Complex Operator  jButtonComplexOperator 16 set Text  setText log j Button Complex Operator  jButtonComplexOperator 17 set Location  setLocation 432 240 j Button Complex Operator  jButtonComplexOperator 17 set Text  setText E j Button Complex Operator  jButtonComplexOperator 18 set Location  setLocation 270 200 j Button Complex Operator  jButtonComplexOperator 18 set Text  setText n Pr  nPr j Button Complex Operator  jButtonComplexOperator 19 set Location  setLocation 324 200 j Button Complex Operator  jButtonComplexOperator 19 set Text  setText n Cr  nCr j Button Complex Operator  jButtonComplexOperator 20 set Location  setLocation 378 200 j Button Complex Operator  jButtonComplexOperator 20 set Text  setText n j Button Complex Operator  jButtonComplexOperator 21 set Location  setLocation 432 200 j Button Complex Operator  jButtonComplexOperator 21 set Text  setText mod j Button Shift  jButtonShift set Text  setText Shift j Button Shift  jButtonShift set Bounds  setBounds 270 150 105 33 j Button Shift  jButtonShift set Border  setBorder i 0 i 2 i j Button Memory  jButtonMemory i J Button  JButton j Button Memory  jButtonMemory i set Size  setSize 50 33 j Button Memory  jButtonMemory i set Font  setFont Font Arial 0 13 j Button Memory  jButtonMemory i set Border  setBorder j Button Memory  jButtonMemory 0 set Text  setText M j Button Memory  jButtonMemory 0 set Location  setLocation 10 150 j Button Memory  jButtonMemory 1 set Text  setText MS j Button Memory  jButtonMemory 1 set Location  setLocation 60 150 i 0 i 2 i j Button Bracket  jButtonBracket i J Button  JButton j Button Bracket  jButtonBracket i set Size  setSize 45 33 j Button Bracket  jButtonBracket i set Font  setFont Font Arial 0 13 j Button Bracket  jButtonBracket i set Border  setBorder j Button Bracket  jButtonBracket 0 set Text  setText j Button Bracket  jButtonBracket 0 set Location  setLocation 170 150 j Button Bracket  jButtonBracket 1 set Text  setText j Button Bracket  jButtonBracket 1 set Location  setLocation 215 150 i 0 i 3 i j Button Clear  jButtonClear i J Button  JButton j Button Clear  jButtonClear i set Size  setSize 53 33 j Button Clear  jButtonClear i set Font  setFont Font Vrinda 0 17 j Button Clear  jButtonClear i set Border  setBorder j Button Clear  jButtonClear 0 set Text  setText C j Button Clear  jButtonClear 0 set Location  setLocation 378 150 j Button Clear  jButtonClear 1 set Text  setText AC j Button Clear  jButtonClear 1 set Location  setLocation 432 150 j Button Clear  jButtonClear 2 set Text  setText B j Button Clear  jButtonClear 2 set Location  setLocation 110 150 j Button Clear  jButtonClear 2 set Size  setSize 50 33 j Text Display  jTextDisplay set Size  setSize 360 43 j Text Display  jTextDisplay set Horizontal Alignment  setHorizontalAlignment 2 j Text Display  jTextDisplay set Font  setFont Font Tahoma 0 17 j Text Display  jTextDisplay set Background  setBackground Color 220 220 220 j Text Display  jTextDisplay set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Text Display  jTextDisplay set Location  setLocation 10 18 j Text Display  jTextDisplay set Editable  setEditable j Label Display  jLabelDisplay set Size  setSize 360 60 j Label Display  jLabelDisplay set Horizontal Alignment  setHorizontalAlignment 4 j Label Display  jLabelDisplay set Font  setFont Font Lucida Console 0 20 j Label Display  jLabelDisplay set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Label Display  jLabelDisplay set Location  setLocation 10 63 i 0 i 4 i j Text Store  jTextStore i J Text Field  JTextField j Text Store  jTextStore i set Size  setSize 105 25 j Text Store  jTextStore i set Background  setBackground Color 235 235 235 j Text Store  jTextStore i set Caret Color  setCaretColor Color 178 178 78 j Text Store  jTextStore 0 set Location  setLocation 382 16 j Text Store  jTextStore 1 set Location  setLocation 382 44 j Text Store  jTextStore 2 set Location  setLocation 382 72 j Text Store  jTextStore 3 set Location  setLocation 382 100 i 0 i 10 i add j Button Numerical  jButtonNumerical i add j Button Point  jButtonPoint i 0 i 7 i add j Button Operator  jButtonOperator i i 0 i 22 i add j Button Complex Operator  jButtonComplexOperator i i 0 i 2 i add j Button Memory  jButtonMemory i i 0 i 3 i add j Button Clear  jButtonClear i add j Button Shift  jButtonShift i 0 i 2 i add j Button Bracket  jButtonBracket i add j Label Display  jLabelDisplay add j Text Display  jTextDisplay i 0 i 4 i add j Text Store  jTextStore i set Bounds  setBounds 0 0 500 410 set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Advanced Calculator Background  AdvancedCalculatorBackground jpg 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, buttons, point, sqrt, trigonometric, logarithm, factorial, inverter, ms, ac, back, space, result, store, numeric, operator, complex, shift, button, memory, bracket, clear, display, text, label, field, labels, fields, criterion, frame, method, initializing, gui, variables, placing, specific, specifies, criteria, main, numerical, jbuttonnumerical, jbutton, jbuttonpoint, jbuttonoperator, jbuttoncomplexoperator, jbuttonshift, jbuttonmemory, jbuttonbracket, jbuttonclear, jlabeldisplay, jlabel, jtextdisplay, jtextfield, jtextstore, set, size, setsize, location, setlocation, font, setfont, calibri, background, setbackground, color, border, setborder, settext, setbounds, vrinda, arial, tan, cbrt, atan, tanh, ans, cos, cube, acos, cosh, ln, pi, sin, sqre, asin, sinh, log, pr, npr, cr, ncr, mod, horizontal, alignment, sethorizontalalignment, tahoma, soft, bevel, softbevelborder, bevelborder, lowered, editable, seteditable, lucida, console, caret, setcaretcolor, add, icon, seticon, javax, swing, image, imageicon, class, getclass, resource, getresource, res, imgs, advanced, calculator, advancedcalculatorbackground, jpg]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorGui.java,main
220 , 236
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		AdvancedCalculatorGui gui = new AdvancedCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 510, 420);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Advanced Calculator Gui  AdvancedCalculatorGui gui Advanced Calculator Gui  AdvancedCalculatorGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 230 115 510 420 j Frame  jFrame set Visible  setVisible j Frame  jFrame set Layout  setLayout j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, advanced, calculator, gui, advancedcalculatorgui, frame, jframe, bounds, setbounds, visible, setvisible, layout, setlayout, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorGui.java,AdvancedCalculatorGui
38 , 41
------------------------------------------------------------------------
	/***##Constructor##***/
	public AdvancedCalculatorGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Advanced Calculator Gui  AdvancedCalculatorGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[advanced, calculator, gui, advancedcalculatorgui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorGui.java,AdvancedCalculatorGui
16 , 237
------------------------------------------------------------------------
/**
 * A Advanced Calculator GUI
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class AdvancedCalculatorGui extends JLabel{
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JButton[] jButtonNumerical;
	JButton[] jButtonOperator;
	JButton[] jButtonComplexOperator;
	JButton[] jButtonBracket;
	JButton[] jButtonMemory;
	JButton[] jButtonClear;
	JButton jButtonShift;
	JButton jButtonPoint;
	JLabel jLabelDisplay;
	JTextField jTextDisplay;
	JTextField[] jTextStore;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public AdvancedCalculatorGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jButtonNumerical=new JButton[10];			//10 buttons(0-9)
		jButtonPoint=new JButton();					//point(.)
		jButtonOperator=new JButton[7];				//+, -, *, /, SQRT(), =
		jButtonComplexOperator=new JButton[22];		//trigonometric, logarithm, factorial
		jButtonShift = new JButton();				//Inverter
		jButtonMemory=new JButton[2];				//M, MS
		jButtonBracket=new JButton[2];				// (, )
		jButtonClear=new JButton[3]; 				//AC, C, back space
		jLabelDisplay=new JLabel();					//result
		jTextDisplay=new JTextField();
		jTextStore=new JTextField[4];				//space to store
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i] = new JButton(""+i);
			jButtonNumerical[i].setSize(50, 40);
			jButtonNumerical[i].setLocation(((i-1)%3)*50+10, 280-(((i-1)/3)*40));
			jButtonNumerical[i].setFont(new Font("Calibri", 0, 19));
			jButtonNumerical[i].setBackground(new Color(200, 200, 190));
			jButtonNumerical[i].setBorder(null);
		}
		jButtonNumerical[0].setLocation(10, 320); jButtonNumerical[0].setSize(100, 40);
		//Point
		jButtonPoint.setBackground(new Color(210, 210, 190));
		jButtonPoint.setText("."); jButtonPoint.setBounds(110, 320, 50, 40);
		jButtonPoint.setFont(new Font("Vrinda", 0, 26));
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i] = new JButton();
			jButtonOperator[i].setSize(45, 40);
			jButtonOperator[i].setFont(new Font("Calibri", 0, 17));
			jButtonOperator[i].setBackground(new Color(188, 188, 188));
			jButtonOperator[i].setBorder(null);
		}
		jButtonOperator[0].setText("+"); jButtonOperator[0].setLocation(170, 320);
		jButtonOperator[1].setText("-"); jButtonOperator[1].setLocation(170, 280);
		jButtonOperator[2].setText("x"); jButtonOperator[2].setLocation(170, 240);
		jButtonOperator[3].setText("/"); jButtonOperator[3].setLocation(170, 200);
		jButtonOperator[5].setText("="); jButtonOperator[5].setBounds(215, 280, 45, 80);
			jButtonOperator[5].setFont(new Font("Arial", 0, 19));
		jButtonOperator[4].setText("sqrt"); jButtonOperator[4].setLocation(215, 240);
		jButtonOperator[6].setText("^"); jButtonOperator[6].setLocation(215, 200);
		//Complex Operator Buttons
		for(int i=0; i<22; i++){	
			jButtonComplexOperator[i] = new JButton();
			jButtonComplexOperator[i].setSize(53, 40);
			jButtonComplexOperator[i].setFont(new Font("Calibri", 0, 15));
			jButtonComplexOperator[i].setBackground(new Color(178, 178, 178));
			jButtonComplexOperator[i].setBorder(null);
		}
		jButtonComplexOperator[0].setLocation(270, 320); jButtonComplexOperator[0].setText("tan");
			jButtonComplexOperator[1].setLocation(324, 320); jButtonComplexOperator[1].setText("cbrt");
			jButtonComplexOperator[2].setLocation(600, 320); jButtonComplexOperator[2].setText("atan");
			jButtonComplexOperator[3].setLocation(600, 320); jButtonComplexOperator[3].setText("tanh");
			jButtonComplexOperator[4].setLocation(378, 320); jButtonComplexOperator[4].setText("x 10^");
			jButtonComplexOperator[5].setLocation(432, 320); jButtonComplexOperator[5].setText("Ans");
			jButtonComplexOperator[6].setLocation(270, 280); jButtonComplexOperator[6].setText("cos");
			jButtonComplexOperator[7].setLocation(324, 280); jButtonComplexOperator[7].setText("cube");
			jButtonComplexOperator[8].setLocation(600, 280); jButtonComplexOperator[8].setText("acos");
			jButtonComplexOperator[9].setLocation(600, 280); jButtonComplexOperator[9].setText("cosh");
			jButtonComplexOperator[10].setLocation(378, 280); jButtonComplexOperator[10].setText("ln");
			jButtonComplexOperator[11].setLocation(432, 280); jButtonComplexOperator[11].setText("PI");
			jButtonComplexOperator[12].setLocation(270, 240); jButtonComplexOperator[12].setText("sin");
			jButtonComplexOperator[13].setLocation(324, 240); jButtonComplexOperator[13].setText("sqre");
			jButtonComplexOperator[14].setLocation(600, 240); jButtonComplexOperator[14].setText("asin");
			jButtonComplexOperator[15].setLocation(600, 240); jButtonComplexOperator[15].setText("sinh");
			jButtonComplexOperator[16].setLocation(378, 240); jButtonComplexOperator[16].setText("log");
			jButtonComplexOperator[17].setLocation(432, 240); jButtonComplexOperator[17].setText("E");
			jButtonComplexOperator[18].setLocation(270, 200); jButtonComplexOperator[18].setText("nPr");
			jButtonComplexOperator[19].setLocation(324, 200); jButtonComplexOperator[19].setText("nCr");
			jButtonComplexOperator[20].setLocation(378, 200); jButtonComplexOperator[20].setText("n!");
			jButtonComplexOperator[21].setLocation(432, 200); jButtonComplexOperator[21].setText("mod");
		//shift button
		jButtonShift.setText("Shift");
		jButtonShift.setBounds(270, 150, 105, 33);
		jButtonShift.setBorder(null);
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i] = new JButton(); 
			jButtonMemory[i].setSize(50, 33);
			jButtonMemory[i].setFont(new Font("Arial", 0, 13));
			jButtonMemory[i].setBorder(null);
		}
		jButtonMemory[0].setText("M"); jButtonMemory[0].setLocation(10, 150);
		jButtonMemory[1].setText("MS"); jButtonMemory[1].setLocation(60, 150);
		//bracket button
		for(int i=0; i<2; i++){
			jButtonBracket[i] = new JButton();
			jButtonBracket[i].setSize(45, 33);
			jButtonBracket[i].setFont(new Font("Arial", 0, 13));
			jButtonBracket[i].setBorder(null);
		}
		jButtonBracket[0].setText("("); jButtonBracket[0].setLocation(170, 150);
		jButtonBracket[1].setText(")"); jButtonBracket[1].setLocation(215, 150);
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i] = new JButton();
			jButtonClear[i].setSize(53, 33);
			jButtonClear[i].setFont(new Font("Vrinda", 0, 17));
			jButtonClear[i].setBorder(null);
		}
		jButtonClear[0].setText("C"); jButtonClear[0].setLocation(378, 150);
		jButtonClear[1].setText("AC"); jButtonClear[1].setLocation(432, 150);
		jButtonClear[2].setText("<B"); jButtonClear[2].setLocation(110, 150); jButtonClear[2].setSize(50, 33);
		//Display text
		jTextDisplay.setSize(360, 43);
		jTextDisplay.setHorizontalAlignment(2);
		jTextDisplay.setFont(new Font("Tahoma", 0, 17));
		jTextDisplay.setBackground(new Color(220, 220, 220));
		jTextDisplay.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		jTextDisplay.setLocation(10, 18);
		jTextDisplay.setEditable(false);
		//Display label
		jLabelDisplay.setSize(360, 60);
		jLabelDisplay.setHorizontalAlignment(4);
		jLabelDisplay.setFont(new Font("Lucida Console", 0, 20));
		jLabelDisplay.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		jLabelDisplay.setLocation(10, 63);
		//text field for store
		for(int i=0; i<4; i++){
			jTextStore[i] = new JTextField();
			jTextStore[i].setSize(105, 25);
			jTextStore[i].setBackground(new Color(235, 235, 235));
			jTextStore[i].setCaretColor(new Color(178, 178, 78));
		}
		jTextStore[0].setLocation(382, 16);
		jTextStore[1].setLocation(382, 44);
		jTextStore[2].setLocation(382, 72);
		jTextStore[3].setLocation(382, 100);
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding buttons
		for(int i=0; i<10; i++){
			add(jButtonNumerical[i]);
		}
		add(jButtonPoint);
		for(int i=0; i<7; i++){
			add(jButtonOperator[i]);
		}
		for(int i=0; i<22; i++){
			add(jButtonComplexOperator[i]);
		}
		for(int i=0; i<2; i++){
			add(jButtonMemory[i]);
		}
		for(int i=0; i<3; i++){
			add(jButtonClear[i]);
		}
		add(jButtonShift);
		for(int i=0; i<2; i++){
			add(jButtonBracket[i]);
		}
		//adding display labels
		add(jLabelDisplay);
		add(jTextDisplay);
		//adding text fields
		for(int i=0; i<4; i++){
			add(jTextStore[i]);
		}
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		setBounds(0, 0, 500, 410);
		setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"AdvancedCalculatorBackground.jpg")));
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		AdvancedCalculatorGui gui = new AdvancedCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 510, 420);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Advanced Calculator Gui  AdvancedCalculatorGui    
    Advanced  Calculator  GUI 
  GUI
   
      Minhas  Kamal 
  Kamal
  J Button  JButton j Button Numerical  jButtonNumerical J Button  JButton j Button Operator  jButtonOperator J Button  JButton j Button Complex Operator  jButtonComplexOperator J Button  JButton j Button Bracket  jButtonBracket J Button  JButton j Button Memory  jButtonMemory J Button  JButton j Button Clear  jButtonClear J Button  JButton j Button Shift  jButtonShift J Button  JButton j Button Point  jButtonPoint J Label  JLabel j Label Display  jLabelDisplay J Text Field  JTextField j Text Display  jTextDisplay J Text Field  JTextField j Text Store  jTextStore 
------------------------------------------------------------------------
[advanced, calculator, gui, advancedcalculatorgui, minhas, kamal, button, jbutton, numerical, jbuttonnumerical, operator, jbuttonoperator, complex, jbuttoncomplexoperator, bracket, jbuttonbracket, memory, jbuttonmemory, clear, jbuttonclear, shift, jbuttonshift, point, jbuttonpoint, label, jlabel, display, jlabeldisplay, text, field, jtextfield, jtextdisplay, store, jtextstore]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,operation
14 , 32
------------------------------------------------------------------------
	/**
	 * Interfacing method															#****IM****#
	**/
	public String operation(String operand1, String operand2, String operator){
		try{
			if(operator.equals("+")) return sum(operand1, operand2);
			else if(operator.equals("-")) return substract(operand1, operand2);
			else if(operator.equals("x")) return multiply(operand1, operand2);
			else if(operator.equals("/")) return divide(operand1, operand2);
			else if(operator.equals("^")) return power(operand1, operand2);
			else if(operator.equals("C")) return nCr(operand1, operand2);
			else if(operator.equals("P")) return nPr(operand1, operand2);
			else if(operator.equals("mod")) return modulus(operand1, operand2);
			else return "";
		}catch(Exception e){
			new Message("Math Error! \nOr, invalid input! \nPlease input correctly.", 420);
			return "";
		}
	}

------------------------------------------------------------------------
 operation   
	   Interfacing  method 															  method															 IM 
	  operator equals sum operand 1  operand1 operand 2  operand2 operator equals substract operand 1  operand1 operand 2  operand2 operator equals x multiply operand 1  operand1 operand 2  operand2 operator equals divide operand 1  operand1 operand 2  operand2 operator equals power operand 1  operand1 operand 2  operand2 operator equals C n Cr  nCr operand 1  operand1 operand 2  operand2 operator equals P n Pr  nPr operand 1  operand1 operand 2  operand2 operator equals mod modulus operand 1  operand1 operand 2  operand2 Exception e Message Math Error n Or  nOr invalid input n Please  nPlease input correctly 420 
------------------------------------------------------------------------
[operation, interfacing, method, im, operator, equals, sum, operand, operand1, operand2, substract, multiply, divide, power, cr, ncr, pr, npr, mod, modulus, exception, message, math, error, invalid, input, nplease, correctly]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,operation
33 , 56
------------------------------------------------------------------------
	public String operation(String operand, String operator){
		try{
			if(operator.equals("sqrt")) return sqrt(operand);
			else if(operator.equals("cbrt")) return cbrt(operand);
			else if(operator.equals("fact")) return factorial(operand);
			else if(operator.equals("sqre")) return sqre(operand);
			else if(operator.equals("cube")) return cube(operand);
			else if(operator.equals("sin")) return sine(operand);
			else if(operator.equals("asin")) return asine(operand);
			else if(operator.equals("sinh")) return sineH(operand);
			else if(operator.equals("cos")) return cosine(operand);
			else if(operator.equals("acos")) return acosine(operand);
			else if(operator.equals("cosh")) return cosineH(operand);
			else if(operator.equals("tan")) return tangent(operand);
			else if(operator.equals("atan")) return atangent(operand);
			else if(operator.equals("tanh")) return tangentH(operand);
			else if(operator.equals("log")) return logarithm10(operand);
			else if(operator.equals("ln")) return logarithmE(operand);
			else return "";
		}catch(Exception e){
			new Message("Math Error! \n   Input correctly.", 420);
			return "";
		}
	}

------------------------------------------------------------------------
 operation   operator equals sqrt sqrt operand operator equals cbrt cbrt operand operator equals fact factorial operand operator equals sqre sqre operand operator equals cube cube operand operator equals sin sine operand operator equals asin asine operand operator equals sinh sine H  sineH operand operator equals cos cosine operand operator equals acos acosine operand operator equals cosh cosine H  cosineH operand operator equals tan tangent operand operator equals atan atangent operand operator equals tanh tangent H  tangentH operand operator equals log logarithm 10  logarithm10 operand operator equals ln logarithm E  logarithmE operand Exception e Message Math Error n Input correctly 420 
------------------------------------------------------------------------
[operation, operator, equals, sqrt, operand, cbrt, fact, factorial, sqre, cube, sin, sine, asin, asine, sinh, sineh, cos, cosine, acos, acosine, cosh, cosineh, tan, tangent, atan, atangent, tanh, tangenth, log, logarithm, logarithm10, ln, logarithme, exception, message, math, error, input, correctly]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,sum
58 , 65
------------------------------------------------------------------------
	/**
	 * Simple operational methods													#******S*****#
	**/
	private String sum(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a+b);
	}

------------------------------------------------------------------------
 sum   
	   Simple  operational  methods 													  methods													 
	  a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[sum, simple, operational, methods, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,substract
66 , 70
------------------------------------------------------------------------
	private String substract(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a-b);
	}

------------------------------------------------------------------------
 substract   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[substract, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,multiply
71 , 75
------------------------------------------------------------------------
	private String multiply(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a*b);
	}

------------------------------------------------------------------------
 multiply   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[multiply, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,divide
76 , 86
------------------------------------------------------------------------
	private String divide(String operand1, String operand2){
		String r="0";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(b!=0){
			r= ""+(a/b);
		}else{
			new Message("Cannot divide by Zero!", 420);
		}
		return r;
	}

------------------------------------------------------------------------
 divide   String r 0 a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 b 0 r a b Message Cannot divide by Zero 420 r 
------------------------------------------------------------------------
[divide, string, double, parse, parsedouble, operand, operand1, operand2, message]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,power
87 , 91
------------------------------------------------------------------------
	private String power(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+Math.pow(a, b);
	}

------------------------------------------------------------------------
 power   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 Math pow a b 
------------------------------------------------------------------------
[power, double, parse, parsedouble, operand, operand1, operand2, math, pow]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,sqrt
92 , 101
------------------------------------------------------------------------
	private String sqrt(String operand){
		String r="";
		double a=Double.parseDouble(operand);
		if(a>=0){
			r = ""+Math.sqrt(a);
		}else{
			new Message("There is no square-root of \nnegative number!", 420);
		}
		return r;
	}

------------------------------------------------------------------------
 sqrt   String r a Double parse Double  parseDouble operand a 0 r Math sqrt a Message There is no square root of nnegative number 420 r 
------------------------------------------------------------------------
[sqrt, string, double, parse, parsedouble, operand, math, message, square, root, nnegative, number]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,nPr
103 , 116
------------------------------------------------------------------------
	/**
	 * complex operational methods											#******C******#
	**/
	private String nPr(String operand1, String operand2){
		String r="";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(a<0 || b<0 || a<b){
			new Message("In valid input. \nhere- a<0 || b<0 || a<b", 420);
		}else{
			r = divide( factorial(operand1), factorial( substract(operand1, operand2) ) );
		}
		return r;
	}

------------------------------------------------------------------------
 n Pr  nPr   
	   complex  operational  methods 											  methods											 
	  String r a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a 0 b 0 a b Message In valid input nhere a 0 b 0 a b 420 r divide factorial operand 1  operand1 factorial substract operand 1  operand1 operand 2  operand2 r 
------------------------------------------------------------------------
[pr, npr, complex, operational, methods, string, double, parse, parsedouble, operand, operand1, operand2, message, valid, input, nhere, divide, factorial, substract]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,nCr
117 , 127
------------------------------------------------------------------------
	private String nCr(String operand1, String operand2){
		String r="";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(a<0 || b<0 || a<b){
			new Message("In valid input. \nhere- a<0 || b<0 || a<b", 420);
		}else{
			r = divide(factorial(operand1), multiply( (factorial( substract(operand1, operand2) )), factorial(operand2) ));
		}
		return r;
	}

------------------------------------------------------------------------
 n Cr  nCr   String r a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a 0 b 0 a b Message In valid input nhere a 0 b 0 a b 420 r divide factorial operand 1  operand1 multiply factorial substract operand 1  operand1 operand 2  operand2 factorial operand 2  operand2 r 
------------------------------------------------------------------------
[cr, ncr, string, double, parse, parsedouble, operand, operand1, operand2, message, valid, input, nhere, divide, factorial, multiply, substract]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,modulus
128 , 132
------------------------------------------------------------------------
	private String modulus(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a%b);
	}

------------------------------------------------------------------------
 modulus   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[modulus, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,sqre
133 , 136
------------------------------------------------------------------------
	private String sqre(String operand){
		double a=Double.parseDouble(operand);
		return ""+ a*a;
	}

------------------------------------------------------------------------
 sqre   a Double parse Double  parseDouble operand a a 
------------------------------------------------------------------------
[sqre, double, parse, parsedouble, operand]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,cube
137 , 140
------------------------------------------------------------------------
	private String cube(String operand){
		double a=Double.parseDouble(operand);
		return ""+ a*a*a;
	}

------------------------------------------------------------------------
 cube   a Double parse Double  parseDouble operand a a a 
------------------------------------------------------------------------
[cube, double, parse, parsedouble, operand]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,cbrt
141 , 144
------------------------------------------------------------------------
	private String cbrt(String operand){
		double a=Double.parseDouble(operand);
		return ""+Math.cbrt(a);
	}

------------------------------------------------------------------------
 cbrt   a Double parse Double  parseDouble operand Math cbrt a 
------------------------------------------------------------------------
[cbrt, double, parse, parsedouble, operand, math]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,factorial
145 , 152
------------------------------------------------------------------------
	private String factorial(String operand){
		long i=1;
		double a=Double.parseDouble(operand);
		for(long j=1; j<=a; j++){
			i *= j;
		}
		return ""+i;
	}

------------------------------------------------------------------------
 factorial   i 1 a Double parse Double  parseDouble operand j 1 j a j i j i 
------------------------------------------------------------------------
[factorial, double, parse, parsedouble, operand]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,sine
153 , 158
------------------------------------------------------------------------
	//																		*************
	private String sine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.sin((a * Math.PI)/180);
		return r;
	}

------------------------------------------------------------------------
 sine  																		   a Double parse Double  parseDouble operand String r Math sin a Math PI 180 r 
------------------------------------------------------------------------
[sine, double, parse, parsedouble, operand, string, math, sin, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,asine
159 , 163
------------------------------------------------------------------------
	private String asine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + (Math.asin(a)*180)/Math.PI;
		return r;
	}

------------------------------------------------------------------------
 asine   a Double parse Double  parseDouble operand String r Math asin a 180 Math PI r 
------------------------------------------------------------------------
[asine, double, parse, parsedouble, operand, string, math, asin, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,cosine
164 , 168
------------------------------------------------------------------------
	private String cosine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.cos((a * Math.PI)/180);
		return r;
	}

------------------------------------------------------------------------
 cosine   a Double parse Double  parseDouble operand String r Math cos a Math PI 180 r 
------------------------------------------------------------------------
[cosine, double, parse, parsedouble, operand, string, math, cos, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,acosine
169 , 173
------------------------------------------------------------------------
	private String acosine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + (Math.acos(a)*180)/Math.PI;
		return r;
	}

------------------------------------------------------------------------
 acosine   a Double parse Double  parseDouble operand String r Math acos a 180 Math PI r 
------------------------------------------------------------------------
[acosine, double, parse, parsedouble, operand, string, math, acos, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,tangent
174 , 178
------------------------------------------------------------------------
	private String tangent(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.tan((a * Math.PI)/180);
		return r;
	}

------------------------------------------------------------------------
 tangent   a Double parse Double  parseDouble operand String r Math tan a Math PI 180 r 
------------------------------------------------------------------------
[tangent, double, parse, parsedouble, operand, string, math, tan, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,atangent
179 , 183
------------------------------------------------------------------------
	private String atangent(String operand){
		 double a=Double.parseDouble(operand);
		 String r="" + (Math.atan(a)*180)/Math.PI;
		return r;
	}

------------------------------------------------------------------------
 atangent   a Double parse Double  parseDouble operand String r Math atan a 180 Math PI r 
------------------------------------------------------------------------
[atangent, double, parse, parsedouble, operand, string, math, atan, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,sineH
184 , 188
------------------------------------------------------------------------
	private String sineH(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.sinh((a * Math.PI)/180);
		return r;
	}

------------------------------------------------------------------------
 sine H  sineH   a Double parse Double  parseDouble operand String r Math sinh a Math PI 180 r 
------------------------------------------------------------------------
[sine, sineh, double, parse, parsedouble, operand, string, math, sinh, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,cosineH
189 , 193
------------------------------------------------------------------------
	private String cosineH(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.cosh((a * Math.PI)/180);
		return r;
	}

------------------------------------------------------------------------
 cosine H  cosineH   a Double parse Double  parseDouble operand String r Math cosh a Math PI 180 r 
------------------------------------------------------------------------
[cosine, cosineh, double, parse, parsedouble, operand, string, math, cosh, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,tangentH
194 , 198
------------------------------------------------------------------------
	private String tangentH(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.tanh((a * Math.PI)/180);
		return r;
	}

------------------------------------------------------------------------
 tangent H  tangentH   a Double parse Double  parseDouble operand String r Math tanh a Math PI 180 r 
------------------------------------------------------------------------
[tangent, tangenth, double, parse, parsedouble, operand, string, math, tanh, pi]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,logarithm10
199 , 204
------------------------------------------------------------------------
	//																			***
	private String logarithm10(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.log10(a);
		return r;
	}

------------------------------------------------------------------------
 logarithm 10  logarithm10  																			   a Double parse Double  parseDouble operand String r Math log 10  log10 a r 
------------------------------------------------------------------------
[logarithm, logarithm10, double, parse, parsedouble, operand, string, math, log, log10]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,logarithmE
205 , 209
------------------------------------------------------------------------
	private String logarithmE(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.log(a);
		return r;
	}

------------------------------------------------------------------------
 logarithm E  logarithmE   a Double parse Double  parseDouble operand String r Math log a r 
------------------------------------------------------------------------
[logarithm, logarithme, double, parse, parsedouble, operand, string, math, log]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,AdvancedCalculatorOperation
10 , 13
------------------------------------------------------------------------
	//constructor
	public AdvancedCalculatorOperation() {
		super();
	}

------------------------------------------------------------------------
 Advanced Calculator Operation  AdvancedCalculatorOperation  constructor   
------------------------------------------------------------------------
[advanced, calculator, operation, advancedcalculatoroperation, constructor]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperation.java,AdvancedCalculatorOperation
9 , 216
------------------------------------------------------------------------
public class AdvancedCalculatorOperation {
	//constructor
	public AdvancedCalculatorOperation() {
		super();
	}
	/**
	 * Interfacing method															#****IM****#
	**/
	public String operation(String operand1, String operand2, String operator){
		try{
			if(operator.equals("+")) return sum(operand1, operand2);
			else if(operator.equals("-")) return substract(operand1, operand2);
			else if(operator.equals("x")) return multiply(operand1, operand2);
			else if(operator.equals("/")) return divide(operand1, operand2);
			else if(operator.equals("^")) return power(operand1, operand2);
			else if(operator.equals("C")) return nCr(operand1, operand2);
			else if(operator.equals("P")) return nPr(operand1, operand2);
			else if(operator.equals("mod")) return modulus(operand1, operand2);
			else return "";
		}catch(Exception e){
			new Message("Math Error! \nOr, invalid input! \nPlease input correctly.", 420);
			return "";
		}
	}
	public String operation(String operand, String operator){
		try{
			if(operator.equals("sqrt")) return sqrt(operand);
			else if(operator.equals("cbrt")) return cbrt(operand);
			else if(operator.equals("fact")) return factorial(operand);
			else if(operator.equals("sqre")) return sqre(operand);
			else if(operator.equals("cube")) return cube(operand);
			else if(operator.equals("sin")) return sine(operand);
			else if(operator.equals("asin")) return asine(operand);
			else if(operator.equals("sinh")) return sineH(operand);
			else if(operator.equals("cos")) return cosine(operand);
			else if(operator.equals("acos")) return acosine(operand);
			else if(operator.equals("cosh")) return cosineH(operand);
			else if(operator.equals("tan")) return tangent(operand);
			else if(operator.equals("atan")) return atangent(operand);
			else if(operator.equals("tanh")) return tangentH(operand);
			else if(operator.equals("log")) return logarithm10(operand);
			else if(operator.equals("ln")) return logarithmE(operand);
			else return "";
		}catch(Exception e){
			new Message("Math Error! \n   Input correctly.", 420);
			return "";
		}
	}
	//End of Interfacing method														#_____IM_____#
	/**
	 * Simple operational methods													#******S*****#
	**/
	private String sum(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a+b);
	}
	private String substract(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a-b);
	}
	private String multiply(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a*b);
	}
	private String divide(String operand1, String operand2){
		String r="0";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(b!=0){
			r= ""+(a/b);
		}else{
			new Message("Cannot divide by Zero!", 420);
		}
		return r;
	}
	private String power(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+Math.pow(a, b);
	}
	private String sqrt(String operand){
		String r="";
		double a=Double.parseDouble(operand);
		if(a>=0){
			r = ""+Math.sqrt(a);
		}else{
			new Message("There is no square-root of \nnegative number!", 420);
		}
		return r;
	}
	//End of Simple operational methods 									#______S______#
	/**
	 * complex operational methods											#******C******#
	**/
	private String nPr(String operand1, String operand2){
		String r="";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(a<0 || b<0 || a<b){
			new Message("In valid input. \nhere- a<0 || b<0 || a<b", 420);
		}else{
			r = divide( factorial(operand1), factorial( substract(operand1, operand2) ) );
		}
		return r;
	}
	private String nCr(String operand1, String operand2){
		String r="";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(a<0 || b<0 || a<b){
			new Message("In valid input. \nhere- a<0 || b<0 || a<b", 420);
		}else{
			r = divide(factorial(operand1), multiply( (factorial( substract(operand1, operand2) )), factorial(operand2) ));
		}
		return r;
	}
	private String modulus(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a%b);
	}
	private String sqre(String operand){
		double a=Double.parseDouble(operand);
		return ""+ a*a;
	}
	private String cube(String operand){
		double a=Double.parseDouble(operand);
		return ""+ a*a*a;
	}
	private String cbrt(String operand){
		double a=Double.parseDouble(operand);
		return ""+Math.cbrt(a);
	}
	private String factorial(String operand){
		long i=1;
		double a=Double.parseDouble(operand);
		for(long j=1; j<=a; j++){
			i *= j;
		}
		return ""+i;
	}
	//																		*************
	private String sine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.sin((a * Math.PI)/180);
		return r;
	}
	private String asine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + (Math.asin(a)*180)/Math.PI;
		return r;
	}
	private String cosine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.cos((a * Math.PI)/180);
		return r;
	}
	private String acosine(String operand){
		double a=Double.parseDouble(operand);
		String r="" + (Math.acos(a)*180)/Math.PI;
		return r;
	}
	private String tangent(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.tan((a * Math.PI)/180);
		return r;
	}
	private String atangent(String operand){
		 double a=Double.parseDouble(operand);
		 String r="" + (Math.atan(a)*180)/Math.PI;
		return r;
	}
	private String sineH(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.sinh((a * Math.PI)/180);
		return r;
	}
	private String cosineH(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.cosh((a * Math.PI)/180);
		return r;
	}
	private String tangentH(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.tanh((a * Math.PI)/180);
		return r;
	}
	//																			***
	private String logarithm10(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.log10(a);
		return r;
	}
	private String logarithmE(String operand){
		double a=Double.parseDouble(operand);
		String r="" + Math.log(a);
		return r;
	}
	//End of complex operational methods										#_______C_______#
	/*///test main method
	public static void main(String[] args) {
		System.out.println(new AdvancedCalculatorOperation().asine("30"));
	}
	/**/
}

------------------------------------------------------------------------
 Advanced Calculator Operation  AdvancedCalculatorOperation   
------------------------------------------------------------------------
[advanced, calculator, operation, advancedcalculatoroperation]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperationsExecutor.java,infixEvaluation
9 , 123
------------------------------------------------------------------------
	public String infixEvaluation(String string){
		//necessary object
		AdvancedCalculatorOperation aCOperation= new AdvancedCalculatorOperation();
		String result="";	//the main result
		//Finding number of spaces in a string
		int numberOfElements=charNumber(string, ' ');
		try{				//may occur math error
			//initializing attributes of the element
			Element[] element=new Element[numberOfElements+1];	//element array
			int charFrom=0, charTo=0;
			for(int i=0; i<numberOfElements; i++){
				String s="";     //string property
			    boolean o=false;      //operator-true, operand-false
			    //cutting sub strings
			    int j=charFrom;
			    while(string.charAt(j)!=' '){
			    	j++;
			    }
			    charTo=j;
			    s=string.substring(charFrom, charTo);
			    charFrom=charTo+1;
			    if(s.equals("+") || s.equals("-") || s.equals("x") || s.equals("/") || s.equals("^") ||	//when an operator is found
		    		 s.equals("sqrt") || s.equals("(") || s.equals(")") || s.equals("P") || s.equals("C") || s.equals("mod") ||
		    		 s.equals("log") || s.equals("ln") || s.equals("fact") || s.equals("sin") || s.equals("sinh") || 
		    		 s.equals("asin") || s.equals("cbrt") || s.equals("cos") || s.equals("cosh") || s.equals("acos") ||
		    		 s.equals("cube") || s.equals("tan") || s.equals("tanh") || s.equals("atan") || s.equals("sqre")){ 
		            o=true;
		        }else{		//when operand
		            o=false;
		        }
			    element[i]=new Element(s, o);
			    /*///test print
			    System.out.println(s+" "+o);
			    /**/
			}
			element[numberOfElements]=new Element(")", true);
			//Stack 
			Stack<String> operand=new Stack<>();    //postfix form of the input
			Stack<String> operator=new Stack<>(); 	//temporarily stores operators
			operator.push("(");	//indicates the end
			/**
			 * Starts
			**/
			for(int i=0; !operator.empty(); i++){ //evaluation
		        if(!element[i].isOperator()){	//when operand is found
		            operand.push(element[i].getString());
		        }
		        else{
		            if(element[i].getString().equals("(")){
		                operator.push("(");
		            }
		            else if(element[i].getString().equals(")")){
		                while(operator.lastElement()!="("){
		                	if(operator.lastElement().equals("+") || operator.lastElement().equals("-") ||
		                			operator.lastElement().equals("x") ||operator.lastElement().equals("/") ||
		                			operator.lastElement().equals("P") ||operator.lastElement().equals("C") ||
		                			operator.lastElement().equals("^") || operator.lastElement().equals("mod")){
			                    String b = (String) operand.pop();   //taking first two elements of the stack
			                    String a = (String) operand.pop();
			                    String oprt = operator.pop();   //taking the top the operator of stack
			                    String r = aCOperation.operation(a, b, oprt);  //result after the operation of a & b
			                    operand.push(r);   //pushing the result in the operand stack
		                	}else{
		                		String a = (String) operand.pop();   //taking first element of the stack
			                    String oprt = operator.pop();   //taking the top the operator of stack
			                    String r = aCOperation.operation(a, oprt);  //result after the operation of a
			                    operand.push(r);   //pushing the result in the operand stack
		                	}
		                }
		                operator.pop();   //pops the "("
		            }
		            else{
		                int opertPrecedence = operatorPrecedence(element[i].getString());
		                while(operator.lastElement()!="("){
		                    int stackPrecedence = operatorPrecedence(operator.lastElement());
		                    if(stackPrecedence <= opertPrecedence){
		                    	break;
		                    }
		                    else{
		                    	if(operator.lastElement().equals("+") || operator.lastElement().equals("-") ||
			                			operator.lastElement().equals("x") ||operator.lastElement().equals("/") ||
			                			operator.lastElement().equals("P") ||operator.lastElement().equals("C") ||
			                			operator.lastElement().equals("^") || operator.lastElement().equals("mod")){
		                    		String b = (String) operand.pop();   //taking first two elements of the stack
		                    		String a = (String) operand.pop();
				                    String oprt = operator.pop();   //taking the top the operator of stack
				                    String r = aCOperation.operation(a, b, oprt);  //result after the operation of a & b
				                    operand.push(r);   //pushing the result in the operand stack
			                	}else{
			                		String a = (String) operand.pop();   //taking first element of the stack
				                    String oprt = operator.pop();   //taking the top the operator of stack
				                    String r = aCOperation.operation(a, oprt);  //result after the operation of a
				                    operand.push(r);   //pushing the result in the operand stack
			                	}
		                    }
		                }
		                operator.push(element[i].getString());
		            }
		        }
		        if(i>element.length) {
		            new Message("Math error!", 420);
		            break;
		        }
		    }
			//Ends
			result=(String) operand.pop();
			if(!operator.isEmpty() || !operand.isEmpty()){
				result="";
				new Message("Wrong input!", 420);
			}
		}catch(Exception e){
			new Message("Math Error!\n   Invalid input!", 420);
		}
		return result;
	}

------------------------------------------------------------------------
 infix Evaluation  infixEvaluation   object   main  result  Finding  number   spaces    string   occur  math  error  initializing  attributes    element  Stack  element  array  test  print 
			  print
			  System println  
			   string  property  operator true  operand false  cutting   strings    operator   found   operand  postfix  form    input  temporarily  stores  operators    end  evaluation  evaluation  evaluation   operand   found  taking    elements    stack  taking   top   operator   stack  result    operation      pushing   result    operand  stack  taking   element    stack  taking   top   operator   stack  result    operation    pushing   result    operand  stack  pops    taking    elements    stack  taking   top   operator   stack  result    operation      pushing   result    operand  stack  taking   element    stack  taking   top   operator   stack  result    operation    pushing   result    operand  stack  Ends   
			   Starts 
			  Starts
			  Advanced Calculator Operation  AdvancedCalculatorOperation a C Operation  aCOperation Advanced Calculator Operation  AdvancedCalculatorOperation String result number Of Elements  numberOfElements char Number  charNumber string Element element Element number Of Elements  numberOfElements 1 char From  charFrom 0 char To  charTo 0 i 0 i number Of Elements  numberOfElements i String s o j char From  charFrom string char At  charAt j j char To  charTo j s string substring char From  charFrom char To  charTo char From  charFrom char To  charTo 1 s equals s equals s equals x s equals s equals s equals sqrt s equals s equals s equals P s equals C s equals mod s equals log s equals ln s equals fact s equals sin s equals sinh s equals asin s equals cbrt s equals cos s equals cosh s equals acos s equals cube s equals tan s equals tanh s equals atan s equals sqre o o element i Element s o element number Of Elements  numberOfElements Element Stack String operand Stack Stack String operator Stack operator push Starts i 0 operator empty i element i is Operator  isOperator operand push element i get String  getString element i get String  getString equals operator push element i get String  getString equals operator last Element  lastElement operator last Element  lastElement equals operator last Element  lastElement equals operator last Element  lastElement equals x operator last Element  lastElement equals operator last Element  lastElement equals P operator last Element  lastElement equals C operator last Element  lastElement equals operator last Element  lastElement equals mod String b String operand pop String a String operand pop String oprt operator pop String r a C Operation  aCOperation operation a b oprt operand push r String a String operand pop String oprt operator pop String r a C Operation  aCOperation operation a oprt operand push r operator pop opert Precedence  opertPrecedence operator Precedence  operatorPrecedence element i get String  getString operator last Element  lastElement stack Precedence  stackPrecedence operator Precedence  operatorPrecedence operator last Element  lastElement stack Precedence  stackPrecedence opert Precedence  opertPrecedence operator last Element  lastElement equals operator last Element  lastElement equals operator last Element  lastElement equals x operator last Element  lastElement equals operator last Element  lastElement equals P operator last Element  lastElement equals C operator last Element  lastElement equals operator last Element  lastElement equals mod String b String operand pop String a String operand pop String oprt operator pop String r a C Operation  aCOperation operation a b oprt operand push r String a String operand pop String oprt operator pop String r a C Operation  aCOperation operation a oprt operand push r operator push element i get String  getString i element length Message Math error 420 result String operand pop operator is Empty  isEmpty operand is Empty  isEmpty result Message Wrong input 420 Exception e Message Math Error n Invalid input 420 result 
------------------------------------------------------------------------
[infix, evaluation, infixevaluation, object, main, result, finding, number, spaces, string, occur, math, error, initializing, attributes, element, stack, array, test, print, system, println, property, operator, true, operand, false, cutting, strings, found, postfix, form, input, temporarily, stores, operators, end, taking, elements, top, operation, pushing, pops, ends, starts, advanced, calculator, advancedcalculatoroperation, acoperation, numberofelements, char, charnumber, charfrom, charto, charat, substring, equals, sqrt, mod, log, ln, fact, sin, sinh, asin, cbrt, cos, cosh, acos, cube, tan, tanh, atan, sqre, push, empty, isoperator, getstring, lastelement, pop, oprt, opert, precedence, opertprecedence, operatorprecedence, stackprecedence, length, message, isempty, wrong, exception, invalid]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperationsExecutor.java,charNumber
124 , 132
------------------------------------------------------------------------
	//returns specific number of a char in a string
	private int charNumber(String string, char ch){
		int num=0;
		int length=string.length();
		for(int i=0; i<length; i++){
			if(string.charAt(i)==ch) num++;
		}
		return num;
	}

------------------------------------------------------------------------
 char Number  charNumber  returns  specific  number    char    string   num 0 length string length i 0 i length i string char At  charAt i ch num num 
------------------------------------------------------------------------
[char, number, charnumber, returns, specific, string, num, length, charat, ch]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperationsExecutor.java,operatorPrecedence
133 , 146
------------------------------------------------------------------------
	//returns number depending on the operators
	private int operatorPrecedence(String str){
		int i=0;
		if(str.equals("+")) i=1;
		else if(str.equals("-")) i=2;
		else if(str.equals("x")) i=3;
		else if(str.equals("/")) i=4;
		else if(str.equals("mod")) i=5;		
		else if(str.equals("^")) i=6;
		else if(str.equals("!")) i=7;
		else if(str.equals("P") || str.equals("C")) i=8;
		else i=9;
		return i;
	}

------------------------------------------------------------------------
 operator Precedence  operatorPrecedence  returns  number  depending    operators   i 0 str equals i 1 str equals i 2 str equals x i 3 str equals i 4 str equals mod i 5 str equals i 6 str equals i 7 str equals P str equals C i 8 i 9 i 
------------------------------------------------------------------------
[operator, precedence, operatorprecedence, returns, number, depending, operators, str, equals, mod]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/AdvancedCalculatorOperationsExecutor.java,AdvancedCalculatorOperationsExecutor
8 , 152
------------------------------------------------------------------------
public class AdvancedCalculatorOperationsExecutor {
	public String infixEvaluation(String string){
		//necessary object
		AdvancedCalculatorOperation aCOperation= new AdvancedCalculatorOperation();
		String result="";	//the main result
		//Finding number of spaces in a string
		int numberOfElements=charNumber(string, ' ');
		try{				//may occur math error
			//initializing attributes of the element
			Element[] element=new Element[numberOfElements+1];	//element array
			int charFrom=0, charTo=0;
			for(int i=0; i<numberOfElements; i++){
				String s="";     //string property
			    boolean o=false;      //operator-true, operand-false
			    //cutting sub strings
			    int j=charFrom;
			    while(string.charAt(j)!=' '){
			    	j++;
			    }
			    charTo=j;
			    s=string.substring(charFrom, charTo);
			    charFrom=charTo+1;
			    if(s.equals("+") || s.equals("-") || s.equals("x") || s.equals("/") || s.equals("^") ||	//when an operator is found
		    		 s.equals("sqrt") || s.equals("(") || s.equals(")") || s.equals("P") || s.equals("C") || s.equals("mod") ||
		    		 s.equals("log") || s.equals("ln") || s.equals("fact") || s.equals("sin") || s.equals("sinh") || 
		    		 s.equals("asin") || s.equals("cbrt") || s.equals("cos") || s.equals("cosh") || s.equals("acos") ||
		    		 s.equals("cube") || s.equals("tan") || s.equals("tanh") || s.equals("atan") || s.equals("sqre")){ 
		            o=true;
		        }else{		//when operand
		            o=false;
		        }
			    element[i]=new Element(s, o);
			    /*///test print
			    System.out.println(s+" "+o);
			    /**/
			}
			element[numberOfElements]=new Element(")", true);
			//Stack 
			Stack<String> operand=new Stack<>();    //postfix form of the input
			Stack<String> operator=new Stack<>(); 	//temporarily stores operators
			operator.push("(");	//indicates the end
			/**
			 * Starts
			**/
			for(int i=0; !operator.empty(); i++){ //evaluation
		        if(!element[i].isOperator()){	//when operand is found
		            operand.push(element[i].getString());
		        }
		        else{
		            if(element[i].getString().equals("(")){
		                operator.push("(");
		            }
		            else if(element[i].getString().equals(")")){
		                while(operator.lastElement()!="("){
		                	if(operator.lastElement().equals("+") || operator.lastElement().equals("-") ||
		                			operator.lastElement().equals("x") ||operator.lastElement().equals("/") ||
		                			operator.lastElement().equals("P") ||operator.lastElement().equals("C") ||
		                			operator.lastElement().equals("^") || operator.lastElement().equals("mod")){
			                    String b = (String) operand.pop();   //taking first two elements of the stack
			                    String a = (String) operand.pop();
			                    String oprt = operator.pop();   //taking the top the operator of stack
			                    String r = aCOperation.operation(a, b, oprt);  //result after the operation of a & b
			                    operand.push(r);   //pushing the result in the operand stack
		                	}else{
		                		String a = (String) operand.pop();   //taking first element of the stack
			                    String oprt = operator.pop();   //taking the top the operator of stack
			                    String r = aCOperation.operation(a, oprt);  //result after the operation of a
			                    operand.push(r);   //pushing the result in the operand stack
		                	}
		                }
		                operator.pop();   //pops the "("
		            }
		            else{
		                int opertPrecedence = operatorPrecedence(element[i].getString());
		                while(operator.lastElement()!="("){
		                    int stackPrecedence = operatorPrecedence(operator.lastElement());
		                    if(stackPrecedence <= opertPrecedence){
		                    	break;
		                    }
		                    else{
		                    	if(operator.lastElement().equals("+") || operator.lastElement().equals("-") ||
			                			operator.lastElement().equals("x") ||operator.lastElement().equals("/") ||
			                			operator.lastElement().equals("P") ||operator.lastElement().equals("C") ||
			                			operator.lastElement().equals("^") || operator.lastElement().equals("mod")){
		                    		String b = (String) operand.pop();   //taking first two elements of the stack
		                    		String a = (String) operand.pop();
				                    String oprt = operator.pop();   //taking the top the operator of stack
				                    String r = aCOperation.operation(a, b, oprt);  //result after the operation of a & b
				                    operand.push(r);   //pushing the result in the operand stack
			                	}else{
			                		String a = (String) operand.pop();   //taking first element of the stack
				                    String oprt = operator.pop();   //taking the top the operator of stack
				                    String r = aCOperation.operation(a, oprt);  //result after the operation of a
				                    operand.push(r);   //pushing the result in the operand stack
			                	}
		                    }
		                }
		                operator.push(element[i].getString());
		            }
		        }
		        if(i>element.length) {
		            new Message("Math error!", 420);
		            break;
		        }
		    }
			//Ends
			result=(String) operand.pop();
			if(!operator.isEmpty() || !operand.isEmpty()){
				result="";
				new Message("Wrong input!", 420);
			}
		}catch(Exception e){
			new Message("Math Error!\n   Invalid input!", 420);
		}
		return result;
	}
	//returns specific number of a char in a string
	private int charNumber(String string, char ch){
		int num=0;
		int length=string.length();
		for(int i=0; i<length; i++){
			if(string.charAt(i)==ch) num++;
		}
		return num;
	}
	//returns number depending on the operators
	private int operatorPrecedence(String str){
		int i=0;
		if(str.equals("+")) i=1;
		else if(str.equals("-")) i=2;
		else if(str.equals("x")) i=3;
		else if(str.equals("/")) i=4;
		else if(str.equals("mod")) i=5;		
		else if(str.equals("^")) i=6;
		else if(str.equals("!")) i=7;
		else if(str.equals("P") || str.equals("C")) i=8;
		else i=9;
		return i;
	}
	/*///test main method
	public static void main(String[] args) {
		System.out.println(new AdvancedCalculatorOperationsExecutor().infixEvaluation("1.099 + 223 - 12 x 2 "));
	}
	/**/
}

------------------------------------------------------------------------
 Advanced Calculator Operations Executor  AdvancedCalculatorOperationsExecutor   
------------------------------------------------------------------------
[advanced, calculator, operations, executor, advancedcalculatoroperationsexecutor]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java,getString
12 , 14
------------------------------------------------------------------------
	public String getString() {
		return string;
	}

------------------------------------------------------------------------
 get String  getString   string 
------------------------------------------------------------------------
[string, getstring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java,setString
15 , 17
------------------------------------------------------------------------
	public void setString(String string) {
		this.string = string;
	}

------------------------------------------------------------------------
 set String  setString   string string 
------------------------------------------------------------------------
[set, string, setstring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java,isOperator
18 , 20
------------------------------------------------------------------------
	public boolean isOperator() {
		return operator;
	}

------------------------------------------------------------------------
 is Operator  isOperator   operator 
------------------------------------------------------------------------
[operator, isoperator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java,setOperator
21 , 23
------------------------------------------------------------------------
	public void setOperator(boolean operator) {
		this.operator = operator;
	}

------------------------------------------------------------------------
 set Operator  setOperator   operator operator 
------------------------------------------------------------------------
[set, operator, setoperator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java,Element
8 , 11
------------------------------------------------------------------------
    public Element(String string, boolean operator){
    	setString(string);
    	setOperator(operator);
    }

------------------------------------------------------------------------
 Element   set String  setString string set Operator  setOperator operator 
------------------------------------------------------------------------
[element, set, string, setstring, operator, setoperator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/advancedCalculator/Element.java,Element
5 , 24
------------------------------------------------------------------------
public class Element {
	private String string;     //string property
    private boolean operator;      //operator-true, operand-false
    public Element(String string, boolean operator){
    	setString(string);
    	setOperator(operator);
    }
	public String getString() {
		return string;
	}
	public void setString(String string) {
		this.string = string;
	}
	public boolean isOperator() {
		return operator;
	}
	public void setOperator(boolean operator) {
		this.operator = operator;
	}
}

------------------------------------------------------------------------
 Element  string  property  operator true  operand false   String string operator 
------------------------------------------------------------------------
[element, string, property, operator, true, operand, false]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,initialComponent
56 , 304
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		baseCalcGui = new BaseCalculatorGui();
		//operation object
		bcOperation = new BaseCalculatorOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"BaseCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jTButtonBase = baseCalcGui.jTButtonBase;
		jButtonNumerical = baseCalcGui.jButtonNumerical;			//10 buttons(0-9)
		jButtonPoint = baseCalcGui.jButtonPoint;					//point(.)
		jButtonAlphaNumerical = baseCalcGui.jButtonAlphaNumerical;	//A-F
		jButtonOperator = baseCalcGui.jButtonOperator;				//+, -, *, /, SQRT(), =
		jButtonMemory = baseCalcGui.jButtonMemory;					//M, MS
		jButtonClear = baseCalcGui.jButtonClear; 					//AC, C, back space
		jLabelDisplay = baseCalcGui.jLabelDisplay;					//operation, result
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		//toggle buttons base
		for(int i=0; i<4; i++){
			jTButtonBase[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jTButtonBaseActionPerformed(evt);
	            }
	        });
		}
		jTButtonBase[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.CTRL_MASK), "BIN_pressed");
		jTButtonBase[0].getActionMap().put("BIN_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		jTButtonBase[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK), "OCT_pressed");
		jTButtonBase[1].getActionMap().put("OCT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		jTButtonBase[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.CTRL_MASK), "DEC_pressed");
		jTButtonBase[2].getActionMap().put("DEC_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		jTButtonBase[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_H, InputEvent.CTRL_MASK), "HEX_pressed");
		jTButtonBase[3].getActionMap().put("HEX_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
			jButtonNumerical[i].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
				put(KeyStroke.getKeyStroke(48+i, 0), i+"_pressed");
			jButtonNumerical[i].getActionMap().put(i+"_pressed", new AbstractAction() {
				public void actionPerformed(ActionEvent evt) {
					jButtonNumericalActionPerformed(evt);
				}
			});
		}
		//Point
		//disabled
		jButtonPoint.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
        });
		//Alpha Numerical Buttons
		for(int i=0; i<6; i++){
			jButtonAlphaNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
		}
		jButtonAlphaNumerical[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.SHIFT_MASK), "A_pressed");
		jButtonAlphaNumerical[0].getActionMap().put("A_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.SHIFT_MASK), "B_pressed");
		jButtonAlphaNumerical[1].getActionMap().put("B_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.SHIFT_MASK), "C_pressed");
		jButtonAlphaNumerical[2].getActionMap().put("C_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.SHIFT_MASK), "D_pressed");
		jButtonAlphaNumerical[3].getActionMap().put("D_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.SHIFT_MASK), "E_pressed");
		jButtonAlphaNumerical[4].getActionMap().put("E_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[5].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.SHIFT_MASK), "F_pressed");
		jButtonAlphaNumerical[5].getActionMap().put("F_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		//Operator Buttons
		for(int i=0; i<5; i++){
			jButtonOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperatorActionPerformed(evt);
	            }
	        });
		}
		jButtonOperator[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, InputEvent.SHIFT_MASK), "PLUS_pressed");
		jButtonOperator[0].getActionMap().put("PLUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,0), "MINUS_pressed");
		jButtonOperator[1].getActionMap().put("MINUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_8, InputEvent.SHIFT_MASK), "MULT_pressed");
		jButtonOperator[2].getActionMap().put("MULT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,0), "DIVD_pressed");
		jButtonOperator[3].getActionMap().put("DIVD_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,0), "EQL_pressed");
		jButtonOperator[4].getActionMap().put("EQL_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonMemoryActionPerformed(evt);
	            }
	        });
		}
		jButtonMemory[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_M,0), "MEM_pressed");
		jButtonMemory[0].getActionMap().put("MEM_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		jButtonMemory[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "STO_pressed");
		jButtonMemory[1].getActionMap().put("STO_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonClearActionPerformed(evt);
	            }
	        });
		}
		jButtonClear[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C,0), "CLR_pressed");
		jButtonClear[0].getActionMap().put("CLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0), "ACLR_pressed");
		jButtonClear[1].getActionMap().put("ACLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), "BSPACE_pressed");
		jButtonClear[2].getActionMap().put("BSPACE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		/*Some extra settings*/
		jTButtonBase[2].setSelected(true);
		base=3;
		for(int i=0; i<6; i++){
			jButtonAlphaNumerical[i].setEnabled(false);
		}
		//end
		//**Setting Criterion of the Frame**//
		super.gui.add(baseCalcGui);
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Base Calculator");
		super.gui.setResizable(false);
		super.gui.setBounds(230, 115, 327, 450);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			  End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA   Point  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  end  GUI  Initialization  operation  object  instruction   10  buttons  point       SQRT    MS  AC   back  space  operation  result  toggle  buttons  base  Numeric  Buttons  disabled  Alpha  Numerical  Buttons  Operator  Buttons  Memory  Buttons  Clear  Buttons   extra  settings  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  base Calc Gui  baseCalcGui Base Calculator Gui  BaseCalculatorGui bc Operation  bcOperation Base Calculator Operation  BaseCalculatorOperation instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Base Calculator Instruction  BaseCalculatorInstruction txt Exception e instruction EMPTY j T Button Base  jTButtonBase base Calc Gui  baseCalcGui j T Button Base  jTButtonBase j Button Numerical  jButtonNumerical base Calc Gui  baseCalcGui j Button Numerical  jButtonNumerical j Button Point  jButtonPoint base Calc Gui  baseCalcGui j Button Point  jButtonPoint j Button Alpha Numerical  jButtonAlphaNumerical base Calc Gui  baseCalcGui j Button Alpha Numerical  jButtonAlphaNumerical j Button Operator  jButtonOperator base Calc Gui  baseCalcGui j Button Operator  jButtonOperator j Button Memory  jButtonMemory base Calc Gui  baseCalcGui j Button Memory  jButtonMemory j Button Clear  jButtonClear base Calc Gui  baseCalcGui j Button Clear  jButtonClear j Label Display  jLabelDisplay base Calc Gui  baseCalcGui j Label Display  jLabelDisplay i 0 i 4 i j T Button Base  jTButtonBase i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j T Button Base Action Performed  jTButtonBaseActionPerformed evt j T Button Base  jTButtonBase 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK B  VK_B Input Event  InputEvent CTRL MASK  CTRL_MASK BIN _pressed  BIN_pressed j T Button Base  jTButtonBase 0 get Action Map  getActionMap put BIN _pressed  BIN_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j T Button Base Action Performed  jTButtonBaseActionPerformed evt j T Button Base  jTButtonBase 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK O  VK_O Input Event  InputEvent CTRL MASK  CTRL_MASK OCT _pressed  OCT_pressed j T Button Base  jTButtonBase 1 get Action Map  getActionMap put OCT _pressed  OCT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j T Button Base Action Performed  jTButtonBaseActionPerformed evt j T Button Base  jTButtonBase 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK D  VK_D Input Event  InputEvent CTRL MASK  CTRL_MASK DEC _pressed  DEC_pressed j T Button Base  jTButtonBase 2 get Action Map  getActionMap put DEC _pressed  DEC_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j T Button Base Action Performed  jTButtonBaseActionPerformed evt j T Button Base  jTButtonBase 3 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK H  VK_H Input Event  InputEvent CTRL MASK  CTRL_MASK HEX _pressed  HEX_pressed j T Button Base  jTButtonBase 3 get Action Map  getActionMap put HEX _pressed  HEX_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j T Button Base Action Performed  jTButtonBaseActionPerformed evt i 0 i 10 i j Button Numerical  jButtonNumerical i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Numerical  jButtonNumerical i get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke 48 i 0 i _pressed j Button Numerical  jButtonNumerical i get Action Map  getActionMap put i _pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Point  jButtonPoint add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Alpha Numerical  jButtonAlphaNumerical 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK A  VK_A Input Event  InputEvent SHIFT MASK  SHIFT_MASK A _pressed  A_pressed j Button Alpha Numerical  jButtonAlphaNumerical 0 get Action Map  getActionMap put A _pressed  A_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Alpha Numerical  jButtonAlphaNumerical 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK B  VK_B Input Event  InputEvent SHIFT MASK  SHIFT_MASK B _pressed  B_pressed j Button Alpha Numerical  jButtonAlphaNumerical 1 get Action Map  getActionMap put B _pressed  B_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Alpha Numerical  jButtonAlphaNumerical 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK C  VK_C Input Event  InputEvent SHIFT MASK  SHIFT_MASK C _pressed  C_pressed j Button Alpha Numerical  jButtonAlphaNumerical 2 get Action Map  getActionMap put C _pressed  C_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Alpha Numerical  jButtonAlphaNumerical 3 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK D  VK_D Input Event  InputEvent SHIFT MASK  SHIFT_MASK D _pressed  D_pressed j Button Alpha Numerical  jButtonAlphaNumerical 3 get Action Map  getActionMap put D _pressed  D_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Alpha Numerical  jButtonAlphaNumerical 4 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK E  VK_E Input Event  InputEvent SHIFT MASK  SHIFT_MASK E _pressed  E_pressed j Button Alpha Numerical  jButtonAlphaNumerical 4 get Action Map  getActionMap put E _pressed  E_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Alpha Numerical  jButtonAlphaNumerical 5 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK F  VK_F Input Event  InputEvent SHIFT MASK  SHIFT_MASK F _pressed  F_pressed j Button Alpha Numerical  jButtonAlphaNumerical 5 get Action Map  getActionMap put F _pressed  F_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt i 0 i 5 i j Button Operator  jButtonOperator i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK EQUALS  VK_EQUALS Input Event  InputEvent SHIFT MASK  SHIFT_MASK PLUS _pressed  PLUS_pressed j Button Operator  jButtonOperator 0 get Action Map  getActionMap put PLUS _pressed  PLUS_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK MINUS  VK_MINUS 0 MINUS _pressed  MINUS_pressed j Button Operator  jButtonOperator 1 get Action Map  getActionMap put MINUS _pressed  MINUS_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _8  VK_8 Input Event  InputEvent SHIFT MASK  SHIFT_MASK MULT _pressed  MULT_pressed j Button Operator  jButtonOperator 2 get Action Map  getActionMap put MULT _pressed  MULT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 3 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK SLASH  VK_SLASH 0 DIVD _pressed  DIVD_pressed j Button Operator  jButtonOperator 3 get Action Map  getActionMap put DIVD _pressed  DIVD_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 4 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK EQUALS  VK_EQUALS 0 EQL _pressed  EQL_pressed j Button Operator  jButtonOperator 4 get Action Map  getActionMap put EQL _pressed  EQL_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt i 0 i 2 i j Button Memory  jButtonMemory i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt j Button Memory  jButtonMemory 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK M  VK_M 0 MEM _pressed  MEM_pressed j Button Memory  jButtonMemory 0 get Action Map  getActionMap put MEM _pressed  MEM_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt j Button Memory  jButtonMemory 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK S  VK_S 0 STO _pressed  STO_pressed j Button Memory  jButtonMemory 1 get Action Map  getActionMap put STO _pressed  STO_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt i 0 i 3 i j Button Clear  jButtonClear i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK C  VK_C 0 CLR _pressed  CLR_pressed j Button Clear  jButtonClear 0 get Action Map  getActionMap put CLR _pressed  CLR_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK A  VK_A 0 ACLR _pressed  ACLR_pressed j Button Clear  jButtonClear 1 get Action Map  getActionMap put ACLR _pressed  ACLR_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK BACK SPACE  VK_BACK_SPACE 0 BSPACE _pressed  BSPACE_pressed j Button Clear  jButtonClear 2 get Action Map  getActionMap put BSPACE _pressed  BSPACE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j T Button Base  jTButtonBase 2 set Selected  setSelected base 3 i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i set Enabled  setEnabled gui add base Calc Gui  baseCalcGui gui set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE gui set Title  setTitle Base Calculator gui set Resizable  setResizable gui set Bounds  setBounds 230 115 327 450 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, point, _______aa_______, gui, initialization, operation, object, instruction, buttons, sqrt, ms, ac, back, space, result, toggle, base, numeric, disabled, alpha, numerical, operator, memory, clear, extra, settings, setting, criterion, frame, method, initializing, variables, placing, specific, specifies, criteria, main, calc, basecalcgui, calculator, basecalculatorgui, bc, bcoperation, basecalculatoroperation, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, basecalculatorinstruction, txt, exception, empty, button, jtbuttonbase, jbuttonnumerical, jbuttonpoint, jbuttonalphanumerical, jbuttonoperator, jbuttonmemory, jbuttonclear, label, display, jlabeldisplay, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jtbuttonbaseactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, vk_b, inputevent, ctrl, mask, ctrl_mask, bin, _pressed, bin_pressed, getactionmap, abstract, abstractaction, vk_o, oct, oct_pressed, vk_d, dec, dec_pressed, vk_h, hex, hex_pressed, jbuttonnumericalactionperformed, vk_a, shift, shift_mask, a_pressed, b_pressed, vk_c, c_pressed, d_pressed, vk_e, e_pressed, vk_f, f_pressed, jbuttonoperatoractionperformed, equals, vk_equals, plus_pressed, minus, vk_minus, minus_pressed, _8, vk_8, mult, mult_pressed, slash, vk_slash, divd, divd_pressed, eql, eql_pressed, jbuttonmemoryactionperformed, vk_m, mem, mem_pressed, vk_s, sto, sto_pressed, jbuttonclearactionperformed, clr, clr_pressed, aclr, aclr_pressed, vk_back_space, bspace, bspace_pressed, set, selected, setselected, enabled, setenabled, default, close, setdefaultcloseoperation, javax, swing, constants, windowconstants, exit, exit_on_close, title, settitle, resizable, setresizable, bounds, setbounds]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,jTButtonBaseActionPerformed
308 , 363
------------------------------------------------------------------------
	//Base Buttons
	private void jTButtonBaseActionPerformed(ActionEvent evt){
		for(int i=0; i<4; i++){
			jTButtonBase[i].setSelected(false);
		}
		jLabelDisplay[0].setText("");
		number="";
		operand1="";
		operand2="";
		operator="";
		memory="";
		if(evt.getActionCommand()=="Bin" || evt.getActionCommand().equals("")){
			jTButtonBase[0].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 1, jLabelDisplay[1].getText()));
			base=1;
			for(int i=2; i<10; i++){
				jButtonNumerical[i].setEnabled(false);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(false);
			}
		}else if(evt.getActionCommand()=="Oct" || evt.getActionCommand().equals("")){
			jTButtonBase[1].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 2, jLabelDisplay[1].getText()));
			base=2;
			for(int i=2; i<8; i++){
				jButtonNumerical[i].setEnabled(true);
			}
			for(int i=8; i<10; i++){
				jButtonNumerical[i].setEnabled(false);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(false);
			}
		}else if(evt.getActionCommand()=="Dec" || evt.getActionCommand().equals("")){
			jTButtonBase[2].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 3, jLabelDisplay[1].getText()));
			base=3;
			for(int i=2; i<10; i++){
				jButtonNumerical[i].setEnabled(true);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(false);
			}
		}else if(evt.getActionCommand()=="Hex" || evt.getActionCommand().equals("")){
			jTButtonBase[3].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 4, jLabelDisplay[1].getText()));
			base=4;
			for(int i=2; i<10; i++){
				jButtonNumerical[i].setEnabled(true);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(true);
			}
		}
	}

------------------------------------------------------------------------
 j T Button Base Action Performed  jTButtonBaseActionPerformed  Base  Buttons   i 0 i 4 i j T Button Base  jTButtonBase i set Selected  setSelected j Label Display  jLabelDisplay 0 set Text  setText number operand 1  operand1 operand 2  operand2 operator memory evt get Action Command  getActionCommand Bin evt get Action Command  getActionCommand equals  j T Button Base  jTButtonBase 0 set Selected  setSelected j Label Display  jLabelDisplay 1 set Text  setText bc Operation  bcOperation conversion base 1 j Label Display  jLabelDisplay 1 get Text  getText base 1 i 2 i 10 i j Button Numerical  jButtonNumerical i set Enabled  setEnabled i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i set Enabled  setEnabled evt get Action Command  getActionCommand Oct evt get Action Command  getActionCommand equals  j T Button Base  jTButtonBase 1 set Selected  setSelected j Label Display  jLabelDisplay 1 set Text  setText bc Operation  bcOperation conversion base 2 j Label Display  jLabelDisplay 1 get Text  getText base 2 i 2 i 8 i j Button Numerical  jButtonNumerical i set Enabled  setEnabled i 8 i 10 i j Button Numerical  jButtonNumerical i set Enabled  setEnabled i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i set Enabled  setEnabled evt get Action Command  getActionCommand Dec evt get Action Command  getActionCommand equals  j T Button Base  jTButtonBase 2 set Selected  setSelected j Label Display  jLabelDisplay 1 set Text  setText bc Operation  bcOperation conversion base 3 j Label Display  jLabelDisplay 1 get Text  getText base 3 i 2 i 10 i j Button Numerical  jButtonNumerical i set Enabled  setEnabled i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i set Enabled  setEnabled evt get Action Command  getActionCommand Hex evt get Action Command  getActionCommand equals j T Button Base  jTButtonBase 3 set Selected  setSelected j Label Display  jLabelDisplay 1 set Text  setText bc Operation  bcOperation conversion base 4 j Label Display  jLabelDisplay 1 get Text  getText base 4 i 2 i 10 i j Button Numerical  jButtonNumerical i set Enabled  setEnabled i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i set Enabled  setEnabled 
------------------------------------------------------------------------
[button, base, action, performed, jtbuttonbaseactionperformed, buttons, jtbuttonbase, set, selected, setselected, label, display, jlabeldisplay, text, settext, number, operand, operand1, operand2, operator, memory, evt, command, getactioncommand, bin, equals, , bc, operation, bcoperation, conversion, gettext, numerical, jbuttonnumerical, enabled, setenabled, alpha, jbuttonalphanumerical, oct, , dec, , hex]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,jButtonNumericalActionPerformed
364 , 384
------------------------------------------------------------------------
	//Numerical Buttons
	private void jButtonNumericalActionPerformed(ActionEvent evt){
		if(base==1 && number.length()<19){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}else if(base==2 && number.length()<16){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}else if(base==3 && number.length()<15){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}else if(base==4 && number.length()<12){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}
		jLabelDisplay[0].setText(number);
	}

------------------------------------------------------------------------
 j Button Numerical Action Performed  jButtonNumericalActionPerformed  Numerical  Buttons   base 1 number length 19 number contains evt get Action Command  getActionCommand equals number number evt get Action Command  getActionCommand base 2 number length 16 number contains evt get Action Command  getActionCommand equals number number evt get Action Command  getActionCommand base 3 number length 15 number contains evt get Action Command  getActionCommand equals number number evt get Action Command  getActionCommand base 4 number length 12 number contains evt get Action Command  getActionCommand equals number number evt get Action Command  getActionCommand j Label Display  jLabelDisplay 0 set Text  setText number 
------------------------------------------------------------------------
[button, numerical, action, performed, jbuttonnumericalactionperformed, buttons, base, number, length, evt, command, getactioncommand, equals, label, display, jlabeldisplay, set, text, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,jButtonMemoryActionPerformed
385 , 395
------------------------------------------------------------------------
	//memory buttons
	private void jButtonMemoryActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="M" || evt.getActionCommand().equals("m")){
			if((number+memory).length()<12){
				number=number+memory;
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="MS" || evt.getActionCommand().equals("s")){
				memory=jLabelDisplay[1].getText();
		}
	}

------------------------------------------------------------------------
 j Button Memory Action Performed  jButtonMemoryActionPerformed  memory  buttons   evt get Action Command  getActionCommand M evt get Action Command  getActionCommand equals m number memory length 12 number number memory j Label Display  jLabelDisplay 0 set Text  setText number evt get Action Command  getActionCommand MS evt get Action Command  getActionCommand equals s memory j Label Display  jLabelDisplay 1 get Text  getText 
------------------------------------------------------------------------
[button, memory, action, performed, jbuttonmemoryactionperformed, buttons, evt, command, getactioncommand, equals, number, length, label, display, jlabeldisplay, set, text, settext, ms, gettext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,jButtonClearActionPerformed
396 , 414
------------------------------------------------------------------------
	//clear buttons
	private void jButtonClearActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="<B" || evt.getActionCommand().equals("\b")){
			if(number.length()>0){
				number=number.substring(0, number.length()-1);
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="C" || evt.getActionCommand().equals("c")){
			number="";
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="AC" || evt.getActionCommand().equals("a")){
			number="";
			operand1="";
			operand2="";
			operator="";
			jLabelDisplay[0].setText("");
			jLabelDisplay[1].setText("");
		}
	}

------------------------------------------------------------------------
 j Button Clear Action Performed  jButtonClearActionPerformed  clear  buttons   evt get Action Command  getActionCommand B evt get Action Command  getActionCommand equals b number length 0 number number substring 0 number length 1 j Label Display  jLabelDisplay 0 set Text  setText number evt get Action Command  getActionCommand C evt get Action Command  getActionCommand equals c number j Label Display  jLabelDisplay 0 set Text  setText number evt get Action Command  getActionCommand AC evt get Action Command  getActionCommand equals a number operand 1  operand1 operand 2  operand2 operator j Label Display  jLabelDisplay 0 set Text  setText j Label Display  jLabelDisplay 1 set Text  setText 
------------------------------------------------------------------------
[button, clear, action, performed, jbuttonclearactionperformed, buttons, evt, command, getactioncommand, equals, number, length, substring, label, display, jlabeldisplay, set, text, settext, ac, operand, operand1, operand2, operator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,jButtonOperatorActionPerformed
415 , 441
------------------------------------------------------------------------
	//operand buttons
	private void jButtonOperatorActionPerformed(ActionEvent evt){
		if(evt.getActionCommand().equals("=")){			//when '=' is pressed
			operand2=number;	//take the input
			String ans=bcOperation.operation(base, operand1, operand2, operator);	//calculate the result
			jLabelDisplay[1].setText(ans);	//show the answer
			operator="";					//empty operator
		}else{										//when operator is pressed
			if(!number.isEmpty()){
				if(operator.isEmpty()){	//general time
					operand1=number;
					operator=evt.getActionCommand();
				}else{	//for chain work, eg. 2+3+4+....
					operand2=number;	//get the input
					String ans=bcOperation.operation(base, operand1, operand2, operator);//calculate
					jLabelDisplay[1].setText(ans);		//show ans.
					operand1=ans;	//take the ans as the input
					operator=evt.getActionCommand();	//get the operator
				}
			}else{	//when some thing is done to the answer, eg.  ..=3 + 2 ...
				operand1=jLabelDisplay[1].getText();	//get the ans.
				operator=evt.getActionCommand();		//get the operator
			}
		}
		number="";						//empty input string
		jLabelDisplay[0].setText("");	//empty input space
	}

------------------------------------------------------------------------
 j Button Operator Action Performed  jButtonOperatorActionPerformed  operand  buttons     pressed    input  calculate   result  show   answer  empty  operator   operator   pressed  general  time   chain  work      input  calculate  calculate  calculate  calculate  calculate  show  ans    ans    input    operator    thing      answer         ans    operator  empty  input  string  empty  input  space   evt get Action Command  getActionCommand equals operand 2  operand2 number String ans bc Operation  bcOperation operation base operand 1  operand1 operand 2  operand2 operator j Label Display  jLabelDisplay 1 set Text  setText ans operator number is Empty  isEmpty operator is Empty  isEmpty operand 1  operand1 number operator evt get Action Command  getActionCommand operand 2  operand2 number String ans bc Operation  bcOperation operation base operand 1  operand1 operand 2  operand2 operator j Label Display  jLabelDisplay 1 set Text  setText ans operand 1  operand1 ans operator evt get Action Command  getActionCommand operand 1  operand1 j Label Display  jLabelDisplay 1 get Text  getText operator evt get Action Command  getActionCommand number j Label Display  jLabelDisplay 0 set Text  setText 
------------------------------------------------------------------------
[button, operator, action, performed, jbuttonoperatoractionperformed, operand, buttons, pressed, input, calculate, result, show, answer, empty, general, time, chain, work, ans, thing, string, space, evt, command, getactioncommand, equals, operand2, number, bc, operation, bcoperation, base, operand1, label, display, jlabeldisplay, set, text, settext, isempty, gettext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,main
451 , 461
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new BaseCalculator();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Base Calculator  BaseCalculator 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, base, calculator, basecalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,BaseCalculator
49 , 55
------------------------------------------------------------------------
	/***##Constructor##***/
	public BaseCalculator() {
		number="";
	    memory="";
		initialComponent();
		super.jCBItemMode[2].setSelected(true);
	}

------------------------------------------------------------------------
 Base Calculator  BaseCalculator   Constructor  number memory initial Component  initialComponent j CB Item Mode  jCBItemMode 2 set Selected  setSelected 
------------------------------------------------------------------------
[base, calculator, basecalculator, constructor, number, memory, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, selected, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculator.java,BaseCalculator
20 , 462
------------------------------------------------------------------------
/**
 * 
 * 
 * @author Minhas Kamal
 */
public class BaseCalculator extends UltimateCalculatorFrame{
	// GUI Declaration
	private BaseCalculatorGui baseCalcGui;
	//operation object
	private BaseCalculatorOperation bcOperation;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JToggleButton[] jTButtonBase;
	private JButton[] jButtonNumerical;
	private JButton[] jButtonAlphaNumerical;
	private JButton[] jButtonOperator;
	private JButton[] jButtonMemory;
	private JButton[] jButtonClear;
	private JButton jButtonPoint;
	private JLabel[] jLabelDisplay;
    //other variables
    private String number;
    private String operand1="";
    private String operand2="";
    private String operator="";
    private String memory;
    private int base;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public BaseCalculator() {
		number="";
	    memory="";
		initialComponent();
		super.jCBItemMode[2].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		baseCalcGui = new BaseCalculatorGui();
		//operation object
		bcOperation = new BaseCalculatorOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"BaseCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jTButtonBase = baseCalcGui.jTButtonBase;
		jButtonNumerical = baseCalcGui.jButtonNumerical;			//10 buttons(0-9)
		jButtonPoint = baseCalcGui.jButtonPoint;					//point(.)
		jButtonAlphaNumerical = baseCalcGui.jButtonAlphaNumerical;	//A-F
		jButtonOperator = baseCalcGui.jButtonOperator;				//+, -, *, /, SQRT(), =
		jButtonMemory = baseCalcGui.jButtonMemory;					//M, MS
		jButtonClear = baseCalcGui.jButtonClear; 					//AC, C, back space
		jLabelDisplay = baseCalcGui.jLabelDisplay;					//operation, result
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		//toggle buttons base
		for(int i=0; i<4; i++){
			jTButtonBase[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jTButtonBaseActionPerformed(evt);
	            }
	        });
		}
		jTButtonBase[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.CTRL_MASK), "BIN_pressed");
		jTButtonBase[0].getActionMap().put("BIN_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		jTButtonBase[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_MASK), "OCT_pressed");
		jTButtonBase[1].getActionMap().put("OCT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		jTButtonBase[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.CTRL_MASK), "DEC_pressed");
		jTButtonBase[2].getActionMap().put("DEC_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		jTButtonBase[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_H, InputEvent.CTRL_MASK), "HEX_pressed");
		jTButtonBase[3].getActionMap().put("HEX_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jTButtonBaseActionPerformed(evt);
	        }
	    });
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
			jButtonNumerical[i].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
				put(KeyStroke.getKeyStroke(48+i, 0), i+"_pressed");
			jButtonNumerical[i].getActionMap().put(i+"_pressed", new AbstractAction() {
				public void actionPerformed(ActionEvent evt) {
					jButtonNumericalActionPerformed(evt);
				}
			});
		}
		//Point
		//disabled
		jButtonPoint.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
        });
		//Alpha Numerical Buttons
		for(int i=0; i<6; i++){
			jButtonAlphaNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
		}
		jButtonAlphaNumerical[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.SHIFT_MASK), "A_pressed");
		jButtonAlphaNumerical[0].getActionMap().put("A_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_B, InputEvent.SHIFT_MASK), "B_pressed");
		jButtonAlphaNumerical[1].getActionMap().put("B_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.SHIFT_MASK), "C_pressed");
		jButtonAlphaNumerical[2].getActionMap().put("C_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.SHIFT_MASK), "D_pressed");
		jButtonAlphaNumerical[3].getActionMap().put("D_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_E, InputEvent.SHIFT_MASK), "E_pressed");
		jButtonAlphaNumerical[4].getActionMap().put("E_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonAlphaNumerical[5].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.SHIFT_MASK), "F_pressed");
		jButtonAlphaNumerical[5].getActionMap().put("F_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		//Operator Buttons
		for(int i=0; i<5; i++){
			jButtonOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperatorActionPerformed(evt);
	            }
	        });
		}
		jButtonOperator[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, InputEvent.SHIFT_MASK), "PLUS_pressed");
		jButtonOperator[0].getActionMap().put("PLUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,0), "MINUS_pressed");
		jButtonOperator[1].getActionMap().put("MINUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_8, InputEvent.SHIFT_MASK), "MULT_pressed");
		jButtonOperator[2].getActionMap().put("MULT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,0), "DIVD_pressed");
		jButtonOperator[3].getActionMap().put("DIVD_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,0), "EQL_pressed");
		jButtonOperator[4].getActionMap().put("EQL_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonMemoryActionPerformed(evt);
	            }
	        });
		}
		jButtonMemory[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_M,0), "MEM_pressed");
		jButtonMemory[0].getActionMap().put("MEM_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		jButtonMemory[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "STO_pressed");
		jButtonMemory[1].getActionMap().put("STO_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonClearActionPerformed(evt);
	            }
	        });
		}
		jButtonClear[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C,0), "CLR_pressed");
		jButtonClear[0].getActionMap().put("CLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0), "ACLR_pressed");
		jButtonClear[1].getActionMap().put("ACLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), "BSPACE_pressed");
		jButtonClear[2].getActionMap().put("BSPACE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		/*Some extra settings*/
		jTButtonBase[2].setSelected(true);
		base=3;
		for(int i=0; i<6; i++){
			jButtonAlphaNumerical[i].setEnabled(false);
		}
		//end
		//**Setting Criterion of the Frame**//
		super.gui.add(baseCalcGui);
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Base Calculator");
		super.gui.setResizable(false);
		super.gui.setBounds(230, 115, 327, 450);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	//Base Buttons
	private void jTButtonBaseActionPerformed(ActionEvent evt){
		for(int i=0; i<4; i++){
			jTButtonBase[i].setSelected(false);
		}
		jLabelDisplay[0].setText("");
		number="";
		operand1="";
		operand2="";
		operator="";
		memory="";
		if(evt.getActionCommand()=="Bin" || evt.getActionCommand().equals("")){
			jTButtonBase[0].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 1, jLabelDisplay[1].getText()));
			base=1;
			for(int i=2; i<10; i++){
				jButtonNumerical[i].setEnabled(false);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(false);
			}
		}else if(evt.getActionCommand()=="Oct" || evt.getActionCommand().equals("")){
			jTButtonBase[1].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 2, jLabelDisplay[1].getText()));
			base=2;
			for(int i=2; i<8; i++){
				jButtonNumerical[i].setEnabled(true);
			}
			for(int i=8; i<10; i++){
				jButtonNumerical[i].setEnabled(false);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(false);
			}
		}else if(evt.getActionCommand()=="Dec" || evt.getActionCommand().equals("")){
			jTButtonBase[2].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 3, jLabelDisplay[1].getText()));
			base=3;
			for(int i=2; i<10; i++){
				jButtonNumerical[i].setEnabled(true);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(false);
			}
		}else if(evt.getActionCommand()=="Hex" || evt.getActionCommand().equals("")){
			jTButtonBase[3].setSelected(true);
			jLabelDisplay[1].setText(bcOperation.conversion(base, 4, jLabelDisplay[1].getText()));
			base=4;
			for(int i=2; i<10; i++){
				jButtonNumerical[i].setEnabled(true);
			}
			for(int i=0; i<6; i++){
				jButtonAlphaNumerical[i].setEnabled(true);
			}
		}
	}
	//Numerical Buttons
	private void jButtonNumericalActionPerformed(ActionEvent evt){
		if(base==1 && number.length()<19){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}else if(base==2 && number.length()<16){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}else if(base==3 && number.length()<15){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}else if(base==4 && number.length()<12){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}
		jLabelDisplay[0].setText(number);
	}
	//memory buttons
	private void jButtonMemoryActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="M" || evt.getActionCommand().equals("m")){
			if((number+memory).length()<12){
				number=number+memory;
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="MS" || evt.getActionCommand().equals("s")){
				memory=jLabelDisplay[1].getText();
		}
	}
	//clear buttons
	private void jButtonClearActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="<B" || evt.getActionCommand().equals("\b")){
			if(number.length()>0){
				number=number.substring(0, number.length()-1);
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="C" || evt.getActionCommand().equals("c")){
			number="";
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="AC" || evt.getActionCommand().equals("a")){
			number="";
			operand1="";
			operand2="";
			operator="";
			jLabelDisplay[0].setText("");
			jLabelDisplay[1].setText("");
		}
	}
	//operand buttons
	private void jButtonOperatorActionPerformed(ActionEvent evt){
		if(evt.getActionCommand().equals("=")){			//when '=' is pressed
			operand2=number;	//take the input
			String ans=bcOperation.operation(base, operand1, operand2, operator);	//calculate the result
			jLabelDisplay[1].setText(ans);	//show the answer
			operator="";					//empty operator
		}else{										//when operator is pressed
			if(!number.isEmpty()){
				if(operator.isEmpty()){	//general time
					operand1=number;
					operator=evt.getActionCommand();
				}else{	//for chain work, eg. 2+3+4+....
					operand2=number;	//get the input
					String ans=bcOperation.operation(base, operand1, operand2, operator);//calculate
					jLabelDisplay[1].setText(ans);		//show ans.
					operand1=ans;	//take the ans as the input
					operator=evt.getActionCommand();	//get the operator
				}
			}else{	//when some thing is done to the answer, eg.  ..=3 + 2 ...
				operand1=jLabelDisplay[1].getText();	//get the ans.
				operator=evt.getActionCommand();		//get the operator
			}
		}
		number="";						//empty input string
		jLabelDisplay[0].setText("");	//empty input space
	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new BaseCalculator();
	}
}

------------------------------------------------------------------------
 Base Calculator  BaseCalculator  GUI  Declaration  operation  object    variables   
   
   
      Minhas  Kamal 
  Kamal
  Base Calculator Gui  BaseCalculatorGui base Calc Gui  baseCalcGui Base Calculator Operation  BaseCalculatorOperation bc Operation  bcOperation J Toggle Button  JToggleButton j T Button Base  jTButtonBase J Button  JButton j Button Numerical  jButtonNumerical J Button  JButton j Button Alpha Numerical  jButtonAlphaNumerical J Button  JButton j Button Operator  jButtonOperator J Button  JButton j Button Memory  jButtonMemory J Button  JButton j Button Clear  jButtonClear J Button  JButton j Button Point  jButtonPoint J Label  JLabel j Label Display  jLabelDisplay String number String operand 1  operand1 String operand 2  operand2 String operator String memory base 
------------------------------------------------------------------------
[base, calculator, basecalculator, gui, declaration, operation, object, variables, minhas, kamal, basecalculatorgui, calc, basecalcgui, basecalculatoroperation, bc, bcoperation, toggle, button, jtogglebutton, jtbuttonbase, jbutton, numerical, jbuttonnumerical, alpha, jbuttonalphanumerical, operator, jbuttonoperator, memory, jbuttonmemory, clear, jbuttonclear, point, jbuttonpoint, label, jlabel, display, jlabeldisplay, string, number, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorGui.java,initialComponent
39 , 178
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jTButtonBase = new JToggleButton[4];
		jButtonNumerical=new JButton[10];	//10 buttons(0-9)
		jButtonPoint=new JButton();			//point(.)
		jButtonAlphaNumerical=new JButton[6];//A-F
		jButtonOperator=new JButton[5];		//+, -, *, /, SQRT(), =
		jButtonMemory=new JButton[2];		//M, MS
		jButtonClear=new JButton[3]; 		//AC, C, back space
		jLabelDisplay=new JLabel[2];	//operation, result
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//toggle buttons base
		for(int i=0; i<4; i++){
			jTButtonBase[i] = new JToggleButton();
			jTButtonBase[i].setSize(40, 25);
			jTButtonBase[i].setBackground(new Color(200, 200, 200));
			jTButtonBase[i].setBorder(null);
		}
		jTButtonBase[0].setLocation(150, 130); jTButtonBase[0].setText("Bin");
		jTButtonBase[1].setLocation(190, 130); jTButtonBase[1].setText("Oct");
		jTButtonBase[2].setLocation(230, 130); jTButtonBase[2].setText("Dec");
		jTButtonBase[3].setLocation(270, 130); jTButtonBase[3].setText("Hex");
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i] = new JButton(""+i);
			jButtonNumerical[i].setSize(50, 40);
			jButtonNumerical[i].setLocation(((i-1)%3)*50+10, 310-(((i-1)/3)*40));
			jButtonNumerical[i].setFont(new Font("Calibri", 0, 19));
			jButtonNumerical[i].setBackground(new Color(200, 200, 190));
			jButtonNumerical[i].setBorder(null);
		}
		jButtonNumerical[0].setLocation(10, 350); jButtonNumerical[0].setSize(100, 40);
		//Point
		jButtonPoint.setBackground(new Color(210, 210, 190));
		jButtonPoint.setText(""); jButtonPoint.setBounds(110, 350, 50, 40);
		jButtonPoint.setFont(new Font("Vrinda", 0, 26));
		jButtonPoint.setRolloverEnabled(false);
		//Alpha Numerical Buttons
		for(int i=0; i<6; i++){
			jButtonAlphaNumerical[i]=new JButton();
			jButtonAlphaNumerical[i].setSize(45, 40);
			jButtonAlphaNumerical[i].setFont(new Font("Times New Roman", 1, 18));
			jButtonAlphaNumerical[i].setBorder(null);
			jButtonAlphaNumerical[i].setBackground(new Color(180, 170, 165));
		}
		jButtonAlphaNumerical[0].setLocation(220, 230); jButtonAlphaNumerical[0].setText("A");
		jButtonAlphaNumerical[1].setLocation(220, 270); jButtonAlphaNumerical[1].setText("B");
		jButtonAlphaNumerical[2].setLocation(267, 230); jButtonAlphaNumerical[2].setText("C");
		jButtonAlphaNumerical[3].setLocation(267, 270); jButtonAlphaNumerical[3].setText("D");
		jButtonAlphaNumerical[4].setLocation(267, 310); jButtonAlphaNumerical[4].setText("E");
		jButtonAlphaNumerical[5].setLocation(267, 350); jButtonAlphaNumerical[5].setText("F");
		//Operator Buttons
		for(int i=0; i<5; i++){
			jButtonOperator[i] = new JButton();
			jButtonOperator[i].setSize(45, 40);
			jButtonOperator[i].setFont(new Font("Calibri", 0, 17));
			jButtonOperator[i].setBackground(new Color(188, 188, 188));
			jButtonOperator[i].setBorder(null);
		}
		jButtonOperator[0].setText("+"); jButtonOperator[0].setLocation(173, 350);
		jButtonOperator[1].setText("-"); jButtonOperator[1].setLocation(173, 310);
		jButtonOperator[2].setText("x"); jButtonOperator[2].setLocation(173, 270);
		jButtonOperator[3].setText("/"); jButtonOperator[3].setLocation(173, 230);
		jButtonOperator[4].setText("="); jButtonOperator[4].setBounds(220, 310, 45, 80);
		jButtonOperator[4].setFont(new Font("Arial", 0, 19));
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i] = new JButton(); 
			jButtonMemory[i].setSize(50, 33);
			jButtonMemory[i].setFont(new Font("Arial", 0, 13));
			jButtonMemory[i].setBorder(null);
		}
		jButtonMemory[0].setText("M"); jButtonMemory[0].setLocation(10, 185);
		jButtonMemory[1].setText("MS"); jButtonMemory[1].setLocation(60, 185);
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i] = new JButton();
			jButtonClear[i].setSize(45, 33);
			jButtonClear[i].setFont(new Font("Vrinda", 0, 17));
			jButtonClear[i].setBorder(null);
		}
		jButtonClear[0].setText("C"); jButtonClear[0].setLocation(221, 185);
		jButtonClear[1].setText("AC"); jButtonClear[1].setLocation(266, 185);
		jButtonClear[2].setText("<B"); jButtonClear[2].setLocation(110, 185); jButtonClear[2].setSize(50, 33);
		//Display label
		for(int i=0; i<2; i++){
			jLabelDisplay[i] = new JLabel();
			jLabelDisplay[i].setSize(298, 45);
			jLabelDisplay[i].setHorizontalAlignment(4);
			jLabelDisplay[i].setFont(new Font("Calibri", 0, 18));
			jLabelDisplay[i].setBackground(new Color(100, 100, 90));
			jLabelDisplay[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		}
		jLabelDisplay[0].setLocation(10, 18);
		jLabelDisplay[1].setLocation(10, 63); jLabelDisplay[1].setSize(298, 60);
			jLabelDisplay[1].setFont(new Font("Calibri", 0, 22));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding toggle buttons
		for(int i=0; i<4; i++){
			add(jTButtonBase[i]);
		}
		//adding buttons
		for(int i=0; i<10; i++){
			add(jButtonNumerical[i]);
		}
		for(int i=0; i<6; i++){
			add(jButtonAlphaNumerical[i]);
		}
		add(jButtonPoint);
		for(int i=0; i<5; i++){
			add(jButtonOperator[i]);
		}
		for(int i=0; i<2; i++){
			add(jButtonMemory[i]);
		}
		for(int i=0; i<3; i++){
			add(jButtonClear[i]);
		}
		//adding display labels
		for(int i=0; i<2; i++){
			add(jLabelDisplay[i]);
		}
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		setBounds(0, 0, 327, 475);
		setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"BaseCalculatorBackground.jpg")));
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										   End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	   End   Adding  Components  															 _______ A _______  _______A_______   10  buttons  point        SQRT    MS  AC   back  space  operation  result  toggle  buttons  base  Numeric  Buttons  Point  Alpha  Numerical  Buttons  Operator  Buttons  Memory  Buttons  Clear  Buttons  Display  label  adding  toggle  buttons  adding  buttons  adding  display  labels  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j T Button Base  jTButtonBase J Toggle Button  JToggleButton 4 j Button Numerical  jButtonNumerical J Button  JButton 10 j Button Point  jButtonPoint J Button  JButton j Button Alpha Numerical  jButtonAlphaNumerical J Button  JButton 6 j Button Operator  jButtonOperator J Button  JButton 5 j Button Memory  jButtonMemory J Button  JButton 2 j Button Clear  jButtonClear J Button  JButton 3 j Label Display  jLabelDisplay J Label  JLabel 2 i 0 i 4 i j T Button Base  jTButtonBase i J Toggle Button  JToggleButton j T Button Base  jTButtonBase i set Size  setSize 40 25 j T Button Base  jTButtonBase i set Background  setBackground Color 200 200 200 j T Button Base  jTButtonBase i set Border  setBorder j T Button Base  jTButtonBase 0 set Location  setLocation 150 130 j T Button Base  jTButtonBase 0 set Text  setText Bin j T Button Base  jTButtonBase 1 set Location  setLocation 190 130 j T Button Base  jTButtonBase 1 set Text  setText Oct j T Button Base  jTButtonBase 2 set Location  setLocation 230 130 j T Button Base  jTButtonBase 2 set Text  setText Dec j T Button Base  jTButtonBase 3 set Location  setLocation 270 130 j T Button Base  jTButtonBase 3 set Text  setText Hex i 0 i 10 i j Button Numerical  jButtonNumerical i J Button  JButton i j Button Numerical  jButtonNumerical i set Size  setSize 50 40 j Button Numerical  jButtonNumerical i set Location  setLocation i 1 3 50 10 310 i 1 3 40 j Button Numerical  jButtonNumerical i set Font  setFont Font Calibri 0 19 j Button Numerical  jButtonNumerical i set Background  setBackground Color 200 200 190 j Button Numerical  jButtonNumerical i set Border  setBorder j Button Numerical  jButtonNumerical 0 set Location  setLocation 10 350 j Button Numerical  jButtonNumerical 0 set Size  setSize 100 40 j Button Point  jButtonPoint set Background  setBackground Color 210 210 190 j Button Point  jButtonPoint set Text  setText j Button Point  jButtonPoint set Bounds  setBounds 110 350 50 40 j Button Point  jButtonPoint set Font  setFont Font Vrinda 0 26 j Button Point  jButtonPoint set Rollover Enabled  setRolloverEnabled i 0 i 6 i j Button Alpha Numerical  jButtonAlphaNumerical i J Button  JButton j Button Alpha Numerical  jButtonAlphaNumerical i set Size  setSize 45 40 j Button Alpha Numerical  jButtonAlphaNumerical i set Font  setFont Font Times New Roman 1 18 j Button Alpha Numerical  jButtonAlphaNumerical i set Border  setBorder j Button Alpha Numerical  jButtonAlphaNumerical i set Background  setBackground Color 180 170 165 j Button Alpha Numerical  jButtonAlphaNumerical 0 set Location  setLocation 220 230 j Button Alpha Numerical  jButtonAlphaNumerical 0 set Text  setText A j Button Alpha Numerical  jButtonAlphaNumerical 1 set Location  setLocation 220 270 j Button Alpha Numerical  jButtonAlphaNumerical 1 set Text  setText B j Button Alpha Numerical  jButtonAlphaNumerical 2 set Location  setLocation 267 230 j Button Alpha Numerical  jButtonAlphaNumerical 2 set Text  setText C j Button Alpha Numerical  jButtonAlphaNumerical 3 set Location  setLocation 267 270 j Button Alpha Numerical  jButtonAlphaNumerical 3 set Text  setText D j Button Alpha Numerical  jButtonAlphaNumerical 4 set Location  setLocation 267 310 j Button Alpha Numerical  jButtonAlphaNumerical 4 set Text  setText E j Button Alpha Numerical  jButtonAlphaNumerical 5 set Location  setLocation 267 350 j Button Alpha Numerical  jButtonAlphaNumerical 5 set Text  setText F i 0 i 5 i j Button Operator  jButtonOperator i J Button  JButton j Button Operator  jButtonOperator i set Size  setSize 45 40 j Button Operator  jButtonOperator i set Font  setFont Font Calibri 0 17 j Button Operator  jButtonOperator i set Background  setBackground Color 188 188 188 j Button Operator  jButtonOperator i set Border  setBorder j Button Operator  jButtonOperator 0 set Text  setText j Button Operator  jButtonOperator 0 set Location  setLocation 173 350 j Button Operator  jButtonOperator 1 set Text  setText j Button Operator  jButtonOperator 1 set Location  setLocation 173 310 j Button Operator  jButtonOperator 2 set Text  setText x j Button Operator  jButtonOperator 2 set Location  setLocation 173 270 j Button Operator  jButtonOperator 3 set Text  setText j Button Operator  jButtonOperator 3 set Location  setLocation 173 230 j Button Operator  jButtonOperator 4 set Text  setText j Button Operator  jButtonOperator 4 set Bounds  setBounds 220 310 45 80 j Button Operator  jButtonOperator 4 set Font  setFont Font Arial 0 19 i 0 i 2 i j Button Memory  jButtonMemory i J Button  JButton j Button Memory  jButtonMemory i set Size  setSize 50 33 j Button Memory  jButtonMemory i set Font  setFont Font Arial 0 13 j Button Memory  jButtonMemory i set Border  setBorder j Button Memory  jButtonMemory 0 set Text  setText M j Button Memory  jButtonMemory 0 set Location  setLocation 10 185 j Button Memory  jButtonMemory 1 set Text  setText MS j Button Memory  jButtonMemory 1 set Location  setLocation 60 185 i 0 i 3 i j Button Clear  jButtonClear i J Button  JButton j Button Clear  jButtonClear i set Size  setSize 45 33 j Button Clear  jButtonClear i set Font  setFont Font Vrinda 0 17 j Button Clear  jButtonClear i set Border  setBorder j Button Clear  jButtonClear 0 set Text  setText C j Button Clear  jButtonClear 0 set Location  setLocation 221 185 j Button Clear  jButtonClear 1 set Text  setText AC j Button Clear  jButtonClear 1 set Location  setLocation 266 185 j Button Clear  jButtonClear 2 set Text  setText B j Button Clear  jButtonClear 2 set Location  setLocation 110 185 j Button Clear  jButtonClear 2 set Size  setSize 50 33 i 0 i 2 i j Label Display  jLabelDisplay i J Label  JLabel j Label Display  jLabelDisplay i set Size  setSize 298 45 j Label Display  jLabelDisplay i set Horizontal Alignment  setHorizontalAlignment 4 j Label Display  jLabelDisplay i set Font  setFont Font Calibri 0 18 j Label Display  jLabelDisplay i set Background  setBackground Color 100 100 90 j Label Display  jLabelDisplay i set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Label Display  jLabelDisplay 0 set Location  setLocation 10 18 j Label Display  jLabelDisplay 1 set Location  setLocation 10 63 j Label Display  jLabelDisplay 1 set Size  setSize 298 60 j Label Display  jLabelDisplay 1 set Font  setFont Font Calibri 0 22 i 0 i 4 i add j T Button Base  jTButtonBase i i 0 i 10 i add j Button Numerical  jButtonNumerical i i 0 i 6 i add j Button Alpha Numerical  jButtonAlphaNumerical i add j Button Point  jButtonPoint i 0 i 5 i add j Button Operator  jButtonOperator i i 0 i 2 i add j Button Memory  jButtonMemory i i 0 i 3 i add j Button Clear  jButtonClear i i 0 i 2 i add j Label Display  jLabelDisplay i set Bounds  setBounds 0 0 327 475 set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Base Calculator Background  BaseCalculatorBackground jpg 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, buttons, point, sqrt, ms, ac, back, space, operation, result, toggle, base, numeric, alpha, numerical, operator, memory, clear, display, label, labels, criterion, frame, method, initializing, gui, variables, placing, specific, specifies, criteria, main, button, jtbuttonbase, jtogglebutton, jbuttonnumerical, jbutton, jbuttonpoint, jbuttonalphanumerical, jbuttonoperator, jbuttonmemory, jbuttonclear, jlabeldisplay, jlabel, set, size, setsize, background, setbackground, color, border, setborder, location, setlocation, text, settext, bin, oct, dec, hex, font, setfont, calibri, setbounds, vrinda, rollover, enabled, setrolloverenabled, times, roman, arial, horizontal, alignment, sethorizontalalignment, soft, bevel, softbevelborder, bevelborder, lowered, add, icon, seticon, javax, swing, image, imageicon, class, getclass, resource, getresource, res, imgs, calculator, basecalculatorbackground, jpg]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorGui.java,main
179 , 195
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		BaseCalculatorGui gui = new BaseCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 332, 450);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Base Calculator Gui  BaseCalculatorGui gui Base Calculator Gui  BaseCalculatorGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 230 115 332 450 j Frame  jFrame set Visible  setVisible j Frame  jFrame set Layout  setLayout j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, base, calculator, gui, basecalculatorgui, frame, jframe, bounds, setbounds, visible, setvisible, layout, setlayout, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorGui.java,BaseCalculatorGui
35 , 38
------------------------------------------------------------------------
	/***##Constructor##***/
	public BaseCalculatorGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Base Calculator Gui  BaseCalculatorGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[base, calculator, gui, basecalculatorgui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorGui.java,BaseCalculatorGui
16 , 196
------------------------------------------------------------------------
/**
 * A Base Calculator GUI
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class BaseCalculatorGui extends JLabel {
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JToggleButton[] jTButtonBase;
	JButton[] jButtonNumerical;
	JButton[] jButtonAlphaNumerical;
	JButton[] jButtonOperator;
	JButton[] jButtonMemory;
	JButton[] jButtonClear;
	JButton jButtonPoint;
	JLabel[] jLabelDisplay;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public BaseCalculatorGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jTButtonBase = new JToggleButton[4];
		jButtonNumerical=new JButton[10];	//10 buttons(0-9)
		jButtonPoint=new JButton();			//point(.)
		jButtonAlphaNumerical=new JButton[6];//A-F
		jButtonOperator=new JButton[5];		//+, -, *, /, SQRT(), =
		jButtonMemory=new JButton[2];		//M, MS
		jButtonClear=new JButton[3]; 		//AC, C, back space
		jLabelDisplay=new JLabel[2];	//operation, result
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//toggle buttons base
		for(int i=0; i<4; i++){
			jTButtonBase[i] = new JToggleButton();
			jTButtonBase[i].setSize(40, 25);
			jTButtonBase[i].setBackground(new Color(200, 200, 200));
			jTButtonBase[i].setBorder(null);
		}
		jTButtonBase[0].setLocation(150, 130); jTButtonBase[0].setText("Bin");
		jTButtonBase[1].setLocation(190, 130); jTButtonBase[1].setText("Oct");
		jTButtonBase[2].setLocation(230, 130); jTButtonBase[2].setText("Dec");
		jTButtonBase[3].setLocation(270, 130); jTButtonBase[3].setText("Hex");
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i] = new JButton(""+i);
			jButtonNumerical[i].setSize(50, 40);
			jButtonNumerical[i].setLocation(((i-1)%3)*50+10, 310-(((i-1)/3)*40));
			jButtonNumerical[i].setFont(new Font("Calibri", 0, 19));
			jButtonNumerical[i].setBackground(new Color(200, 200, 190));
			jButtonNumerical[i].setBorder(null);
		}
		jButtonNumerical[0].setLocation(10, 350); jButtonNumerical[0].setSize(100, 40);
		//Point
		jButtonPoint.setBackground(new Color(210, 210, 190));
		jButtonPoint.setText(""); jButtonPoint.setBounds(110, 350, 50, 40);
		jButtonPoint.setFont(new Font("Vrinda", 0, 26));
		jButtonPoint.setRolloverEnabled(false);
		//Alpha Numerical Buttons
		for(int i=0; i<6; i++){
			jButtonAlphaNumerical[i]=new JButton();
			jButtonAlphaNumerical[i].setSize(45, 40);
			jButtonAlphaNumerical[i].setFont(new Font("Times New Roman", 1, 18));
			jButtonAlphaNumerical[i].setBorder(null);
			jButtonAlphaNumerical[i].setBackground(new Color(180, 170, 165));
		}
		jButtonAlphaNumerical[0].setLocation(220, 230); jButtonAlphaNumerical[0].setText("A");
		jButtonAlphaNumerical[1].setLocation(220, 270); jButtonAlphaNumerical[1].setText("B");
		jButtonAlphaNumerical[2].setLocation(267, 230); jButtonAlphaNumerical[2].setText("C");
		jButtonAlphaNumerical[3].setLocation(267, 270); jButtonAlphaNumerical[3].setText("D");
		jButtonAlphaNumerical[4].setLocation(267, 310); jButtonAlphaNumerical[4].setText("E");
		jButtonAlphaNumerical[5].setLocation(267, 350); jButtonAlphaNumerical[5].setText("F");
		//Operator Buttons
		for(int i=0; i<5; i++){
			jButtonOperator[i] = new JButton();
			jButtonOperator[i].setSize(45, 40);
			jButtonOperator[i].setFont(new Font("Calibri", 0, 17));
			jButtonOperator[i].setBackground(new Color(188, 188, 188));
			jButtonOperator[i].setBorder(null);
		}
		jButtonOperator[0].setText("+"); jButtonOperator[0].setLocation(173, 350);
		jButtonOperator[1].setText("-"); jButtonOperator[1].setLocation(173, 310);
		jButtonOperator[2].setText("x"); jButtonOperator[2].setLocation(173, 270);
		jButtonOperator[3].setText("/"); jButtonOperator[3].setLocation(173, 230);
		jButtonOperator[4].setText("="); jButtonOperator[4].setBounds(220, 310, 45, 80);
		jButtonOperator[4].setFont(new Font("Arial", 0, 19));
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i] = new JButton(); 
			jButtonMemory[i].setSize(50, 33);
			jButtonMemory[i].setFont(new Font("Arial", 0, 13));
			jButtonMemory[i].setBorder(null);
		}
		jButtonMemory[0].setText("M"); jButtonMemory[0].setLocation(10, 185);
		jButtonMemory[1].setText("MS"); jButtonMemory[1].setLocation(60, 185);
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i] = new JButton();
			jButtonClear[i].setSize(45, 33);
			jButtonClear[i].setFont(new Font("Vrinda", 0, 17));
			jButtonClear[i].setBorder(null);
		}
		jButtonClear[0].setText("C"); jButtonClear[0].setLocation(221, 185);
		jButtonClear[1].setText("AC"); jButtonClear[1].setLocation(266, 185);
		jButtonClear[2].setText("<B"); jButtonClear[2].setLocation(110, 185); jButtonClear[2].setSize(50, 33);
		//Display label
		for(int i=0; i<2; i++){
			jLabelDisplay[i] = new JLabel();
			jLabelDisplay[i].setSize(298, 45);
			jLabelDisplay[i].setHorizontalAlignment(4);
			jLabelDisplay[i].setFont(new Font("Calibri", 0, 18));
			jLabelDisplay[i].setBackground(new Color(100, 100, 90));
			jLabelDisplay[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		}
		jLabelDisplay[0].setLocation(10, 18);
		jLabelDisplay[1].setLocation(10, 63); jLabelDisplay[1].setSize(298, 60);
			jLabelDisplay[1].setFont(new Font("Calibri", 0, 22));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding toggle buttons
		for(int i=0; i<4; i++){
			add(jTButtonBase[i]);
		}
		//adding buttons
		for(int i=0; i<10; i++){
			add(jButtonNumerical[i]);
		}
		for(int i=0; i<6; i++){
			add(jButtonAlphaNumerical[i]);
		}
		add(jButtonPoint);
		for(int i=0; i<5; i++){
			add(jButtonOperator[i]);
		}
		for(int i=0; i<2; i++){
			add(jButtonMemory[i]);
		}
		for(int i=0; i<3; i++){
			add(jButtonClear[i]);
		}
		//adding display labels
		for(int i=0; i<2; i++){
			add(jLabelDisplay[i]);
		}
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		setBounds(0, 0, 327, 475);
		setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"BaseCalculatorBackground.jpg")));
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		BaseCalculatorGui gui = new BaseCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 332, 450);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Base Calculator Gui  BaseCalculatorGui    
    Base  Calculator  GUI 
  GUI
   
      Minhas  Kamal 
  Kamal
  J Toggle Button  JToggleButton j T Button Base  jTButtonBase J Button  JButton j Button Numerical  jButtonNumerical J Button  JButton j Button Alpha Numerical  jButtonAlphaNumerical J Button  JButton j Button Operator  jButtonOperator J Button  JButton j Button Memory  jButtonMemory J Button  JButton j Button Clear  jButtonClear J Button  JButton j Button Point  jButtonPoint J Label  JLabel j Label Display  jLabelDisplay 
------------------------------------------------------------------------
[base, calculator, gui, basecalculatorgui, minhas, kamal, toggle, button, jtogglebutton, jtbuttonbase, jbutton, numerical, jbuttonnumerical, alpha, jbuttonalphanumerical, operator, jbuttonoperator, memory, jbuttonmemory, clear, jbuttonclear, point, jbuttonpoint, label, jlabel, display, jlabeldisplay]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,operation
10 , 58
------------------------------------------------------------------------
	//mathematical operations
	public String operation(int base, String operand1, String operand2, String operator){
		String result="";
		if(!operand1.equals("") && !operator.equals("")){	//general case
			if(base==1){
				if(operator.equals("+")){
					result=binSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=binSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=binMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=binDivide(operand1, operand2);
				}
			}else if(base==2){
				if(operator.equals("+")){
					result=octSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=octSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=octMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=octDivide(operand1, operand2);
				}
			}else if(base==3){
				if(operator.equals("+")){
					result=decSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=decSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=decMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=decDivide(operand1, operand2);
				}
			}else if(base==4){
				if(operator.equals("+")){
					result=hexSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=hexSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=hexMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=hexDivide(operand1, operand2);
				}
			}
		}
		else result = operand2;
		return result;
	}

------------------------------------------------------------------------
 operation  mathematical  operations  general  case   String result operand 1  operand1 equals operator equals base 1 operator equals result bin Sum  binSum operand 1  operand1 operand 2  operand2 operator equals result bin Substract  binSubstract operand 1  operand1 operand 2  operand2 operator equals x operator equals result bin Multiply  binMultiply operand 1  operand1 operand 2  operand2 operator equals result bin Divide  binDivide operand 1  operand1 operand 2  operand2 base 2 operator equals result oct Sum  octSum operand 1  operand1 operand 2  operand2 operator equals result oct Substract  octSubstract operand 1  operand1 operand 2  operand2 operator equals x operator equals result oct Multiply  octMultiply operand 1  operand1 operand 2  operand2 operator equals result oct Divide  octDivide operand 1  operand1 operand 2  operand2 base 3 operator equals result dec Sum  decSum operand 1  operand1 operand 2  operand2 operator equals result dec Substract  decSubstract operand 1  operand1 operand 2  operand2 operator equals x operator equals result dec Multiply  decMultiply operand 1  operand1 operand 2  operand2 operator equals result dec Divide  decDivide operand 1  operand1 operand 2  operand2 base 4 operator equals result hex Sum  hexSum operand 1  operand1 operand 2  operand2 operator equals result hex Substract  hexSubstract operand 1  operand1 operand 2  operand2 operator equals x operator equals result hex Multiply  hexMultiply operand 1  operand1 operand 2  operand2 operator equals result hex Divide  hexDivide operand 1  operand1 operand 2  operand2 result operand 2  operand2 result 
------------------------------------------------------------------------
[operation, mathematical, operations, general, case, string, result, operand, operand1, equals, operator, base, bin, sum, binsum, operand2, substract, binsubstract, multiply, binmultiply, divide, bindivide, oct, octsum, octsubstract, octmultiply, octdivide, dec, decsum, decsubstract, decmultiply, decdivide, hex, hexsum, hexsubstract, hexmultiply, hexdivide]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,conversion
59 , 119
------------------------------------------------------------------------
	//base conversions
	public String conversion(int from, int to, String operand){
		String result="";
		if(from==1 && to==1){
			result=operand;
		}else if(from==1 && to==2){
			result=binToOctConversion(operand);
		}else if(from==1 && to==3){
			result=binToDecConversion(operand);
		}else if(from==1 && to==4){
			result=binToHexConversion(operand);
		}
		else if(from==2 && to==1){
			if(operand.length()<7){
				result=octToBinConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==2 && to==2){
			result=operand;
		}else if(from==2 && to==3){
			result=octToDecConversion(operand);
		}else if(from==2 && to==4){
			result=octToHexConversion(operand);
		}
		else if(from==3 && to==1){
			if(operand.length()<6){
				result=decToBinConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==3 && to==2){
			result=decToOctConversion(operand);
		}else if(from==3 && to==3){
			result=operand;
		}else if(from==3 && to==4){
			result=decToHexConversion(operand);
		}
		else if(from==4 && to==1){
			if(operand.length()<5){
				result=hexToBinConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==4 && to==2){
			if(operand.length()<10){
				result=hexToOctConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==4 && to==3){
			if(operand.length()<12){
				result=hexToDecConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==4 && to==4){
			result=operand;
		}
		return result;
	}

------------------------------------------------------------------------
 conversion  base  conversions   String result from 1 to 1 result operand from 1 to 2 result bin To Oct Conversion  binToOctConversion operand from 1 to 3 result bin To Dec Conversion  binToDecConversion operand from 1 to 4 result bin To Hex Conversion  binToHexConversion operand from 2 to 1 operand length 7 result oct To Bin Conversion  octToBinConversion operand Message Cannot convert 420 from 2 to 2 result operand from 2 to 3 result oct To Dec Conversion  octToDecConversion operand from 2 to 4 result oct To Hex Conversion  octToHexConversion operand from 3 to 1 operand length 6 result dec To Bin Conversion  decToBinConversion operand Message Cannot convert 420 from 3 to 2 result dec To Oct Conversion  decToOctConversion operand from 3 to 3 result operand from 3 to 4 result dec To Hex Conversion  decToHexConversion operand from 4 to 1 operand length 5 result hex To Bin Conversion  hexToBinConversion operand Message Cannot convert 420 from 4 to 2 operand length 10 result hex To Oct Conversion  hexToOctConversion operand Message Cannot convert 420 from 4 to 3 operand length 12 result hex To Dec Conversion  hexToDecConversion operand Message Cannot convert 420 from 4 to 4 result operand result 
------------------------------------------------------------------------
[conversion, base, conversions, string, result, operand, bin, oct, bintooctconversion, dec, bintodecconversion, hex, bintohexconversion, length, octtobinconversion, message, convert, octtodecconversion, octtohexconversion, dectobinconversion, dectooctconversion, dectohexconversion, hextobinconversion, hextooctconversion, hextodecconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decSum
120 , 123
------------------------------------------------------------------------
	/***Decemal***/													//***//
	private String decSum(String a, String b){
		return longToString(stringToLong(a)+stringToLong(b));
	}

------------------------------------------------------------------------
 dec Sum  decSum    long To String  longToString string To Long  stringToLong a string To Long  stringToLong b 
------------------------------------------------------------------------
[dec, sum, decsum, long, string, longtostring, stringtolong]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decSubstract
124 , 126
------------------------------------------------------------------------
	private String decSubstract(String a, String b){
		return longToString(stringToLong(a)-stringToLong(b));
	}

------------------------------------------------------------------------
 dec Substract  decSubstract   long To String  longToString string To Long  stringToLong a string To Long  stringToLong b 
------------------------------------------------------------------------
[dec, substract, decsubstract, long, string, longtostring, stringtolong]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decMultiply
127 , 129
------------------------------------------------------------------------
	private String decMultiply(String a, String b){
		return longToString(stringToLong(a)*stringToLong(b));
	}

------------------------------------------------------------------------
 dec Multiply  decMultiply   long To String  longToString string To Long  stringToLong a string To Long  stringToLong b 
------------------------------------------------------------------------
[dec, multiply, decmultiply, long, string, longtostring, stringtolong]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decDivide
130 , 132
------------------------------------------------------------------------
	private String decDivide(String a, String b){
		return longToString(stringToLong(a)/stringToLong(b));
	}

------------------------------------------------------------------------
 dec Divide  decDivide   long To String  longToString string To Long  stringToLong a string To Long  stringToLong b 
------------------------------------------------------------------------
[dec, divide, decdivide, long, string, longtostring, stringtolong]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decToBinConversion
133 , 141
------------------------------------------------------------------------
	private String decToBinConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result+ ((x%2) * exponent(10, i));
			x=x/2;
		}
		return longToString(result);
	}

------------------------------------------------------------------------
 dec To Bin Conversion  decToBinConversion   result 0 x string To Long  stringToLong a i 0 x 0 i result result x 2 exponent 10 i x x 2 long To String  longToString result 
------------------------------------------------------------------------
[dec, bin, conversion, dectobinconversion, result, string, long, stringtolong, exponent, longtostring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decToOctConversion
142 , 150
------------------------------------------------------------------------
	private String decToOctConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result+ ((x%8) * exponent(10, i));
			x=x/8;
		}
		return longToString(result);
	}

------------------------------------------------------------------------
 dec To Oct Conversion  decToOctConversion   result 0 x string To Long  stringToLong a i 0 x 0 i result result x 8 exponent 10 i x x 8 long To String  longToString result 
------------------------------------------------------------------------
[dec, oct, conversion, dectooctconversion, result, string, long, stringtolong, exponent, longtostring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,decToHexConversion
151 , 159
------------------------------------------------------------------------
	private String decToHexConversion(String a){
		String result="";
		long x = stringToLong(a);
		while(x!=0){
			result = intToChar((int) (x%16)) + result;
			x=x/16;
		}
		return result;
	}

------------------------------------------------------------------------
 dec To Hex Conversion  decToHexConversion   String result x string To Long  stringToLong a x 0 result int To Char  intToChar x 16 result x x 16 result 
------------------------------------------------------------------------
[dec, hex, conversion, dectohexconversion, string, result, long, stringtolong, int, char, inttochar]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binSum
160 , 166
------------------------------------------------------------------------
	/***Binary***/													//***//
	private String binSum(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decSum(dec1, dec2);
		return decToBinConversion(r);
	}

------------------------------------------------------------------------
 bin Sum  binSum    String dec 1  dec1 bin To Dec Conversion  binToDecConversion a dec 2  dec2 bin To Dec Conversion  binToDecConversion b r dec Sum  decSum dec 1  dec1 dec 2  dec2 dec To Bin Conversion  decToBinConversion r 
------------------------------------------------------------------------
[bin, sum, binsum, string, dec, dec1, conversion, bintodecconversion, dec2, decsum, dectobinconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binSubstract
167 , 172
------------------------------------------------------------------------
	private String binSubstract(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decSubstract(dec1, dec2);
		return decToBinConversion(r);	
	}

------------------------------------------------------------------------
 bin Substract  binSubstract   String dec 1  dec1 bin To Dec Conversion  binToDecConversion a dec 2  dec2 bin To Dec Conversion  binToDecConversion b r dec Substract  decSubstract dec 1  dec1 dec 2  dec2 dec To Bin Conversion  decToBinConversion r 
------------------------------------------------------------------------
[bin, substract, binsubstract, string, dec, dec1, conversion, bintodecconversion, dec2, decsubstract, dectobinconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binMultiply
173 , 178
------------------------------------------------------------------------
	private String binMultiply(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decMultiply(dec1, dec2);
		return decToBinConversion(r);
	}

------------------------------------------------------------------------
 bin Multiply  binMultiply   String dec 1  dec1 bin To Dec Conversion  binToDecConversion a dec 2  dec2 bin To Dec Conversion  binToDecConversion b r dec Multiply  decMultiply dec 1  dec1 dec 2  dec2 dec To Bin Conversion  decToBinConversion r 
------------------------------------------------------------------------
[bin, multiply, binmultiply, string, dec, dec1, conversion, bintodecconversion, dec2, decmultiply, dectobinconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binDivide
179 , 184
------------------------------------------------------------------------
	private String binDivide(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decDivide(dec1, dec2);
		return decToBinConversion(r);
	}

------------------------------------------------------------------------
 bin Divide  binDivide   String dec 1  dec1 bin To Dec Conversion  binToDecConversion a dec 2  dec2 bin To Dec Conversion  binToDecConversion b r dec Divide  decDivide dec 1  dec1 dec 2  dec2 dec To Bin Conversion  decToBinConversion r 
------------------------------------------------------------------------
[bin, divide, bindivide, string, dec, dec1, conversion, bintodecconversion, dec2, decdivide, dectobinconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binToDecConversion
185 , 193
------------------------------------------------------------------------
	private String binToDecConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result + ((x%10) * exponent(2, i));
			x=x/10;
		}
		return longToString(result);
	}

------------------------------------------------------------------------
 bin To Dec Conversion  binToDecConversion   result 0 x string To Long  stringToLong a i 0 x 0 i result result x 10 exponent 2 i x x 10 long To String  longToString result 
------------------------------------------------------------------------
[bin, dec, conversion, bintodecconversion, result, string, long, stringtolong, exponent, longtostring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binToOctConversion
194 , 197
------------------------------------------------------------------------
	private String binToOctConversion(String a){
		String str = binToDecConversion(a);
		return decToOctConversion(str);
	}

------------------------------------------------------------------------
 bin To Oct Conversion  binToOctConversion   String str bin To Dec Conversion  binToDecConversion a dec To Oct Conversion  decToOctConversion str 
------------------------------------------------------------------------
[bin, oct, conversion, bintooctconversion, string, str, dec, bintodecconversion, dectooctconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,binToHexConversion
198 , 201
------------------------------------------------------------------------
	private String binToHexConversion(String a){
		String str = binToDecConversion(a);
		return decToHexConversion(str);
	}

------------------------------------------------------------------------
 bin To Hex Conversion  binToHexConversion   String str bin To Dec Conversion  binToDecConversion a dec To Hex Conversion  decToHexConversion str 
------------------------------------------------------------------------
[bin, hex, conversion, bintohexconversion, string, str, dec, bintodecconversion, dectohexconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octSum
202 , 208
------------------------------------------------------------------------
	/***Octal***/													//***//
	private String octSum(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decSum(dec1, dec2);
		return decToOctConversion(r);
	}

------------------------------------------------------------------------
 oct Sum  octSum    String dec 1  dec1 oct To Dec Conversion  octToDecConversion a dec 2  dec2 oct To Dec Conversion  octToDecConversion b r dec Sum  decSum dec 1  dec1 dec 2  dec2 dec To Oct Conversion  decToOctConversion r 
------------------------------------------------------------------------
[oct, sum, octsum, string, dec, dec1, conversion, octtodecconversion, dec2, decsum, dectooctconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octSubstract
209 , 214
------------------------------------------------------------------------
	private String octSubstract(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decSubstract(dec1, dec2);
		return decToOctConversion(r);	
	}

------------------------------------------------------------------------
 oct Substract  octSubstract   String dec 1  dec1 oct To Dec Conversion  octToDecConversion a dec 2  dec2 oct To Dec Conversion  octToDecConversion b r dec Substract  decSubstract dec 1  dec1 dec 2  dec2 dec To Oct Conversion  decToOctConversion r 
------------------------------------------------------------------------
[oct, substract, octsubstract, string, dec, dec1, conversion, octtodecconversion, dec2, decsubstract, dectooctconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octMultiply
215 , 220
------------------------------------------------------------------------
	private String octMultiply(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decMultiply(dec1, dec2);
		return decToOctConversion(r);
	}

------------------------------------------------------------------------
 oct Multiply  octMultiply   String dec 1  dec1 oct To Dec Conversion  octToDecConversion a dec 2  dec2 oct To Dec Conversion  octToDecConversion b r dec Multiply  decMultiply dec 1  dec1 dec 2  dec2 dec To Oct Conversion  decToOctConversion r 
------------------------------------------------------------------------
[oct, multiply, octmultiply, string, dec, dec1, conversion, octtodecconversion, dec2, decmultiply, dectooctconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octDivide
221 , 226
------------------------------------------------------------------------
	private String octDivide(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decDivide(dec1, dec2);
		return decToOctConversion(r);
	}

------------------------------------------------------------------------
 oct Divide  octDivide   String dec 1  dec1 oct To Dec Conversion  octToDecConversion a dec 2  dec2 oct To Dec Conversion  octToDecConversion b r dec Divide  decDivide dec 1  dec1 dec 2  dec2 dec To Oct Conversion  decToOctConversion r 
------------------------------------------------------------------------
[oct, divide, octdivide, string, dec, dec1, conversion, octtodecconversion, dec2, decdivide, dectooctconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octToDecConversion
227 , 235
------------------------------------------------------------------------
	private String octToDecConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result + ((x%10) * exponent(8, i));
			x=x/10;
		}
		return longToString(result);
	}

------------------------------------------------------------------------
 oct To Dec Conversion  octToDecConversion   result 0 x string To Long  stringToLong a i 0 x 0 i result result x 10 exponent 8 i x x 10 long To String  longToString result 
------------------------------------------------------------------------
[oct, dec, conversion, octtodecconversion, result, string, long, stringtolong, exponent, longtostring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octToBinConversion
236 , 239
------------------------------------------------------------------------
	private String octToBinConversion(String a){
		String str = octToDecConversion(a);
		return decToBinConversion(str);
	}

------------------------------------------------------------------------
 oct To Bin Conversion  octToBinConversion   String str oct To Dec Conversion  octToDecConversion a dec To Bin Conversion  decToBinConversion str 
------------------------------------------------------------------------
[oct, bin, conversion, octtobinconversion, string, str, dec, octtodecconversion, dectobinconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,octToHexConversion
240 , 243
------------------------------------------------------------------------
	private String octToHexConversion(String a){
		String str = octToDecConversion(a);
		return decToHexConversion(str);
	}

------------------------------------------------------------------------
 oct To Hex Conversion  octToHexConversion   String str oct To Dec Conversion  octToDecConversion a dec To Hex Conversion  decToHexConversion str 
------------------------------------------------------------------------
[oct, hex, conversion, octtohexconversion, string, str, dec, octtodecconversion, dectohexconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexSum
244 , 250
------------------------------------------------------------------------
	/***Hexadecimal***/													//***//
	private String hexSum(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decSum(dec1, dec2);
		return decToHexConversion(r);
	}

------------------------------------------------------------------------
 hex Sum  hexSum    String dec 1  dec1 hex To Dec Conversion  hexToDecConversion a dec 2  dec2 hex To Dec Conversion  hexToDecConversion b r dec Sum  decSum dec 1  dec1 dec 2  dec2 dec To Hex Conversion  decToHexConversion r 
------------------------------------------------------------------------
[hex, sum, hexsum, string, dec, dec1, conversion, hextodecconversion, dec2, decsum, dectohexconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexSubstract
251 , 256
------------------------------------------------------------------------
	private String hexSubstract(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decSubstract(dec1, dec2);
		return decToHexConversion(r);	
	}

------------------------------------------------------------------------
 hex Substract  hexSubstract   String dec 1  dec1 hex To Dec Conversion  hexToDecConversion a dec 2  dec2 hex To Dec Conversion  hexToDecConversion b r dec Substract  decSubstract dec 1  dec1 dec 2  dec2 dec To Hex Conversion  decToHexConversion r 
------------------------------------------------------------------------
[hex, substract, hexsubstract, string, dec, dec1, conversion, hextodecconversion, dec2, decsubstract, dectohexconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexMultiply
257 , 262
------------------------------------------------------------------------
	private String hexMultiply(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decMultiply(dec1, dec2);
		return decToHexConversion(r);
	}

------------------------------------------------------------------------
 hex Multiply  hexMultiply   String dec 1  dec1 hex To Dec Conversion  hexToDecConversion a dec 2  dec2 hex To Dec Conversion  hexToDecConversion b r dec Multiply  decMultiply dec 1  dec1 dec 2  dec2 dec To Hex Conversion  decToHexConversion r 
------------------------------------------------------------------------
[hex, multiply, hexmultiply, string, dec, dec1, conversion, hextodecconversion, dec2, decmultiply, dectohexconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexDivide
263 , 268
------------------------------------------------------------------------
	private String hexDivide(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decDivide(dec1, dec2);
		return decToHexConversion(r);
	}

------------------------------------------------------------------------
 hex Divide  hexDivide   String dec 1  dec1 hex To Dec Conversion  hexToDecConversion a dec 2  dec2 hex To Dec Conversion  hexToDecConversion b r dec Divide  decDivide dec 1  dec1 dec 2  dec2 dec To Hex Conversion  decToHexConversion r 
------------------------------------------------------------------------
[hex, divide, hexdivide, string, dec, dec1, conversion, hextodecconversion, dec2, decdivide, dectohexconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexToDecConversion
269 , 276
------------------------------------------------------------------------
	private String hexToDecConversion(String a){
		long result=0;
		for(int i=0; i<a.length(); i++){
			int pos = a.length()-i-1;
			result = result + (charToInt(a.charAt(pos)) * exponent(16, i));
		}
		return longToString(result);
	}

------------------------------------------------------------------------
 hex To Dec Conversion  hexToDecConversion   result 0 i 0 i a length i pos a length i 1 result result char To Int  charToInt a char At  charAt pos exponent 16 i long To String  longToString result 
------------------------------------------------------------------------
[hex, dec, conversion, hextodecconversion, result, length, pos, char, int, chartoint, charat, exponent, long, string, longtostring]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexToBinConversion
277 , 280
------------------------------------------------------------------------
	private String hexToBinConversion(String a){
		String str = hexToDecConversion(a);
		return decToBinConversion(str);
	}

------------------------------------------------------------------------
 hex To Bin Conversion  hexToBinConversion   String str hex To Dec Conversion  hexToDecConversion a dec To Bin Conversion  decToBinConversion str 
------------------------------------------------------------------------
[hex, bin, conversion, hextobinconversion, string, str, dec, hextodecconversion, dectobinconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,hexToOctConversion
281 , 284
------------------------------------------------------------------------
	private String hexToOctConversion(String a){
		String str = hexToDecConversion(a);
		return decToOctConversion(str);
	}

------------------------------------------------------------------------
 hex To Oct Conversion  hexToOctConversion   String str hex To Dec Conversion  hexToDecConversion a dec To Oct Conversion  decToOctConversion str 
------------------------------------------------------------------------
[hex, oct, conversion, hextooctconversion, string, str, dec, hextodecconversion, dectooctconversion]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,stringToLong
285 , 293
------------------------------------------------------------------------
	/***Auxiliary Methods***/													//***//
	private long stringToLong(String str){
		long l=0;
		for(int i=0; i<str.length(); i++){
			int pos = str.length()-i-1;
			l = l + (charToInt(str.charAt(pos)) * exponent(10, i));
		}
		return l;
	}

------------------------------------------------------------------------
 string To Long  stringToLong    l 0 i 0 i str length i pos str length i 1 l l char To Int  charToInt str char At  charAt pos exponent 10 i l 
------------------------------------------------------------------------
[string, long, stringtolong, str, length, pos, char, int, chartoint, charat, exponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,longToString
294 , 302
------------------------------------------------------------------------
	private String longToString(long l){
		String str="";
		while(l!=0){
			int i = (int) (l%10);
			str = intToChar(i) + str;
			l=l/10;
		}
		return str;
	}

------------------------------------------------------------------------
 long To String  longToString   String str l 0 i l 10 str int To Char  intToChar i str l l 10 str 
------------------------------------------------------------------------
[long, string, longtostring, str, int, char, inttochar]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,charToInt
303 , 314
------------------------------------------------------------------------
	/**/
	private int charToInt(char c){
		int i=0;
		if(c=='F') i=15;
		else if(c=='E') i=14;
		else if(c=='D') i=13;
		else if(c=='C') i=12;
		else if(c=='B') i=11;
		else if(c=='A') i=10;
		else i=c-48;
		return i;
	}

------------------------------------------------------------------------
 char To Int  charToInt   i 0 c F i 15 c E i 14 c D i 13 c C i 12 c B i 11 c A i 10 i c 48 i 
------------------------------------------------------------------------
[char, int, chartoint]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,intToChar
315 , 325
------------------------------------------------------------------------
	private char intToChar(int i){
		char c=0;
		if(i==15) c='F';
		else if(i==14) c='E';
		else if(i==13) c='D';
		else if(i==12) c='C';
		else if(i==11) c='B';
		else if(i==10) c='A'; 
		else c=(char) (i+48);
		return c;
	}

------------------------------------------------------------------------
 int To Char  intToChar   c 0 i 15 c F i 14 c E i 13 c D i 12 c C i 11 c B i 10 c A c i 48 c 
------------------------------------------------------------------------
[int, char, inttochar]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,exponent
326 , 332
------------------------------------------------------------------------
	/**/
	private long exponent(long a, long b){
		long i=1;
		for( ; b>0; b--)
			i=i*a;
		return i;
	}

------------------------------------------------------------------------
 exponent   i 1 b 0 b i i a i 
------------------------------------------------------------------------
[exponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/baseCalculator/BaseCalculatorOperation.java,BaseCalculatorOperation
8 , 333
------------------------------------------------------------------------
public class BaseCalculatorOperation {
	//**principle method**//
	//mathematical operations
	public String operation(int base, String operand1, String operand2, String operator){
		String result="";
		if(!operand1.equals("") && !operator.equals("")){	//general case
			if(base==1){
				if(operator.equals("+")){
					result=binSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=binSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=binMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=binDivide(operand1, operand2);
				}
			}else if(base==2){
				if(operator.equals("+")){
					result=octSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=octSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=octMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=octDivide(operand1, operand2);
				}
			}else if(base==3){
				if(operator.equals("+")){
					result=decSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=decSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=decMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=decDivide(operand1, operand2);
				}
			}else if(base==4){
				if(operator.equals("+")){
					result=hexSum(operand1, operand2);
				}else if(operator.equals("-")){
					result=hexSubstract(operand1, operand2);
				}else if(operator.equals("x") || operator.equals("*")){
					result=hexMultiply(operand1, operand2);
				}else if(operator.equals("/")){
					result=hexDivide(operand1, operand2);
				}
			}
		}
		else result = operand2;
		return result;
	}
	//base conversions
	public String conversion(int from, int to, String operand){
		String result="";
		if(from==1 && to==1){
			result=operand;
		}else if(from==1 && to==2){
			result=binToOctConversion(operand);
		}else if(from==1 && to==3){
			result=binToDecConversion(operand);
		}else if(from==1 && to==4){
			result=binToHexConversion(operand);
		}
		else if(from==2 && to==1){
			if(operand.length()<7){
				result=octToBinConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==2 && to==2){
			result=operand;
		}else if(from==2 && to==3){
			result=octToDecConversion(operand);
		}else if(from==2 && to==4){
			result=octToHexConversion(operand);
		}
		else if(from==3 && to==1){
			if(operand.length()<6){
				result=decToBinConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==3 && to==2){
			result=decToOctConversion(operand);
		}else if(from==3 && to==3){
			result=operand;
		}else if(from==3 && to==4){
			result=decToHexConversion(operand);
		}
		else if(from==4 && to==1){
			if(operand.length()<5){
				result=hexToBinConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==4 && to==2){
			if(operand.length()<10){
				result=hexToOctConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==4 && to==3){
			if(operand.length()<12){
				result=hexToDecConversion(operand);
			}else{
				new Message("Cannot convert!", 420);
			}
		}else if(from==4 && to==4){
			result=operand;
		}
		return result;
	}
	/***Decemal***/													//***//
	private String decSum(String a, String b){
		return longToString(stringToLong(a)+stringToLong(b));
	}
	private String decSubstract(String a, String b){
		return longToString(stringToLong(a)-stringToLong(b));
	}
	private String decMultiply(String a, String b){
		return longToString(stringToLong(a)*stringToLong(b));
	}
	private String decDivide(String a, String b){
		return longToString(stringToLong(a)/stringToLong(b));
	}
	private String decToBinConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result+ ((x%2) * exponent(10, i));
			x=x/2;
		}
		return longToString(result);
	}
	private String decToOctConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result+ ((x%8) * exponent(10, i));
			x=x/8;
		}
		return longToString(result);
	}
	private String decToHexConversion(String a){
		String result="";
		long x = stringToLong(a);
		while(x!=0){
			result = intToChar((int) (x%16)) + result;
			x=x/16;
		}
		return result;
	}
	/***Binary***/													//***//
	private String binSum(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decSum(dec1, dec2);
		return decToBinConversion(r);
	}
	private String binSubstract(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decSubstract(dec1, dec2);
		return decToBinConversion(r);	
	}
	private String binMultiply(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decMultiply(dec1, dec2);
		return decToBinConversion(r);
	}
	private String binDivide(String a, String b){
		String dec1=binToDecConversion(a),
			   dec2=binToDecConversion(b),
			   r=decDivide(dec1, dec2);
		return decToBinConversion(r);
	}
	private String binToDecConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result + ((x%10) * exponent(2, i));
			x=x/10;
		}
		return longToString(result);
	}
	private String binToOctConversion(String a){
		String str = binToDecConversion(a);
		return decToOctConversion(str);
	}
	private String binToHexConversion(String a){
		String str = binToDecConversion(a);
		return decToHexConversion(str);
	}
	/***Octal***/													//***//
	private String octSum(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decSum(dec1, dec2);
		return decToOctConversion(r);
	}
	private String octSubstract(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decSubstract(dec1, dec2);
		return decToOctConversion(r);	
	}
	private String octMultiply(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decMultiply(dec1, dec2);
		return decToOctConversion(r);
	}
	private String octDivide(String a, String b){
		String dec1=octToDecConversion(a),
			   dec2=octToDecConversion(b),
			   r=decDivide(dec1, dec2);
		return decToOctConversion(r);
	}
	private String octToDecConversion(String a){
		long result=0;
		long x = stringToLong(a);
		for(int i=0; x!=0; i++){
			result = result + ((x%10) * exponent(8, i));
			x=x/10;
		}
		return longToString(result);
	}
	private String octToBinConversion(String a){
		String str = octToDecConversion(a);
		return decToBinConversion(str);
	}
	private String octToHexConversion(String a){
		String str = octToDecConversion(a);
		return decToHexConversion(str);
	}
	/***Hexadecimal***/													//***//
	private String hexSum(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decSum(dec1, dec2);
		return decToHexConversion(r);
	}
	private String hexSubstract(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decSubstract(dec1, dec2);
		return decToHexConversion(r);	
	}
	private String hexMultiply(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decMultiply(dec1, dec2);
		return decToHexConversion(r);
	}
	private String hexDivide(String a, String b){
		String dec1=hexToDecConversion(a),
			   dec2=hexToDecConversion(b),
			   r=decDivide(dec1, dec2);
		return decToHexConversion(r);
	}
	private String hexToDecConversion(String a){
		long result=0;
		for(int i=0; i<a.length(); i++){
			int pos = a.length()-i-1;
			result = result + (charToInt(a.charAt(pos)) * exponent(16, i));
		}
		return longToString(result);
	}
	private String hexToBinConversion(String a){
		String str = hexToDecConversion(a);
		return decToBinConversion(str);
	}
	private String hexToOctConversion(String a){
		String str = hexToDecConversion(a);
		return decToOctConversion(str);
	}
	/***Auxiliary Methods***/													//***//
	private long stringToLong(String str){
		long l=0;
		for(int i=0; i<str.length(); i++){
			int pos = str.length()-i-1;
			l = l + (charToInt(str.charAt(pos)) * exponent(10, i));
		}
		return l;
	}
	private String longToString(long l){
		String str="";
		while(l!=0){
			int i = (int) (l%10);
			str = intToChar(i) + str;
			l=l/10;
		}
		return str;
	}
	/**/
	private int charToInt(char c){
		int i=0;
		if(c=='F') i=15;
		else if(c=='E') i=14;
		else if(c=='D') i=13;
		else if(c=='C') i=12;
		else if(c=='B') i=11;
		else if(c=='A') i=10;
		else i=c-48;
		return i;
	}
	private char intToChar(int i){
		char c=0;
		if(i==15) c='F';
		else if(i==14) c='E';
		else if(i==13) c='D';
		else if(i==12) c='C';
		else if(i==11) c='B';
		else if(i==10) c='A'; 
		else c=(char) (i+48);
		return c;
	}
	/**/
	private long exponent(long a, long b){
		long i=1;
		for( ; b>0; b--)
			i=i*a;
		return i;
	}
}

------------------------------------------------------------------------
 Base Calculator Operation  BaseCalculatorOperation   
------------------------------------------------------------------------
[base, calculator, operation, basecalculatoroperation]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculator.java,initialComponent
42 , 100
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings({ "deprecation", "serial" })
	private void initialComponent() {
		// GUI Initialization
		dateCalcGui = new DateCalculatorGui();
		//operation object
		dcOperation = new DateCalculatorOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"DateCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
    	jTFieldDay = dateCalcGui.jTFieldDay; 
    	jTFieldMonth = dateCalcGui.jTFieldMonth; 
    	jTFieldYear = dateCalcGui.jTFieldYear;
    	jButtonCalculate = dateCalcGui.jButtonCalculate;
    	jTFieldOutput = dateCalcGui.jTFieldOutput;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
    	jButtonCalculate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonCalculateActionPerformed(evt);
            }
        });
    	jButtonCalculate.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
    	jButtonCalculate.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonCalculateActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
    	/**
		 * Additional Work
		**/
    	Date date=new Date();
    	String 	d="",
    			m="";
    	if(date.getDate()<10) d="0";
    	if(date.getMonth()<9) m="0";
    	jTFieldDay[1].setText(d+date.getDate());
    	jTFieldMonth[1].setText(m+(date.getMonth()+1));
    	jTFieldYear[1].setText(""+(date.getYear()+1900));
		//Ends
    	//Setting Criterion of the Frame//
    	super.gui.add(dateCalcGui);
    	super.gui.setTitle("Date Calculator");
    	super.gui.setBounds(230, 115, 300, 400);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			  End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  Ends  GUI  Initialization  operation  object  instruction    Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  
		   Additional  Work 
		  Work
		  date Calc Gui  dateCalcGui Date Calculator Gui  DateCalculatorGui dc Operation  dcOperation Date Calculator Operation  DateCalculatorOperation instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Date Calculator Instruction  DateCalculatorInstruction txt Exception e instruction EMPTY j T Field Day  jTFieldDay date Calc Gui  dateCalcGui j T Field Day  jTFieldDay j T Field Month  jTFieldMonth date Calc Gui  dateCalcGui j T Field Month  jTFieldMonth j T Field Year  jTFieldYear date Calc Gui  dateCalcGui j T Field Year  jTFieldYear j Button Calculate  jButtonCalculate date Calc Gui  dateCalcGui j Button Calculate  jButtonCalculate j T Field Output  jTFieldOutput date Calc Gui  dateCalcGui j T Field Output  jTFieldOutput j Button Calculate  jButtonCalculate add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Calculate Action Performed  jButtonCalculateActionPerformed evt j Button Calculate  jButtonCalculate get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button Calculate  jButtonCalculate get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Calculate Action Performed  jButtonCalculateActionPerformed evt Additional Work Date date Date String d m date get Date  getDate 10 d 0 date get Month  getMonth 9 m 0 j T Field Day  jTFieldDay 1 set Text  setText d date get Date  getDate j T Field Month  jTFieldMonth 1 set Text  setText m date get Month  getMonth 1 j T Field Year  jTFieldYear 1 set Text  setText date get Year  getYear 1900 gui add date Calc Gui  dateCalcGui gui set Title  setTitle Date Calculator gui set Bounds  setBounds 230 115 300 400 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, ends, gui, initialization, operation, object, instruction, setting, criterion, frame, method, initializing, variables, placing, specific, space, specifies, criteria, main, additional, work, date, calc, datecalcgui, calculator, datecalculatorgui, dc, dcoperation, datecalculatoroperation, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, datecalculatorinstruction, txt, exception, empty, field, day, jtfieldday, month, jtfieldmonth, year, jtfieldyear, button, calculate, jbuttoncalculate, output, jtfieldoutput, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttoncalculateactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction, string, getdate, getmonth, set, text, settext, getyear, title, settitle, bounds, setbounds]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculator.java,jButtonCalculateActionPerformed
103 , 119
------------------------------------------------------------------------
	//**
	private void jButtonCalculateActionPerformed(ActionEvent evt){
    	int day1, month1, year1, day2, month2, year2;
    	String difference="";
    	try{
	    	day1=Integer.parseInt(jTFieldDay[0].getText());
	    	month1=Integer.parseInt(jTFieldMonth[0].getText());
	    	year1=Integer.parseInt(jTFieldYear[0].getText());
	    	day2=Integer.parseInt(jTFieldDay[1].getText());
	    	month2=Integer.parseInt(jTFieldMonth[1].getText());
	    	year2=Integer.parseInt(jTFieldYear[1].getText());
	    	difference = dcOperation.Date(day1, month1, year1, day2, month2, year2);
    	}catch(Exception e){
    		new Message("Wrong Input! \nUse numbers only.", 420);
    	}
    	jTFieldOutput.setText(difference);
    }

------------------------------------------------------------------------
 j Button Calculate Action Performed  jButtonCalculateActionPerformed    day 1  day1 month 1  month1 year 1  year1 day 2  day2 month 2  month2 year 2  year2 String difference day 1  day1 Integer parse Int  parseInt j T Field Day  jTFieldDay 0 get Text  getText month 1  month1 Integer parse Int  parseInt j T Field Month  jTFieldMonth 0 get Text  getText year 1  year1 Integer parse Int  parseInt j T Field Year  jTFieldYear 0 get Text  getText day 2  day2 Integer parse Int  parseInt j T Field Day  jTFieldDay 1 get Text  getText month 2  month2 Integer parse Int  parseInt j T Field Month  jTFieldMonth 1 get Text  getText year 2  year2 Integer parse Int  parseInt j T Field Year  jTFieldYear 1 get Text  getText difference dc Operation  dcOperation Date day 1  day1 month 1  month1 year 1  year1 day 2  day2 month 2  month2 year 2  year2 Exception e Message Wrong Input n Use  nUse numbers only 420 j T Field Output  jTFieldOutput set Text  setText difference 
------------------------------------------------------------------------
[button, calculate, action, performed, jbuttoncalculateactionperformed, day, day1, month, month1, year, year1, day2, month2, year2, string, difference, integer, parse, int, parseint, field, jtfieldday, text, gettext, jtfieldmonth, jtfieldyear, dc, operation, dcoperation, date, exception, message, wrong, input, nuse, numbers, output, jtfieldoutput, set, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculator.java,main
129 , 139
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new DateCalculator();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Date Calculator  DateCalculator 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, date, calculator, datecalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculator.java,DateCalculator
37 , 41
------------------------------------------------------------------------
	/***##Constructor##***/
	public DateCalculator() {
		initialComponent();
		super.jCBItemMode[5].setSelected(true);
	}

------------------------------------------------------------------------
 Date Calculator  DateCalculator   Constructor  initial Component  initialComponent j CB Item Mode  jCBItemMode 5 set Selected  setSelected 
------------------------------------------------------------------------
[date, calculator, datecalculator, constructor, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, selected, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculator.java,DateCalculator
20 , 140
------------------------------------------------------------------------
/**
 * A Date Calculator
 * 
 * @author Minhas Kamal
 */
public class DateCalculator extends UltimateCalculatorFrame{
	// GUI Declaration
	private DateCalculatorGui dateCalcGui;
	//operation object
	private DateCalculatorOperation dcOperation;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JTextField[] jTFieldDay, jTFieldMonth, jTFieldYear;
	private JButton jButtonCalculate;
	private JTextField jTFieldOutput;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public DateCalculator() {
		initialComponent();
		super.jCBItemMode[5].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings({ "deprecation", "serial" })
	private void initialComponent() {
		// GUI Initialization
		dateCalcGui = new DateCalculatorGui();
		//operation object
		dcOperation = new DateCalculatorOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"DateCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
    	jTFieldDay = dateCalcGui.jTFieldDay; 
    	jTFieldMonth = dateCalcGui.jTFieldMonth; 
    	jTFieldYear = dateCalcGui.jTFieldYear;
    	jButtonCalculate = dateCalcGui.jButtonCalculate;
    	jTFieldOutput = dateCalcGui.jTFieldOutput;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
    	jButtonCalculate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonCalculateActionPerformed(evt);
            }
        });
    	jButtonCalculate.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
    	jButtonCalculate.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonCalculateActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
    	/**
		 * Additional Work
		**/
    	Date date=new Date();
    	String 	d="",
    			m="";
    	if(date.getDate()<10) d="0";
    	if(date.getMonth()<9) m="0";
    	jTFieldDay[1].setText(d+date.getDate());
    	jTFieldMonth[1].setText(m+(date.getMonth()+1));
    	jTFieldYear[1].setText(""+(date.getYear()+1900));
		//Ends
    	//Setting Criterion of the Frame//
    	super.gui.add(dateCalcGui);
    	super.gui.setTitle("Date Calculator");
    	super.gui.setBounds(230, 115, 300, 400);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	private void jButtonCalculateActionPerformed(ActionEvent evt){
    	int day1, month1, year1, day2, month2, year2;
    	String difference="";
    	try{
	    	day1=Integer.parseInt(jTFieldDay[0].getText());
	    	month1=Integer.parseInt(jTFieldMonth[0].getText());
	    	year1=Integer.parseInt(jTFieldYear[0].getText());
	    	day2=Integer.parseInt(jTFieldDay[1].getText());
	    	month2=Integer.parseInt(jTFieldMonth[1].getText());
	    	year2=Integer.parseInt(jTFieldYear[1].getText());
	    	difference = dcOperation.Date(day1, month1, year1, day2, month2, year2);
    	}catch(Exception e){
    		new Message("Wrong Input! \nUse numbers only.", 420);
    	}
    	jTFieldOutput.setText(difference);
    }
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new DateCalculator();
	}
}

------------------------------------------------------------------------
 Date Calculator  DateCalculator  GUI  Declaration  operation  object    
    Date  Calculator 
  Calculator
   
      Minhas  Kamal 
  Kamal
  Date Calculator Gui  DateCalculatorGui date Calc Gui  dateCalcGui Date Calculator Operation  DateCalculatorOperation dc Operation  dcOperation J Text Field  JTextField j T Field Day  jTFieldDay j T Field Month  jTFieldMonth j T Field Year  jTFieldYear J Button  JButton j Button Calculate  jButtonCalculate J Text Field  JTextField j T Field Output  jTFieldOutput 
------------------------------------------------------------------------
[date, calculator, datecalculator, gui, declaration, operation, object, minhas, kamal, datecalculatorgui, calc, datecalcgui, datecalculatoroperation, dc, dcoperation, text, field, jtextfield, day, jtfieldday, month, jtfieldmonth, year, jtfieldyear, button, jbutton, calculate, jbuttoncalculate, output, jtfieldoutput]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorGui.java,initialComponent
36 , 106
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
    	jLabelFT=new JLabel[2];
    	jTFieldDay=new JTextField[2]; jTFieldMonth=new JTextField[2]; jTFieldYear=new JTextField[2];
    	jButtonCalculate=new JButton();
    	jLabelOutput=new JLabel();
    	jTFieldOutput=new JTextField();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
    	//input space
    	for(int i=0; i<2; i++){
    		jLabelFT[i]=new JLabel();
    		jLabelFT[i].setBounds(10, 45+i*75, 275, 40);
        	jLabelFT[i].setFont(new Font("Calibri", 0, 18));
        	jLabelFT[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    		jTFieldDay[i]=new JTextField();
        	jTFieldDay[i].setFont(new Font("Calibri", 0, 20));
    		jTFieldDay[i].setBounds(90, 48+i*75, 40, 35);
    		jTFieldDay[i].setBackground(new Color(244, 243, 241));
    		jTFieldMonth[i]=new JTextField();
        	jTFieldMonth[i].setFont(new Font("Calibri", 0, 20));
        	jTFieldMonth[i].setBounds(145, 48+i*75, 40, 35);
    		jTFieldMonth[i].setBackground(new Color(244, 243, 241));
    		jTFieldYear[i]=new JTextField();
        	jTFieldYear[i].setFont(new Font("Calibri", 0, 20));
        	jTFieldYear[i].setBounds(200, 48+i*75, 80, 35);
    		jTFieldYear[i].setBackground(new Color(244, 243, 241));
    	}
    	jLabelFT[0].setText(" From                    -            -");
    	jLabelFT[1].setText(" To                         -            -");
    	//button
    	jButtonCalculate.setText("Calculate");
    	jButtonCalculate.setBounds(200, 190, 80, 30);
    	jButtonCalculate.setBackground(new Color(244, 243, 241));
    	//output
    	jLabelOutput.setText(" Difference  ");
    	jLabelOutput.setBounds(10, 255, 275, 42);
    	jLabelOutput.setFont(new Font("Calibri", 0, 17));
		jLabelOutput.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    	jTFieldOutput.setText("");
    	jTFieldOutput.setBounds(90, 257, 193, 39);
    	jTFieldOutput.setEditable(false);
    	jTFieldOutput.setFont(new Font("Calibri", 0, 17));
		jTFieldOutput.setBackground(new Color(234, 233, 231));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		for(int i=0; i<2; i++){
    		add(jLabelFT[i]);
    		add(jTFieldDay[i]);
    		add(jTFieldMonth[i]);    		
    		add(jTFieldYear[i]);    		
    	}
    	add(jButtonCalculate);
    	add(jLabelOutput);
    	add(jTFieldOutput);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
    	setBounds(0, 0, 300, 400);
    	setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
    			"DateCalculatorBackground.jpg")));
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										   End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	  End   Adding  Components  															 _______ A _______  _______A_______   input  space  button  output   Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Label FT  jLabelFT J Label  JLabel 2 j T Field Day  jTFieldDay J Text Field  JTextField 2 j T Field Month  jTFieldMonth J Text Field  JTextField 2 j T Field Year  jTFieldYear J Text Field  JTextField 2 j Button Calculate  jButtonCalculate J Button  JButton j Label Output  jLabelOutput J Label  JLabel j T Field Output  jTFieldOutput J Text Field  JTextField i 0 i 2 i j Label FT  jLabelFT i J Label  JLabel j Label FT  jLabelFT i set Bounds  setBounds 10 45 i 75 275 40 j Label FT  jLabelFT i set Font  setFont Font Calibri 0 18 j Label FT  jLabelFT i set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j T Field Day  jTFieldDay i J Text Field  JTextField j T Field Day  jTFieldDay i set Font  setFont Font Calibri 0 20 j T Field Day  jTFieldDay i set Bounds  setBounds 90 48 i 75 40 35 j T Field Day  jTFieldDay i set Background  setBackground Color 244 243 241 j T Field Month  jTFieldMonth i J Text Field  JTextField j T Field Month  jTFieldMonth i set Font  setFont Font Calibri 0 20 j T Field Month  jTFieldMonth i set Bounds  setBounds 145 48 i 75 40 35 j T Field Month  jTFieldMonth i set Background  setBackground Color 244 243 241 j T Field Year  jTFieldYear i J Text Field  JTextField j T Field Year  jTFieldYear i set Font  setFont Font Calibri 0 20 j T Field Year  jTFieldYear i set Bounds  setBounds 200 48 i 75 80 35 j T Field Year  jTFieldYear i set Background  setBackground Color 244 243 241 j Label FT  jLabelFT 0 set Text  setText From j Label FT  jLabelFT 1 set Text  setText To j Button Calculate  jButtonCalculate set Text  setText Calculate j Button Calculate  jButtonCalculate set Bounds  setBounds 200 190 80 30 j Button Calculate  jButtonCalculate set Background  setBackground Color 244 243 241 j Label Output  jLabelOutput set Text  setText Difference j Label Output  jLabelOutput set Bounds  setBounds 10 255 275 42 j Label Output  jLabelOutput set Font  setFont Font Calibri 0 17 j Label Output  jLabelOutput set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j T Field Output  jTFieldOutput set Text  setText j T Field Output  jTFieldOutput set Bounds  setBounds 90 257 193 39 j T Field Output  jTFieldOutput set Editable  setEditable j T Field Output  jTFieldOutput set Font  setFont Font Calibri 0 17 j T Field Output  jTFieldOutput set Background  setBackground Color 234 233 231 i 0 i 2 i add j Label FT  jLabelFT i add j T Field Day  jTFieldDay i add j T Field Month  jTFieldMonth i add j T Field Year  jTFieldYear i add j Button Calculate  jButtonCalculate add j Label Output  jLabelOutput add j T Field Output  jTFieldOutput set Bounds  setBounds 0 0 300 400 set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Date Calculator Background  DateCalculatorBackground jpg 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, input, space, button, output, criterion, frame, method, initializing, gui, variables, placing, specific, specifies, criteria, main, label, ft, jlabelft, jlabel, field, day, jtfieldday, text, jtextfield, month, jtfieldmonth, year, jtfieldyear, calculate, jbuttoncalculate, jbutton, jlabeloutput, jtfieldoutput, set, setbounds, font, setfont, calibri, border, setborder, soft, bevel, softbevelborder, bevelborder, lowered, background, setbackground, color, settext, difference, editable, seteditable, add, icon, seticon, javax, swing, image, imageicon, class, getclass, resource, getresource, res, imgs, date, calculator, datecalculatorbackground, jpg]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorGui.java,main
107 , 123
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		DateCalculatorGui gui = new DateCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 310, 420);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Date Calculator Gui  DateCalculatorGui gui Date Calculator Gui  DateCalculatorGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 230 115 310 420 j Frame  jFrame set Visible  setVisible j Frame  jFrame set Layout  setLayout j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, date, calculator, gui, datecalculatorgui, frame, jframe, bounds, setbounds, visible, setvisible, layout, setlayout, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorGui.java,DateCalculatorGui
32 , 35
------------------------------------------------------------------------
	/***##Constructor##***/
	public DateCalculatorGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Date Calculator Gui  DateCalculatorGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[date, calculator, gui, datecalculatorgui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorGui.java,DateCalculatorGui
16 , 124
------------------------------------------------------------------------
/**
 * A Date Calculator Gui
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class DateCalculatorGui extends JLabel {
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JLabel[] jLabelFT;
	JTextField[] jTFieldDay, jTFieldMonth, jTFieldYear;
	JButton jButtonCalculate;
	JLabel jLabelOutput;
	JTextField jTFieldOutput;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public DateCalculatorGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
    	jLabelFT=new JLabel[2];
    	jTFieldDay=new JTextField[2]; jTFieldMonth=new JTextField[2]; jTFieldYear=new JTextField[2];
    	jButtonCalculate=new JButton();
    	jLabelOutput=new JLabel();
    	jTFieldOutput=new JTextField();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
    	//input space
    	for(int i=0; i<2; i++){
    		jLabelFT[i]=new JLabel();
    		jLabelFT[i].setBounds(10, 45+i*75, 275, 40);
        	jLabelFT[i].setFont(new Font("Calibri", 0, 18));
        	jLabelFT[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    		jTFieldDay[i]=new JTextField();
        	jTFieldDay[i].setFont(new Font("Calibri", 0, 20));
    		jTFieldDay[i].setBounds(90, 48+i*75, 40, 35);
    		jTFieldDay[i].setBackground(new Color(244, 243, 241));
    		jTFieldMonth[i]=new JTextField();
        	jTFieldMonth[i].setFont(new Font("Calibri", 0, 20));
        	jTFieldMonth[i].setBounds(145, 48+i*75, 40, 35);
    		jTFieldMonth[i].setBackground(new Color(244, 243, 241));
    		jTFieldYear[i]=new JTextField();
        	jTFieldYear[i].setFont(new Font("Calibri", 0, 20));
        	jTFieldYear[i].setBounds(200, 48+i*75, 80, 35);
    		jTFieldYear[i].setBackground(new Color(244, 243, 241));
    	}
    	jLabelFT[0].setText(" From                    -            -");
    	jLabelFT[1].setText(" To                         -            -");
    	//button
    	jButtonCalculate.setText("Calculate");
    	jButtonCalculate.setBounds(200, 190, 80, 30);
    	jButtonCalculate.setBackground(new Color(244, 243, 241));
    	//output
    	jLabelOutput.setText(" Difference  ");
    	jLabelOutput.setBounds(10, 255, 275, 42);
    	jLabelOutput.setFont(new Font("Calibri", 0, 17));
		jLabelOutput.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    	jTFieldOutput.setText("");
    	jTFieldOutput.setBounds(90, 257, 193, 39);
    	jTFieldOutput.setEditable(false);
    	jTFieldOutput.setFont(new Font("Calibri", 0, 17));
		jTFieldOutput.setBackground(new Color(234, 233, 231));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		for(int i=0; i<2; i++){
    		add(jLabelFT[i]);
    		add(jTFieldDay[i]);
    		add(jTFieldMonth[i]);    		
    		add(jTFieldYear[i]);    		
    	}
    	add(jButtonCalculate);
    	add(jLabelOutput);
    	add(jTFieldOutput);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
    	setBounds(0, 0, 300, 400);
    	setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
    			"DateCalculatorBackground.jpg")));
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		DateCalculatorGui gui = new DateCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 310, 420);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Date Calculator Gui  DateCalculatorGui    
    Date  Calculator  Gui 
  Gui
   
      Minhas  Kamal 
  Kamal
  J Label  JLabel j Label FT  jLabelFT J Text Field  JTextField j T Field Day  jTFieldDay j T Field Month  jTFieldMonth j T Field Year  jTFieldYear J Button  JButton j Button Calculate  jButtonCalculate J Label  JLabel j Label Output  jLabelOutput J Text Field  JTextField j T Field Output  jTFieldOutput 
------------------------------------------------------------------------
[date, calculator, gui, datecalculatorgui, minhas, kamal, label, jlabel, ft, jlabelft, text, field, jtextfield, day, jtfieldday, month, jtfieldmonth, year, jtfieldyear, button, jbutton, calculate, jbuttoncalculate, output, jlabeloutput, jtfieldoutput]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorOperation.java,Date
8 , 69
------------------------------------------------------------------------
	public String Date(int day1, int month1, int year1, int day2, int month2, int year2){
		String difference="";
		int day=0, month=0, year=0;
		int inHand=1;
		if(day1<0 || month1<0 || year1<0 || day2<0 || month2<0 || year2<0 ||		//wrong input
				day1>31 || month1>12 || year1>1000000 || day2>31 || month2>12 || year2>1000000 ||
				(day1>29 && month1==2) || (day2>29 && month2==2) || (day1>30 && month1==4) || (day2>30 && month2==4) ||
				(day1>30 && month1==6) || (day2>30 && month2==6) ||(day1>30 && month1==9) || (day2>30 && month2==9) ||
				(day1>30 && month1==11) || (day2>30 && month2==11)){		
			new Message("Wrong Input!\n   You may have exceeded the range.", 420);
		}
		else if((day1+(month1*30)+(year1*365))<(day2+(month2*30)+(year2*365))){		//when from<to
		    //day calculation
			day2=day2+inHand;
			if(day2<day1){
				day=30+day2-day1;
				inHand=-1;
			}
		    else{
		    	day=day2-day1;
		    	inHand=0;
		    }
			//month calculation
			month2=month2+inHand;
		    if(month2<month1){
		    	month=12+month2-month1;
		    	inHand=-1;
		    }
		    else {
		    	month=month2-month1;
		    	inHand=0;
		    }
		    //year calculation
		    year=year2-year1+inHand;
		}
		else{																		//when to<from
			//day calculation
			day2=day2+inHand;
			if(day1<day2){
				day=30+day1-day2;
				inHand=-1;
			}
		    else{
		    	day=day1-day2;
		    	inHand=0;
		    }
			//month calculation
			month2=month2+inHand;
		    if(month1<month2){
		    	month=12+month1-month2;
		    	inHand=-1;
		    }
		    else {
		    	month=month1-month2;
		    	inHand=0;
		    }
		    //year calculation
		    year=year1-year2+inHand;
		}
		difference = " " + year + "Y, " + month + "M, " + day + "D.";
		return difference;
	}

------------------------------------------------------------------------
 Date  wrong  input    day  calculation  month  calculation  year  calculation    day  calculation  month  calculation  year  calculation   String difference day 0 month 0 year 0 in Hand  inHand 1 day 1  day1 0 month 1  month1 0 year 1  year1 0 day 2  day2 0 month 2  month2 0 year 2  year2 0 day 1  day1 31 month 1  month1 12 year 1  year1 1000000 day 2  day2 31 month 2  month2 12 year 2  year2 1000000 day 1  day1 29 month 1  month1 2 day 2  day2 29 month 2  month2 2 day 1  day1 30 month 1  month1 4 day 2  day2 30 month 2  month2 4 day 1  day1 30 month 1  month1 6 day 2  day2 30 month 2  month2 6 day 1  day1 30 month 1  month1 9 day 2  day2 30 month 2  month2 9 day 1  day1 30 month 1  month1 11 day 2  day2 30 month 2  month2 11 Message Wrong Input n You may have exceeded the range 420 day 1  day1 month 1  month1 30 year 1  year1 365 day 2  day2 month 2  month2 30 year 2  year2 365 day 2  day2 day 2  day2 in Hand  inHand day 2  day2 day 1  day1 day 30 day 2  day2 day 1  day1 in Hand  inHand 1 day day 2  day2 day 1  day1 in Hand  inHand 0 month 2  month2 month 2  month2 in Hand  inHand month 2  month2 month 1  month1 month 12 month 2  month2 month 1  month1 in Hand  inHand 1 month month 2  month2 month 1  month1 in Hand  inHand 0 year year 2  year2 year 1  year1 in Hand  inHand day 2  day2 day 2  day2 in Hand  inHand day 1  day1 day 2  day2 day 30 day 1  day1 day 2  day2 in Hand  inHand 1 day day 1  day1 day 2  day2 in Hand  inHand 0 month 2  month2 month 2  month2 in Hand  inHand month 1  month1 month 2  month2 month 12 month 1  month1 month 2  month2 in Hand  inHand 1 month month 1  month1 month 2  month2 in Hand  inHand 0 year year 1  year1 year 2  year2 in Hand  inHand difference year Y month M day D difference 
------------------------------------------------------------------------
[date, wrong, input, day, calculation, month, year, string, difference, hand, inhand, day1, month1, year1, day2, month2, year2, message, exceeded, range]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/dateCalculator/DateCalculatorOperation.java,DateCalculatorOperation
7 , 70
------------------------------------------------------------------------
public class DateCalculatorOperation {
	public String Date(int day1, int month1, int year1, int day2, int month2, int year2){
		String difference="";
		int day=0, month=0, year=0;
		int inHand=1;
		if(day1<0 || month1<0 || year1<0 || day2<0 || month2<0 || year2<0 ||		//wrong input
				day1>31 || month1>12 || year1>1000000 || day2>31 || month2>12 || year2>1000000 ||
				(day1>29 && month1==2) || (day2>29 && month2==2) || (day1>30 && month1==4) || (day2>30 && month2==4) ||
				(day1>30 && month1==6) || (day2>30 && month2==6) ||(day1>30 && month1==9) || (day2>30 && month2==9) ||
				(day1>30 && month1==11) || (day2>30 && month2==11)){		
			new Message("Wrong Input!\n   You may have exceeded the range.", 420);
		}
		else if((day1+(month1*30)+(year1*365))<(day2+(month2*30)+(year2*365))){		//when from<to
		    //day calculation
			day2=day2+inHand;
			if(day2<day1){
				day=30+day2-day1;
				inHand=-1;
			}
		    else{
		    	day=day2-day1;
		    	inHand=0;
		    }
			//month calculation
			month2=month2+inHand;
		    if(month2<month1){
		    	month=12+month2-month1;
		    	inHand=-1;
		    }
		    else {
		    	month=month2-month1;
		    	inHand=0;
		    }
		    //year calculation
		    year=year2-year1+inHand;
		}
		else{																		//when to<from
			//day calculation
			day2=day2+inHand;
			if(day1<day2){
				day=30+day1-day2;
				inHand=-1;
			}
		    else{
		    	day=day1-day2;
		    	inHand=0;
		    }
			//month calculation
			month2=month2+inHand;
		    if(month1<month2){
		    	month=12+month1-month2;
		    	inHand=-1;
		    }
		    else {
		    	month=month1-month2;
		    	inHand=0;
		    }
		    //year calculation
		    year=year1-year2+inHand;
		}
		difference = " " + year + "Y, " + month + "M, " + day + "D.";
		return difference;
	}
}

------------------------------------------------------------------------
 Date Calculator Operation  DateCalculatorOperation   
------------------------------------------------------------------------
[date, calculator, operation, datecalculatoroperation]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,initialComponent
49 , 140
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		equaCalcGui = new EquationCalculatorGui();
		//necessary objects
		equaSovlOperation = new EquationSovlerOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"EquationCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
   		//Equation Ax+By=C
	    jTFieldaxbyc = equaCalcGui.jTFieldaxbyc;
	    jButtonaxbycSolve = equaCalcGui.jButtonaxbycSolve;
	    //Equation Ax+By+Cz=D
	    jTFieldaxbyczd = equaCalcGui.jTFieldaxbyczd;
	    jButtonaxbyczdSolve = equaCalcGui.jButtonaxbyczdSolve;
	  	//Equation Ax2+Bx=C
	    jTFieldax2bxc = equaCalcGui.jTFieldax2bxc;
	    jButtonax2bxcSolve = equaCalcGui.jButtonax2bxcSolve;
	  	//Equation Ax3+Bx2+Cx=D
	    jTFieldax3bx2cxd = equaCalcGui.jTFieldax3bx2cxd;
	    jButtonax3bx2cxdSolve = equaCalcGui.jButtonax3bx2cxdSolve;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
	    jButtonaxbycSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonaxbycSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbycSolveActionPerformed(evt);
	        }
	    });
	    jButtonaxbycSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbycSolveActionPerformed(evt);
	        }
	    });
	    jButtonaxbyczdSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonaxbyczdSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbyczdSolveActionPerformed(evt);
	        }
	    });
	    jButtonaxbyczdSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbyczdSolveActionPerformed(evt);
	        }
	    });
	    jButtonax2bxcSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonax2bxcSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax2bxcSolveActionPerformed(evt);
	        }
	    });
	    jButtonax2bxcSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax2bxcSolveActionPerformed(evt);
	        }
	    });
	    jButtonax3bx2cxdSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonax3bx2cxdSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax3bx2cxdSolveActionPerformed(evt);
	        }
	    });
	    jButtonax3bx2cxdSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax3bx2cxdSolveActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	    //**Setting Criterion of the Frame**//
	    super.gui.add(equaCalcGui);
	    super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	    super.gui.setTitle("Equation Calculator");
	    super.gui.setResizable(false);
	    super.gui.setBounds(230, 115, 276, 420);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			   End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization   objects  instruction  Equation  Ax  Equation  Ax Cz  Equation  Ax 2  Ax2 Bx  Equation  Ax 3  Ax3 Bx 2  Bx2 Cx   Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  equa Calc Gui  equaCalcGui Equation Calculator Gui  EquationCalculatorGui equa Sovl Operation  equaSovlOperation Equation Sovler Operation  EquationSovlerOperation instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Equation Calculator Instruction  EquationCalculatorInstruction txt Exception e instruction EMPTY j T Fieldaxbyc  jTFieldaxbyc equa Calc Gui  equaCalcGui j T Fieldaxbyc  jTFieldaxbyc j Buttonaxbyc Solve  jButtonaxbycSolve equa Calc Gui  equaCalcGui j Buttonaxbyc Solve  jButtonaxbycSolve j T Fieldaxbyczd  jTFieldaxbyczd equa Calc Gui  equaCalcGui j T Fieldaxbyczd  jTFieldaxbyczd j Buttonaxbyczd Solve  jButtonaxbyczdSolve equa Calc Gui  equaCalcGui j Buttonaxbyczd Solve  jButtonaxbyczdSolve j T Fieldax 2bxc  jTFieldax2bxc equa Calc Gui  equaCalcGui j T Fieldax 2bxc  jTFieldax2bxc j Buttonax 2bxc Solve  jButtonax2bxcSolve equa Calc Gui  equaCalcGui j Buttonax 2bxc Solve  jButtonax2bxcSolve j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd equa Calc Gui  equaCalcGui j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve equa Calc Gui  equaCalcGui j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve j Buttonaxbyc Solve  jButtonaxbycSolve get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 SOLVE _pressed  SOLVE_pressed j Buttonaxbyc Solve  jButtonaxbycSolve get Action Map  getActionMap put SOLVE _pressed  SOLVE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Buttonaxbyc Solve Action Performed  jButtonaxbycSolveActionPerformed evt j Buttonaxbyc Solve  jButtonaxbycSolve add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Buttonaxbyc Solve Action Performed  jButtonaxbycSolveActionPerformed evt j Buttonaxbyczd Solve  jButtonaxbyczdSolve get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 SOLVE _pressed  SOLVE_pressed j Buttonaxbyczd Solve  jButtonaxbyczdSolve get Action Map  getActionMap put SOLVE _pressed  SOLVE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Buttonaxbyczd Solve Action Performed  jButtonaxbyczdSolveActionPerformed evt j Buttonaxbyczd Solve  jButtonaxbyczdSolve add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Buttonaxbyczd Solve Action Performed  jButtonaxbyczdSolveActionPerformed evt j Buttonax 2bxc Solve  jButtonax2bxcSolve get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 SOLVE _pressed  SOLVE_pressed j Buttonax 2bxc Solve  jButtonax2bxcSolve get Action Map  getActionMap put SOLVE _pressed  SOLVE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Buttonax 2bxc Solve Action Performed  jButtonax2bxcSolveActionPerformed evt j Buttonax 2bxc Solve  jButtonax2bxcSolve add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Buttonax 2bxc Solve Action Performed  jButtonax2bxcSolveActionPerformed evt j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 SOLVE _pressed  SOLVE_pressed j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve get Action Map  getActionMap put SOLVE _pressed  SOLVE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Buttonax 3bx 2cxd Solve Action Performed  jButtonax3bx2cxdSolveActionPerformed evt j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Buttonax 3bx 2cxd Solve Action Performed  jButtonax3bx2cxdSolveActionPerformed evt gui add equa Calc Gui  equaCalcGui gui set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE gui set Title  setTitle Equation Calculator gui set Resizable  setResizable gui set Bounds  setBounds 230 115 276 420 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, objects, instruction, equation, ax, cz, ax2, bx, ax3, bx2, cx, setting, criterion, frame, method, initializing, variables, placing, specific, space, specifies, criteria, main, equa, calc, equacalcgui, calculator, equationcalculatorgui, sovl, operation, equasovloperation, sovler, equationsovleroperation, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, equationcalculatorinstruction, txt, exception, empty, fieldaxbyc, jtfieldaxbyc, buttonaxbyc, solve, jbuttonaxbycsolve, fieldaxbyczd, jtfieldaxbyczd, buttonaxbyczd, jbuttonaxbyczdsolve, fieldax, jtfieldax2bxc, buttonax, jbuttonax2bxcsolve, jtfieldax3bx2cxd, jbuttonax3bx2cxdsolve, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, event, keyevent, vk, enter, vk_enter, _pressed, solve_pressed, getactionmap, abstract, abstractaction, performed, actionperformed, actionevent, evt, jbuttonaxbycsolveactionperformed, add, listener, addactionlistener, actionlistener, jbuttonaxbyczdsolveactionperformed, jbuttonax2bxcsolveactionperformed, jbuttonax3bx2cxdsolveactionperformed, set, default, close, setdefaultcloseoperation, javax, swing, constants, windowconstants, exit, exit_on_close, title, settitle, resizable, setresizable, bounds, setbounds]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,jButtonaxbycSolveActionPerformed
144 , 156
------------------------------------------------------------------------
	//solve button
   	private void jButtonaxbycSolveActionPerformed(ActionEvent evt){
   		String a1=jTFieldaxbyc[0].getText();
   		String b1=jTFieldaxbyc[1].getText();
   		String c1=jTFieldaxbyc[2].getText();
   		String a2=jTFieldaxbyc[3].getText();
   		String b2=jTFieldaxbyc[4].getText();
   		String c2=jTFieldaxbyc[5].getText();
   		String[] xy=new String[2];
   		xy = equaSovlOperation.AXBYC(a1, b1, c1, a2, b2, c2);
   		jTFieldaxbyc[6].setText(xy[0]);
   		jTFieldaxbyc[7].setText(xy[1]);   		
   	}

------------------------------------------------------------------------
 j Buttonaxbyc Solve Action Performed  jButtonaxbycSolveActionPerformed  solve  button   String a 1  a1 j T Fieldaxbyc  jTFieldaxbyc 0 get Text  getText String b 1  b1 j T Fieldaxbyc  jTFieldaxbyc 1 get Text  getText String c 1  c1 j T Fieldaxbyc  jTFieldaxbyc 2 get Text  getText String a 2  a2 j T Fieldaxbyc  jTFieldaxbyc 3 get Text  getText String b 2  b2 j T Fieldaxbyc  jTFieldaxbyc 4 get Text  getText String c 2  c2 j T Fieldaxbyc  jTFieldaxbyc 5 get Text  getText String xy String 2 xy equa Sovl Operation  equaSovlOperation AXBYC a 1  a1 b 1  b1 c 1  c1 a 2  a2 b 2  b2 c 2  c2 j T Fieldaxbyc  jTFieldaxbyc 6 set Text  setText xy 0 j T Fieldaxbyc  jTFieldaxbyc 7 set Text  setText xy 1 
------------------------------------------------------------------------
[buttonaxbyc, solve, action, performed, jbuttonaxbycsolveactionperformed, button, string, a1, fieldaxbyc, jtfieldaxbyc, text, gettext, b1, c1, a2, b2, c2, xy, equa, sovl, operation, equasovloperation, axbyc, set, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,jButtonaxbyczdSolveActionPerformed
157 , 175
------------------------------------------------------------------------
   	private void jButtonaxbyczdSolveActionPerformed(ActionEvent evt){
   		String a1=jTFieldaxbyczd[0].getText();
   		String b1=jTFieldaxbyczd[1].getText();
   		String c1=jTFieldaxbyczd[2].getText();
   		String d1=jTFieldaxbyczd[3].getText();   		
   		String a2=jTFieldaxbyczd[4].getText();
   		String b2=jTFieldaxbyczd[5].getText();
   		String c2=jTFieldaxbyczd[6].getText();
   		String d2=jTFieldaxbyczd[7].getText();   	
   		String a3=jTFieldaxbyczd[8].getText();
   		String b3=jTFieldaxbyczd[9].getText();
   		String c3=jTFieldaxbyczd[10].getText();
   		String d3=jTFieldaxbyczd[11].getText();   	
   		String[] xyz=new String[3];
   		xyz = equaSovlOperation.AXBYCZD(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3);
   		jTFieldaxbyczd[12].setText(xyz[0]);
   		jTFieldaxbyczd[13].setText(xyz[1]);   
   		jTFieldaxbyczd[14].setText(xyz[2]);   
   	}

------------------------------------------------------------------------
 j Buttonaxbyczd Solve Action Performed  jButtonaxbyczdSolveActionPerformed   String a 1  a1 j T Fieldaxbyczd  jTFieldaxbyczd 0 get Text  getText String b 1  b1 j T Fieldaxbyczd  jTFieldaxbyczd 1 get Text  getText String c 1  c1 j T Fieldaxbyczd  jTFieldaxbyczd 2 get Text  getText String d 1  d1 j T Fieldaxbyczd  jTFieldaxbyczd 3 get Text  getText String a 2  a2 j T Fieldaxbyczd  jTFieldaxbyczd 4 get Text  getText String b 2  b2 j T Fieldaxbyczd  jTFieldaxbyczd 5 get Text  getText String c 2  c2 j T Fieldaxbyczd  jTFieldaxbyczd 6 get Text  getText String d 2  d2 j T Fieldaxbyczd  jTFieldaxbyczd 7 get Text  getText String a 3  a3 j T Fieldaxbyczd  jTFieldaxbyczd 8 get Text  getText String b 3  b3 j T Fieldaxbyczd  jTFieldaxbyczd 9 get Text  getText String c 3  c3 j T Fieldaxbyczd  jTFieldaxbyczd 10 get Text  getText String d 3  d3 j T Fieldaxbyczd  jTFieldaxbyczd 11 get Text  getText String xyz String 3 xyz equa Sovl Operation  equaSovlOperation AXBYCZD a 1  a1 b 1  b1 c 1  c1 d 1  d1 a 2  a2 b 2  b2 c 2  c2 d 2  d2 a 3  a3 b 3  b3 c 3  c3 d 3  d3 j T Fieldaxbyczd  jTFieldaxbyczd 12 set Text  setText xyz 0 j T Fieldaxbyczd  jTFieldaxbyczd 13 set Text  setText xyz 1 j T Fieldaxbyczd  jTFieldaxbyczd 14 set Text  setText xyz 2 
------------------------------------------------------------------------
[buttonaxbyczd, solve, action, performed, jbuttonaxbyczdsolveactionperformed, string, a1, fieldaxbyczd, jtfieldaxbyczd, text, gettext, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, xyz, equa, sovl, operation, equasovloperation, axbyczd, set, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,jButtonax2bxcSolveActionPerformed
176 , 184
------------------------------------------------------------------------
	private void jButtonax2bxcSolveActionPerformed(ActionEvent evt){
		String a=jTFieldax2bxc[0].getText();
		String b=jTFieldax2bxc[1].getText();
		String c=jTFieldax2bxc[2].getText();
		String x[] = new String[2];
		x = equaSovlOperation.AX2BXC(a, b, c);
		jTFieldax2bxc[3].setText(x[0]);
		jTFieldax2bxc[4].setText(x[1]);		
	}

------------------------------------------------------------------------
 j Buttonax 2bxc Solve Action Performed  jButtonax2bxcSolveActionPerformed   String a j T Fieldax 2bxc  jTFieldax2bxc 0 get Text  getText String b j T Fieldax 2bxc  jTFieldax2bxc 1 get Text  getText String c j T Fieldax 2bxc  jTFieldax2bxc 2 get Text  getText String x String 2 x equa Sovl Operation  equaSovlOperation AX 2 BXC  AX2BXC a b c j T Fieldax 2bxc  jTFieldax2bxc 3 set Text  setText x 0 j T Fieldax 2bxc  jTFieldax2bxc 4 set Text  setText x 1 
------------------------------------------------------------------------
[buttonax, solve, action, performed, jbuttonax2bxcsolveactionperformed, string, fieldax, jtfieldax2bxc, text, gettext, equa, sovl, operation, equasovloperation, ax, bxc, ax2bxc, set, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,jButtonax3bx2cxdSolveActionPerformed
185 , 195
------------------------------------------------------------------------
	private void jButtonax3bx2cxdSolveActionPerformed(ActionEvent evt){
		String a=jTFieldax3bx2cxd[0].getText();
		String b=jTFieldax3bx2cxd[1].getText();
		String c=jTFieldax3bx2cxd[2].getText();
		String d=jTFieldax3bx2cxd[3].getText();
		String x[] = new String[3];
		x = equaSovlOperation.AX3BX2CXD(a, b, c, d);
		jTFieldax3bx2cxd[4].setText(x[0]);
		jTFieldax3bx2cxd[5].setText(x[1]);	
		jTFieldax3bx2cxd[6].setText(x[2]);	
	}

------------------------------------------------------------------------
 j Buttonax 3bx 2cxd Solve Action Performed  jButtonax3bx2cxdSolveActionPerformed   String a j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 0 get Text  getText String b j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 1 get Text  getText String c j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 2 get Text  getText String d j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 3 get Text  getText String x String 3 x equa Sovl Operation  equaSovlOperation AX 3 BX 2 CXD  AX3BX2CXD a b c d j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 4 set Text  setText x 0 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 5 set Text  setText x 1 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 6 set Text  setText x 2 
------------------------------------------------------------------------
[buttonax, solve, action, performed, jbuttonax3bx2cxdsolveactionperformed, string, fieldax, jtfieldax3bx2cxd, text, gettext, equa, sovl, operation, equasovloperation, ax, bx, cxd, ax3bx2cxd, set, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,main
205 , 215
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new EquationCalculator();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Equation Calculator  EquationCalculator 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, equation, calculator, equationcalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,EquationCalculator
44 , 48
------------------------------------------------------------------------
	/***##Constructor##***/
	public EquationCalculator() {
		initialComponent();
		super.jCBItemMode[3].setSelected(true);
	}

------------------------------------------------------------------------
 Equation Calculator  EquationCalculator   Constructor  initial Component  initialComponent j CB Item Mode  jCBItemMode 3 set Selected  setSelected 
------------------------------------------------------------------------
[equation, calculator, equationcalculator, constructor, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, selected, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculator.java,EquationCalculator
18 , 216
------------------------------------------------------------------------
/**
 * A Equation Calculator
 * 
 * @author Minhas Kamal
 */
public class EquationCalculator extends UltimateCalculatorFrame{
	// GUI Declaration
	private EquationCalculatorGui equaCalcGui;
	//necessary objects
	private EquationSovlerOperation equaSovlOperation;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	//Equation Ax+By=C
    private JTextField jTFieldaxbyc[];
    private JButton jButtonaxbycSolve;
    //Equation Ax+By+Cz=D
    private JTextField jTFieldaxbyczd[];
    private JButton jButtonaxbyczdSolve;
  	//Equation Ax2+Bx=C
    private JTextField jTFieldax2bxc[];
    private JButton jButtonax2bxcSolve;
  	//Equation Ax3+Bx2+Cx=D
    private JTextField jTFieldax3bx2cxd[];
    private JButton jButtonax3bx2cxdSolve;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public EquationCalculator() {
		initialComponent();
		super.jCBItemMode[3].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		equaCalcGui = new EquationCalculatorGui();
		//necessary objects
		equaSovlOperation = new EquationSovlerOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"EquationCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
   		//Equation Ax+By=C
	    jTFieldaxbyc = equaCalcGui.jTFieldaxbyc;
	    jButtonaxbycSolve = equaCalcGui.jButtonaxbycSolve;
	    //Equation Ax+By+Cz=D
	    jTFieldaxbyczd = equaCalcGui.jTFieldaxbyczd;
	    jButtonaxbyczdSolve = equaCalcGui.jButtonaxbyczdSolve;
	  	//Equation Ax2+Bx=C
	    jTFieldax2bxc = equaCalcGui.jTFieldax2bxc;
	    jButtonax2bxcSolve = equaCalcGui.jButtonax2bxcSolve;
	  	//Equation Ax3+Bx2+Cx=D
	    jTFieldax3bx2cxd = equaCalcGui.jTFieldax3bx2cxd;
	    jButtonax3bx2cxdSolve = equaCalcGui.jButtonax3bx2cxdSolve;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
	    jButtonaxbycSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonaxbycSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbycSolveActionPerformed(evt);
	        }
	    });
	    jButtonaxbycSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbycSolveActionPerformed(evt);
	        }
	    });
	    jButtonaxbyczdSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonaxbyczdSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbyczdSolveActionPerformed(evt);
	        }
	    });
	    jButtonaxbyczdSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonaxbyczdSolveActionPerformed(evt);
	        }
	    });
	    jButtonax2bxcSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonax2bxcSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax2bxcSolveActionPerformed(evt);
	        }
	    });
	    jButtonax2bxcSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax2bxcSolveActionPerformed(evt);
	        }
	    });
	    jButtonax3bx2cxdSolve.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "SOLVE_pressed");
	    jButtonax3bx2cxdSolve.getActionMap().put("SOLVE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax3bx2cxdSolveActionPerformed(evt);
	        }
	    });
	    jButtonax3bx2cxdSolve.addActionListener(new ActionListener() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonax3bx2cxdSolveActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	    //**Setting Criterion of the Frame**//
	    super.gui.add(equaCalcGui);
	    super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	    super.gui.setTitle("Equation Calculator");
	    super.gui.setResizable(false);
	    super.gui.setBounds(230, 115, 276, 420);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	//solve button
   	private void jButtonaxbycSolveActionPerformed(ActionEvent evt){
   		String a1=jTFieldaxbyc[0].getText();
   		String b1=jTFieldaxbyc[1].getText();
   		String c1=jTFieldaxbyc[2].getText();
   		String a2=jTFieldaxbyc[3].getText();
   		String b2=jTFieldaxbyc[4].getText();
   		String c2=jTFieldaxbyc[5].getText();
   		String[] xy=new String[2];
   		xy = equaSovlOperation.AXBYC(a1, b1, c1, a2, b2, c2);
   		jTFieldaxbyc[6].setText(xy[0]);
   		jTFieldaxbyc[7].setText(xy[1]);   		
   	}
   	private void jButtonaxbyczdSolveActionPerformed(ActionEvent evt){
   		String a1=jTFieldaxbyczd[0].getText();
   		String b1=jTFieldaxbyczd[1].getText();
   		String c1=jTFieldaxbyczd[2].getText();
   		String d1=jTFieldaxbyczd[3].getText();   		
   		String a2=jTFieldaxbyczd[4].getText();
   		String b2=jTFieldaxbyczd[5].getText();
   		String c2=jTFieldaxbyczd[6].getText();
   		String d2=jTFieldaxbyczd[7].getText();   	
   		String a3=jTFieldaxbyczd[8].getText();
   		String b3=jTFieldaxbyczd[9].getText();
   		String c3=jTFieldaxbyczd[10].getText();
   		String d3=jTFieldaxbyczd[11].getText();   	
   		String[] xyz=new String[3];
   		xyz = equaSovlOperation.AXBYCZD(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3);
   		jTFieldaxbyczd[12].setText(xyz[0]);
   		jTFieldaxbyczd[13].setText(xyz[1]);   
   		jTFieldaxbyczd[14].setText(xyz[2]);   
   	}
	private void jButtonax2bxcSolveActionPerformed(ActionEvent evt){
		String a=jTFieldax2bxc[0].getText();
		String b=jTFieldax2bxc[1].getText();
		String c=jTFieldax2bxc[2].getText();
		String x[] = new String[2];
		x = equaSovlOperation.AX2BXC(a, b, c);
		jTFieldax2bxc[3].setText(x[0]);
		jTFieldax2bxc[4].setText(x[1]);		
	}
	private void jButtonax3bx2cxdSolveActionPerformed(ActionEvent evt){
		String a=jTFieldax3bx2cxd[0].getText();
		String b=jTFieldax3bx2cxd[1].getText();
		String c=jTFieldax3bx2cxd[2].getText();
		String d=jTFieldax3bx2cxd[3].getText();
		String x[] = new String[3];
		x = equaSovlOperation.AX3BX2CXD(a, b, c, d);
		jTFieldax3bx2cxd[4].setText(x[0]);
		jTFieldax3bx2cxd[5].setText(x[1]);	
		jTFieldax3bx2cxd[6].setText(x[2]);	
	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new EquationCalculator();
	}
}

------------------------------------------------------------------------
 Equation Calculator  EquationCalculator  GUI  Declaration   objects  Equation  Ax  Equation  Ax Cz  Equation  Ax 2  Ax2 Bx  Equation  Ax 3  Ax3 Bx 2  Bx2 Cx   
    Equation  Calculator 
  Calculator
   
      Minhas  Kamal 
  Kamal
  Equation Calculator Gui  EquationCalculatorGui equa Calc Gui  equaCalcGui Equation Sovler Operation  EquationSovlerOperation equa Sovl Operation  equaSovlOperation J Text Field  JTextField j T Fieldaxbyc  jTFieldaxbyc J Button  JButton j Buttonaxbyc Solve  jButtonaxbycSolve J Text Field  JTextField j T Fieldaxbyczd  jTFieldaxbyczd J Button  JButton j Buttonaxbyczd Solve  jButtonaxbyczdSolve J Text Field  JTextField j T Fieldax 2bxc  jTFieldax2bxc J Button  JButton j Buttonax 2bxc Solve  jButtonax2bxcSolve J Text Field  JTextField j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd J Button  JButton j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve 
------------------------------------------------------------------------
[equation, calculator, equationcalculator, gui, declaration, objects, ax, cz, ax2, bx, ax3, bx2, cx, minhas, kamal, equationcalculatorgui, equa, calc, equacalcgui, sovler, operation, equationsovleroperation, sovl, equasovloperation, text, field, jtextfield, fieldaxbyc, jtfieldaxbyc, button, jbutton, buttonaxbyc, solve, jbuttonaxbycsolve, fieldaxbyczd, jtfieldaxbyczd, buttonaxbyczd, jbuttonaxbyczdsolve, fieldax, jtfieldax2bxc, buttonax, jbuttonax2bxcsolve, jtfieldax3bx2cxd, jbuttonax3bx2cxdsolve]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculatorGui.java,initialComponent
50 , 285
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
   		jPanelMain = new JPanel[4];
   		jLabelMain = new JLabel[4];
   		//Additional Initialization 																	***
		//Equation Ax+By=C
	    jTFieldaxbyc = new JTextField[8];
	    jLabelaxbyc = new JLabel[6];
	    jButtonaxbycSolve = new JButton();
	    //Equation Ax+By+Cz=D
	    jTFieldaxbyczd = new JTextField[15];
	    jLabelaxbyczd = new JLabel[12];
	    jButtonaxbyczdSolve = new JButton();
	  	//Equation Ax2+Bx=C
	    jTFieldax2bxc = new JTextField[5];
	    jLabelax2bxc = new JLabel[8];
	    jButtonax2bxcSolve = new JButton();
	  	//Equation Ax3+Bx2+Cx=D
	    jTFieldax3bx2cxd = new JTextField[7];
	    jLabelax3bx2cxd = new JLabel[13];
	    jButtonax3bx2cxdSolve = new JButton();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
	    for(int i=0; i<4; i++){
			jPanelMain[i] = new JPanel();
			jPanelMain[i].setLayout(null);
			jLabelMain[i] = new JLabel();
			jLabelMain[i].setLayout(null);
			jLabelMain[i].setBounds(0, 0, 276, 420);
		}
		jLabelMain[0].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground1.jpg")));
		jLabelMain[1].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground2.jpg")));
		jLabelMain[2].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground3.jpg")));
		jLabelMain[3].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground4.jpg")));
		//Equation Ax+By=C												***
	    for(int i=0; i<8; i++){
	    	jTFieldaxbyc[i]=new JTextField();
	    	jTFieldaxbyc[i].setSize(40, 30);
	    }
	    jTFieldaxbyc[0].setLocation(24, 40);
	    jTFieldaxbyc[1].setLocation(105, 40);
	    jTFieldaxbyc[2].setLocation(190, 40);
	    jTFieldaxbyc[3].setLocation(24, 100);
	    jTFieldaxbyc[4].setLocation(105, 100);
	    jTFieldaxbyc[5].setLocation(190, 100);
	    jTFieldaxbyc[6].setLocation(57, 210); jTFieldaxbyc[6].setEditable(false); jTFieldaxbyc[6].setSize(185, 30);
	    	jTFieldaxbyc[6].setHorizontalAlignment(4);
	    jTFieldaxbyc[7].setLocation(57, 260); jTFieldaxbyc[7].setEditable(false); jTFieldaxbyc[7].setSize(185, 30);
    		jTFieldaxbyc[7].setHorizontalAlignment(4);
	    for(int i=0; i<6; i++){
	    	jLabelaxbyc[i]=new JLabel();
	    	jLabelaxbyc[i].setFont(new Font("Gabriola", 0, 26));
	    	jLabelaxbyc[i].setSize(40, 30);
	    }
	    jLabelaxbyc[0].setLocation(70, 40); jLabelaxbyc[0].setText("x  +");
	    jLabelaxbyc[1].setLocation(152, 40); jLabelaxbyc[1].setText("y  =");
	    jLabelaxbyc[2].setLocation(70, 100); jLabelaxbyc[2].setText("x  +");
	    jLabelaxbyc[3].setLocation(152, 100); jLabelaxbyc[3].setText("y  =");
	    jLabelaxbyc[4].setLocation(29, 210); jLabelaxbyc[4].setText("x =");
	    jLabelaxbyc[5].setLocation(29, 260); jLabelaxbyc[5].setText("y =");
	    jButtonaxbycSolve.setBounds(24, 155, 60, 30);
	    jButtonaxbycSolve.setText("Solve");
	    //Equation Ax+By+Cz=D											***
	    for(int i=0; i<15; i++){
	    	jTFieldaxbyczd[i]=new JTextField();
	    	jTFieldaxbyczd[i].setSize(40, 30);
	    }
	    jTFieldaxbyczd[0].setLocation(15, 15);
	    jTFieldaxbyczd[1].setLocation(80, 15);
	    jTFieldaxbyczd[2].setLocation(145, 15);
	    jTFieldaxbyczd[3].setLocation(215, 15);
	    jTFieldaxbyczd[4].setLocation(15, 65);
	    jTFieldaxbyczd[5].setLocation(80, 65);
	    jTFieldaxbyczd[6].setLocation(145, 65);
	    jTFieldaxbyczd[7].setLocation(215, 65);
	    jTFieldaxbyczd[8].setLocation(15, 115);
	    jTFieldaxbyczd[9].setLocation(80, 115);
	    jTFieldaxbyczd[10].setLocation(145, 115);
	    jTFieldaxbyczd[11].setLocation(215, 115);
	    jTFieldaxbyczd[12].setLocation(50, 195); jTFieldaxbyczd[12].setEditable(false); jTFieldaxbyczd[12].setSize(190, 30);
	    	jTFieldaxbyczd[12].setHorizontalAlignment(4);
	    jTFieldaxbyczd[13].setLocation(50, 238); jTFieldaxbyczd[13].setEditable(false); jTFieldaxbyczd[13].setSize(190, 30);
	    	jTFieldaxbyczd[13].setHorizontalAlignment(4);
	    jTFieldaxbyczd[14].setLocation(50, 280); jTFieldaxbyczd[14].setEditable(false); jTFieldaxbyczd[14].setSize(190, 30);
    		jTFieldaxbyczd[14].setHorizontalAlignment(4);
	    for(int i=0; i<12; i++){
	    	jLabelaxbyczd[i]=new JLabel();
	    	jLabelaxbyczd[i].setFont(new Font("Gabriola", 0, 22));
	    	jLabelaxbyczd[i].setSize(40, 30);
	    }
	    jLabelaxbyczd[0].setLocation(58, 15); jLabelaxbyczd[0].setText("x +");
	    jLabelaxbyczd[1].setLocation(123, 15); jLabelaxbyczd[1].setText("y +");
	    jLabelaxbyczd[2].setLocation(188, 15); jLabelaxbyczd[2].setText("z =");
	    jLabelaxbyczd[3].setLocation(58, 65); jLabelaxbyczd[3].setText("x +");
	    jLabelaxbyczd[4].setLocation(123, 65); jLabelaxbyczd[4].setText("y +");
	    jLabelaxbyczd[5].setLocation(188, 65); jLabelaxbyczd[5].setText("z =");
	    jLabelaxbyczd[6].setLocation(58, 115); jLabelaxbyczd[6].setText("x +");
	    jLabelaxbyczd[7].setLocation(123, 115); jLabelaxbyczd[7].setText("y +");
	    jLabelaxbyczd[8].setLocation(188, 115); jLabelaxbyczd[8].setText("z =");
	    jLabelaxbyczd[9].setLocation(25, 195); jLabelaxbyczd[9].setText("x =");
	    jLabelaxbyczd[10].setLocation(25, 238); jLabelaxbyczd[10].setText("y =");
	    jLabelaxbyczd[11].setLocation(25, 280); jLabelaxbyczd[11].setText("z =");
	    jButtonaxbyczdSolve.setBounds(15, 155, 60, 30);
	    jButtonaxbyczdSolve.setText("Solve");
	  	//Equation Ax2+Bx=C												***
	    for(int i=0; i<5; i++){
	    	jTFieldax2bxc[i]=new JTextField();
	    	jTFieldax2bxc[i].setSize(40, 30);
	    }
	    jTFieldax2bxc[0].setLocation(20, 60);
	    jTFieldax2bxc[1].setLocation(115, 60);
	    jTFieldax2bxc[2].setLocation(210, 60);
	    jTFieldax2bxc[3].setLocation(60, 200); jTFieldax2bxc[3].setEditable(false); jTFieldax2bxc[3].setSize(188, 30);
	    	jTFieldax2bxc[3].setHorizontalAlignment(4);
	    jTFieldax2bxc[4].setLocation(60, 250); jTFieldax2bxc[4].setEditable(false); jTFieldax2bxc[4].setSize(188, 30);
	    	jTFieldax2bxc[4].setHorizontalAlignment(4);
	    for(int i=0; i<8; i++){
	    	jLabelax2bxc[i]=new JLabel();
	    	jLabelax2bxc[i].setFont(new Font("Gabriola", 0, 28));
	    	jLabelax2bxc[i].setSize(40, 30);
	    }
	    jLabelax2bxc[0].setLocation(70, 60); jLabelax2bxc[0].setText("x");
	    jLabelax2bxc[1].setLocation(84, 53); jLabelax2bxc[1].setText("2"); 
	    	jLabelax2bxc[1].setFont(new Font("Gabriola", 0, 17));
	    jLabelax2bxc[2].setLocation(98, 60); jLabelax2bxc[2].setText("+");
	    jLabelax2bxc[3].setLocation(165, 60); jLabelax2bxc[3].setText("x   =");
	    jLabelax2bxc[4].setLocation(25, 200); jLabelax2bxc[4].setText("x  =");
	    jLabelax2bxc[5].setLocation(39, 204); jLabelax2bxc[5].setText("1");
	    	jLabelax2bxc[5].setFont(new Font("Gabriola", 0, 16));
	    jLabelax2bxc[6].setLocation(25, 250); jLabelax2bxc[6].setText("x  =");
	    jLabelax2bxc[7].setLocation(39, 254); jLabelax2bxc[7].setText("2");
	    	jLabelax2bxc[7].setFont(new Font("Gabriola", 0, 16));
	    jButtonax2bxcSolve.setBounds(20, 130, 60, 30);
	    jButtonax2bxcSolve.setText("Solve");
	  	//Equation Ax3+Bx2+Cx=D											***
	    for(int i=0; i<7; i++){
	    	jTFieldax3bx2cxd[i]=new JTextField();
	    	jTFieldax3bx2cxd[i].setSize(40, 30);
	    }
	    jTFieldax3bx2cxd[0].setLocation(10, 45);
	    jTFieldax3bx2cxd[1].setLocation(80, 45);
	    jTFieldax3bx2cxd[2].setLocation(150, 45);
	    jTFieldax3bx2cxd[3].setLocation(220, 45);
	    jTFieldax3bx2cxd[4].setLocation(55, 165); jTFieldax3bx2cxd[4].setEditable(false); jTFieldax3bx2cxd[4].setSize(200, 30);
	    	jTFieldax3bx2cxd[4].setHorizontalAlignment(4);
	    jTFieldax3bx2cxd[5].setLocation(55, 213); jTFieldax3bx2cxd[5].setEditable(false); jTFieldax3bx2cxd[5].setSize(200, 30);
	    	jTFieldax3bx2cxd[5].setHorizontalAlignment(4);
	    jTFieldax3bx2cxd[6].setLocation(55, 261); jTFieldax3bx2cxd[6].setEditable(false); jTFieldax3bx2cxd[6].setSize(200, 30);
	    	jTFieldax3bx2cxd[6].setHorizontalAlignment(4);
	    for(int i=0; i<13; i++){
	    	jLabelax3bx2cxd[i]=new JLabel();
	    	jLabelax3bx2cxd[i].setFont(new Font("Gabriola", 0, 22));
	    	jLabelax3bx2cxd[i].setSize(40, 30);
	    }
	    jLabelax3bx2cxd[0].setLocation(51, 45); jLabelax3bx2cxd[0].setText("x");
	    jLabelax3bx2cxd[1].setLocation(63, 38); jLabelax3bx2cxd[1].setText("3");
	    	jLabelax3bx2cxd[1].setFont(new Font("Gabriola", 0, 17));
	    jLabelax3bx2cxd[2].setLocation(71, 45); jLabelax3bx2cxd[2].setText("+");
	    jLabelax3bx2cxd[3].setLocation(121, 45); jLabelax3bx2cxd[3].setText("x");
	    jLabelax3bx2cxd[4].setLocation(133, 38); jLabelax3bx2cxd[4].setText("2");
	    	jLabelax3bx2cxd[4].setFont(new Font("Gabriola", 0, 19));
	    jLabelax3bx2cxd[5].setLocation(141, 45); jLabelax3bx2cxd[5].setText("+");
	    jLabelax3bx2cxd[6].setLocation(191, 45); jLabelax3bx2cxd[6].setText("x  =");
	    jLabelax3bx2cxd[7].setLocation(20, 165); jLabelax3bx2cxd[7].setText("x   =");
	    jLabelax3bx2cxd[8].setLocation(30, 169); jLabelax3bx2cxd[8].setText("1");	
	    	jLabelax3bx2cxd[8].setFont(new Font("Gabriola", 0, 15));
	    jLabelax3bx2cxd[9].setLocation(20, 213); jLabelax3bx2cxd[9].setText("x   =");
	    jLabelax3bx2cxd[10].setLocation(30, 215); jLabelax3bx2cxd[10].setText("2");
			jLabelax3bx2cxd[10].setFont(new Font("Gabriola", 0, 15));
	    jLabelax3bx2cxd[11].setLocation(20, 261); jLabelax3bx2cxd[11].setText("x   =");
	    jLabelax3bx2cxd[12].setLocation(30, 264); jLabelax3bx2cxd[12].setText("3");
			jLabelax3bx2cxd[12].setFont(new Font("Gabriola", 0, 14));
	    jButtonax3bx2cxdSolve.setBounds(10, 105, 60, 30);
	    jButtonax3bx2cxdSolve.setText("Solve");
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
	    //adding TabbedPane
	    addTab("  ax+by=c  ", null, jPanelMain[0]);
	    addTab(" ax+by+cz=d ", null, jPanelMain[1]);
		addTab("  ax2+bx=c  ", null, jPanelMain[2]);
		addTab("ax3+bx2+cx=d", null, jPanelMain[3]);
		jPanelMain[0].add(jLabelMain[0]);
		jPanelMain[1].add(jLabelMain[1]);
		jPanelMain[2].add(jLabelMain[2]);
		jPanelMain[3].add(jLabelMain[3]);
		//Equation Ax+By=C
	    for(int i=0; i<8; i++){
	    	jLabelMain[0].add(jTFieldaxbyc[i]);
	    }
	    for(int i=0; i<6; i++){
	    	jLabelMain[0].add(jLabelaxbyc[i]);
	    }
	    jLabelMain[0].add(jButtonaxbycSolve);
	    //Equation Ax+By+Cz=D
	    for(int i=0; i<15; i++){
	    	jLabelMain[1].add(jTFieldaxbyczd[i]);
	    }
	    for(int i=0; i<12; i++){
	    	jLabelMain[1].add(jLabelaxbyczd[i]);
	    }
	    jLabelMain[1].add(jButtonaxbyczdSolve);
	  	//Equation Ax2+Bx=C
	    for(int i=0; i<5; i++){
	    	jLabelMain[2].add(jTFieldax2bxc[i]);
	    }
	    for(int i=0; i<8; i++){
	    	jLabelMain[2].add(jLabelax2bxc[i]);
	    }
	    jLabelMain[2].add(jButtonax2bxcSolve);
	  	//Equation Ax3+Bx2+Cx=D
	    for(int i=0; i<7; i++){
	    	jLabelMain[3].add(jTFieldax3bx2cxd[i]);
	    }
	    for(int i=0; i<13; i++){
	    	jLabelMain[3].add(jLabelax3bx2cxd[i]);
	    }
	    jLabelMain[3].add(jButtonax3bx2cxdSolve);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
	    setBounds(0, 0, 276, 420);
	    setTabPlacement(JTabbedPane.TOP);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  Additional  Initialization  																	  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										  End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	   End   Adding  Components  															 _______ A _______  _______A_______   Equation  Ax  Equation  Ax Cz  Equation  Ax 2  Ax2 Bx  Equation  Ax 3  Ax3 Bx 2  Bx2 Cx   Equation  Ax C 												  C												  Equation  Ax Cz D 											  D											  Equation  Ax 2  Ax2 Bx C 												  C												  Equation  Ax 3  Ax3 Bx 2  Bx2 Cx D 											  D											  adding  Tabbed Pane  TabbedPane  Equation  Ax  Equation  Ax Cz  Equation  Ax 2  Ax2 Bx  Equation  Ax 3  Ax3 Bx 2  Bx2 Cx  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Panel Main  jPanelMain J Panel  JPanel 4 j Label Main  jLabelMain J Label  JLabel 4 j T Fieldaxbyc  jTFieldaxbyc J Text Field  JTextField 8 j Labelaxbyc  jLabelaxbyc J Label  JLabel 6 j Buttonaxbyc Solve  jButtonaxbycSolve J Button  JButton j T Fieldaxbyczd  jTFieldaxbyczd J Text Field  JTextField 15 j Labelaxbyczd  jLabelaxbyczd J Label  JLabel 12 j Buttonaxbyczd Solve  jButtonaxbyczdSolve J Button  JButton j T Fieldax 2bxc  jTFieldax2bxc J Text Field  JTextField 5 j Labelax 2bxc  jLabelax2bxc J Label  JLabel 8 j Buttonax 2bxc Solve  jButtonax2bxcSolve J Button  JButton j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd J Text Field  JTextField 7 j Labelax 3bx 2cxd  jLabelax3bx2cxd J Label  JLabel 13 j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve J Button  JButton i 0 i 4 i j Panel Main  jPanelMain i J Panel  JPanel j Panel Main  jPanelMain i set Layout  setLayout j Label Main  jLabelMain i J Label  JLabel j Label Main  jLabelMain i set Layout  setLayout j Label Main  jLabelMain i set Bounds  setBounds 0 0 276 420 j Label Main  jLabelMain 0 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Equation Calculator Background 1  EquationCalculatorBackground1 jpg j Label Main  jLabelMain 1 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Equation Calculator Background 2  EquationCalculatorBackground2 jpg j Label Main  jLabelMain 2 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Equation Calculator Background 3  EquationCalculatorBackground3 jpg j Label Main  jLabelMain 3 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Equation Calculator Background 4  EquationCalculatorBackground4 jpg i 0 i 8 i j T Fieldaxbyc  jTFieldaxbyc i J Text Field  JTextField j T Fieldaxbyc  jTFieldaxbyc i set Size  setSize 40 30 j T Fieldaxbyc  jTFieldaxbyc 0 set Location  setLocation 24 40 j T Fieldaxbyc  jTFieldaxbyc 1 set Location  setLocation 105 40 j T Fieldaxbyc  jTFieldaxbyc 2 set Location  setLocation 190 40 j T Fieldaxbyc  jTFieldaxbyc 3 set Location  setLocation 24 100 j T Fieldaxbyc  jTFieldaxbyc 4 set Location  setLocation 105 100 j T Fieldaxbyc  jTFieldaxbyc 5 set Location  setLocation 190 100 j T Fieldaxbyc  jTFieldaxbyc 6 set Location  setLocation 57 210 j T Fieldaxbyc  jTFieldaxbyc 6 set Editable  setEditable j T Fieldaxbyc  jTFieldaxbyc 6 set Size  setSize 185 30 j T Fieldaxbyc  jTFieldaxbyc 6 set Horizontal Alignment  setHorizontalAlignment 4 j T Fieldaxbyc  jTFieldaxbyc 7 set Location  setLocation 57 260 j T Fieldaxbyc  jTFieldaxbyc 7 set Editable  setEditable j T Fieldaxbyc  jTFieldaxbyc 7 set Size  setSize 185 30 j T Fieldaxbyc  jTFieldaxbyc 7 set Horizontal Alignment  setHorizontalAlignment 4 i 0 i 6 i j Labelaxbyc  jLabelaxbyc i J Label  JLabel j Labelaxbyc  jLabelaxbyc i set Font  setFont Font Gabriola 0 26 j Labelaxbyc  jLabelaxbyc i set Size  setSize 40 30 j Labelaxbyc  jLabelaxbyc 0 set Location  setLocation 70 40 j Labelaxbyc  jLabelaxbyc 0 set Text  setText x j Labelaxbyc  jLabelaxbyc 1 set Location  setLocation 152 40 j Labelaxbyc  jLabelaxbyc 1 set Text  setText y j Labelaxbyc  jLabelaxbyc 2 set Location  setLocation 70 100 j Labelaxbyc  jLabelaxbyc 2 set Text  setText x j Labelaxbyc  jLabelaxbyc 3 set Location  setLocation 152 100 j Labelaxbyc  jLabelaxbyc 3 set Text  setText y j Labelaxbyc  jLabelaxbyc 4 set Location  setLocation 29 210 j Labelaxbyc  jLabelaxbyc 4 set Text  setText x j Labelaxbyc  jLabelaxbyc 5 set Location  setLocation 29 260 j Labelaxbyc  jLabelaxbyc 5 set Text  setText y j Buttonaxbyc Solve  jButtonaxbycSolve set Bounds  setBounds 24 155 60 30 j Buttonaxbyc Solve  jButtonaxbycSolve set Text  setText Solve i 0 i 15 i j T Fieldaxbyczd  jTFieldaxbyczd i J Text Field  JTextField j T Fieldaxbyczd  jTFieldaxbyczd i set Size  setSize 40 30 j T Fieldaxbyczd  jTFieldaxbyczd 0 set Location  setLocation 15 15 j T Fieldaxbyczd  jTFieldaxbyczd 1 set Location  setLocation 80 15 j T Fieldaxbyczd  jTFieldaxbyczd 2 set Location  setLocation 145 15 j T Fieldaxbyczd  jTFieldaxbyczd 3 set Location  setLocation 215 15 j T Fieldaxbyczd  jTFieldaxbyczd 4 set Location  setLocation 15 65 j T Fieldaxbyczd  jTFieldaxbyczd 5 set Location  setLocation 80 65 j T Fieldaxbyczd  jTFieldaxbyczd 6 set Location  setLocation 145 65 j T Fieldaxbyczd  jTFieldaxbyczd 7 set Location  setLocation 215 65 j T Fieldaxbyczd  jTFieldaxbyczd 8 set Location  setLocation 15 115 j T Fieldaxbyczd  jTFieldaxbyczd 9 set Location  setLocation 80 115 j T Fieldaxbyczd  jTFieldaxbyczd 10 set Location  setLocation 145 115 j T Fieldaxbyczd  jTFieldaxbyczd 11 set Location  setLocation 215 115 j T Fieldaxbyczd  jTFieldaxbyczd 12 set Location  setLocation 50 195 j T Fieldaxbyczd  jTFieldaxbyczd 12 set Editable  setEditable j T Fieldaxbyczd  jTFieldaxbyczd 12 set Size  setSize 190 30 j T Fieldaxbyczd  jTFieldaxbyczd 12 set Horizontal Alignment  setHorizontalAlignment 4 j T Fieldaxbyczd  jTFieldaxbyczd 13 set Location  setLocation 50 238 j T Fieldaxbyczd  jTFieldaxbyczd 13 set Editable  setEditable j T Fieldaxbyczd  jTFieldaxbyczd 13 set Size  setSize 190 30 j T Fieldaxbyczd  jTFieldaxbyczd 13 set Horizontal Alignment  setHorizontalAlignment 4 j T Fieldaxbyczd  jTFieldaxbyczd 14 set Location  setLocation 50 280 j T Fieldaxbyczd  jTFieldaxbyczd 14 set Editable  setEditable j T Fieldaxbyczd  jTFieldaxbyczd 14 set Size  setSize 190 30 j T Fieldaxbyczd  jTFieldaxbyczd 14 set Horizontal Alignment  setHorizontalAlignment 4 i 0 i 12 i j Labelaxbyczd  jLabelaxbyczd i J Label  JLabel j Labelaxbyczd  jLabelaxbyczd i set Font  setFont Font Gabriola 0 22 j Labelaxbyczd  jLabelaxbyczd i set Size  setSize 40 30 j Labelaxbyczd  jLabelaxbyczd 0 set Location  setLocation 58 15 j Labelaxbyczd  jLabelaxbyczd 0 set Text  setText x j Labelaxbyczd  jLabelaxbyczd 1 set Location  setLocation 123 15 j Labelaxbyczd  jLabelaxbyczd 1 set Text  setText y j Labelaxbyczd  jLabelaxbyczd 2 set Location  setLocation 188 15 j Labelaxbyczd  jLabelaxbyczd 2 set Text  setText z j Labelaxbyczd  jLabelaxbyczd 3 set Location  setLocation 58 65 j Labelaxbyczd  jLabelaxbyczd 3 set Text  setText x j Labelaxbyczd  jLabelaxbyczd 4 set Location  setLocation 123 65 j Labelaxbyczd  jLabelaxbyczd 4 set Text  setText y j Labelaxbyczd  jLabelaxbyczd 5 set Location  setLocation 188 65 j Labelaxbyczd  jLabelaxbyczd 5 set Text  setText z j Labelaxbyczd  jLabelaxbyczd 6 set Location  setLocation 58 115 j Labelaxbyczd  jLabelaxbyczd 6 set Text  setText x j Labelaxbyczd  jLabelaxbyczd 7 set Location  setLocation 123 115 j Labelaxbyczd  jLabelaxbyczd 7 set Text  setText y j Labelaxbyczd  jLabelaxbyczd 8 set Location  setLocation 188 115 j Labelaxbyczd  jLabelaxbyczd 8 set Text  setText z j Labelaxbyczd  jLabelaxbyczd 9 set Location  setLocation 25 195 j Labelaxbyczd  jLabelaxbyczd 9 set Text  setText x j Labelaxbyczd  jLabelaxbyczd 10 set Location  setLocation 25 238 j Labelaxbyczd  jLabelaxbyczd 10 set Text  setText y j Labelaxbyczd  jLabelaxbyczd 11 set Location  setLocation 25 280 j Labelaxbyczd  jLabelaxbyczd 11 set Text  setText z j Buttonaxbyczd Solve  jButtonaxbyczdSolve set Bounds  setBounds 15 155 60 30 j Buttonaxbyczd Solve  jButtonaxbyczdSolve set Text  setText Solve i 0 i 5 i j T Fieldax 2bxc  jTFieldax2bxc i J Text Field  JTextField j T Fieldax 2bxc  jTFieldax2bxc i set Size  setSize 40 30 j T Fieldax 2bxc  jTFieldax2bxc 0 set Location  setLocation 20 60 j T Fieldax 2bxc  jTFieldax2bxc 1 set Location  setLocation 115 60 j T Fieldax 2bxc  jTFieldax2bxc 2 set Location  setLocation 210 60 j T Fieldax 2bxc  jTFieldax2bxc 3 set Location  setLocation 60 200 j T Fieldax 2bxc  jTFieldax2bxc 3 set Editable  setEditable j T Fieldax 2bxc  jTFieldax2bxc 3 set Size  setSize 188 30 j T Fieldax 2bxc  jTFieldax2bxc 3 set Horizontal Alignment  setHorizontalAlignment 4 j T Fieldax 2bxc  jTFieldax2bxc 4 set Location  setLocation 60 250 j T Fieldax 2bxc  jTFieldax2bxc 4 set Editable  setEditable j T Fieldax 2bxc  jTFieldax2bxc 4 set Size  setSize 188 30 j T Fieldax 2bxc  jTFieldax2bxc 4 set Horizontal Alignment  setHorizontalAlignment 4 i 0 i 8 i j Labelax 2bxc  jLabelax2bxc i J Label  JLabel j Labelax 2bxc  jLabelax2bxc i set Font  setFont Font Gabriola 0 28 j Labelax 2bxc  jLabelax2bxc i set Size  setSize 40 30 j Labelax 2bxc  jLabelax2bxc 0 set Location  setLocation 70 60 j Labelax 2bxc  jLabelax2bxc 0 set Text  setText x j Labelax 2bxc  jLabelax2bxc 1 set Location  setLocation 84 53 j Labelax 2bxc  jLabelax2bxc 1 set Text  setText 2 j Labelax 2bxc  jLabelax2bxc 1 set Font  setFont Font Gabriola 0 17 j Labelax 2bxc  jLabelax2bxc 2 set Location  setLocation 98 60 j Labelax 2bxc  jLabelax2bxc 2 set Text  setText j Labelax 2bxc  jLabelax2bxc 3 set Location  setLocation 165 60 j Labelax 2bxc  jLabelax2bxc 3 set Text  setText x j Labelax 2bxc  jLabelax2bxc 4 set Location  setLocation 25 200 j Labelax 2bxc  jLabelax2bxc 4 set Text  setText x j Labelax 2bxc  jLabelax2bxc 5 set Location  setLocation 39 204 j Labelax 2bxc  jLabelax2bxc 5 set Text  setText 1 j Labelax 2bxc  jLabelax2bxc 5 set Font  setFont Font Gabriola 0 16 j Labelax 2bxc  jLabelax2bxc 6 set Location  setLocation 25 250 j Labelax 2bxc  jLabelax2bxc 6 set Text  setText x j Labelax 2bxc  jLabelax2bxc 7 set Location  setLocation 39 254 j Labelax 2bxc  jLabelax2bxc 7 set Text  setText 2 j Labelax 2bxc  jLabelax2bxc 7 set Font  setFont Font Gabriola 0 16 j Buttonax 2bxc Solve  jButtonax2bxcSolve set Bounds  setBounds 20 130 60 30 j Buttonax 2bxc Solve  jButtonax2bxcSolve set Text  setText Solve i 0 i 7 i j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd i J Text Field  JTextField j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd i set Size  setSize 40 30 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 0 set Location  setLocation 10 45 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 1 set Location  setLocation 80 45 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 2 set Location  setLocation 150 45 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 3 set Location  setLocation 220 45 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 4 set Location  setLocation 55 165 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 4 set Editable  setEditable j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 4 set Size  setSize 200 30 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 4 set Horizontal Alignment  setHorizontalAlignment 4 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 5 set Location  setLocation 55 213 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 5 set Editable  setEditable j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 5 set Size  setSize 200 30 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 5 set Horizontal Alignment  setHorizontalAlignment 4 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 6 set Location  setLocation 55 261 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 6 set Editable  setEditable j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 6 set Size  setSize 200 30 j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd 6 set Horizontal Alignment  setHorizontalAlignment 4 i 0 i 13 i j Labelax 3bx 2cxd  jLabelax3bx2cxd i J Label  JLabel j Labelax 3bx 2cxd  jLabelax3bx2cxd i set Font  setFont Font Gabriola 0 22 j Labelax 3bx 2cxd  jLabelax3bx2cxd i set Size  setSize 40 30 j Labelax 3bx 2cxd  jLabelax3bx2cxd 0 set Location  setLocation 51 45 j Labelax 3bx 2cxd  jLabelax3bx2cxd 0 set Text  setText x j Labelax 3bx 2cxd  jLabelax3bx2cxd 1 set Location  setLocation 63 38 j Labelax 3bx 2cxd  jLabelax3bx2cxd 1 set Text  setText 3 j Labelax 3bx 2cxd  jLabelax3bx2cxd 1 set Font  setFont Font Gabriola 0 17 j Labelax 3bx 2cxd  jLabelax3bx2cxd 2 set Location  setLocation 71 45 j Labelax 3bx 2cxd  jLabelax3bx2cxd 2 set Text  setText j Labelax 3bx 2cxd  jLabelax3bx2cxd 3 set Location  setLocation 121 45 j Labelax 3bx 2cxd  jLabelax3bx2cxd 3 set Text  setText x j Labelax 3bx 2cxd  jLabelax3bx2cxd 4 set Location  setLocation 133 38 j Labelax 3bx 2cxd  jLabelax3bx2cxd 4 set Text  setText 2 j Labelax 3bx 2cxd  jLabelax3bx2cxd 4 set Font  setFont Font Gabriola 0 19 j Labelax 3bx 2cxd  jLabelax3bx2cxd 5 set Location  setLocation 141 45 j Labelax 3bx 2cxd  jLabelax3bx2cxd 5 set Text  setText j Labelax 3bx 2cxd  jLabelax3bx2cxd 6 set Location  setLocation 191 45 j Labelax 3bx 2cxd  jLabelax3bx2cxd 6 set Text  setText x j Labelax 3bx 2cxd  jLabelax3bx2cxd 7 set Location  setLocation 20 165 j Labelax 3bx 2cxd  jLabelax3bx2cxd 7 set Text  setText x j Labelax 3bx 2cxd  jLabelax3bx2cxd 8 set Location  setLocation 30 169 j Labelax 3bx 2cxd  jLabelax3bx2cxd 8 set Text  setText 1 j Labelax 3bx 2cxd  jLabelax3bx2cxd 8 set Font  setFont Font Gabriola 0 15 j Labelax 3bx 2cxd  jLabelax3bx2cxd 9 set Location  setLocation 20 213 j Labelax 3bx 2cxd  jLabelax3bx2cxd 9 set Text  setText x j Labelax 3bx 2cxd  jLabelax3bx2cxd 10 set Location  setLocation 30 215 j Labelax 3bx 2cxd  jLabelax3bx2cxd 10 set Text  setText 2 j Labelax 3bx 2cxd  jLabelax3bx2cxd 10 set Font  setFont Font Gabriola 0 15 j Labelax 3bx 2cxd  jLabelax3bx2cxd 11 set Location  setLocation 20 261 j Labelax 3bx 2cxd  jLabelax3bx2cxd 11 set Text  setText x j Labelax 3bx 2cxd  jLabelax3bx2cxd 12 set Location  setLocation 30 264 j Labelax 3bx 2cxd  jLabelax3bx2cxd 12 set Text  setText 3 j Labelax 3bx 2cxd  jLabelax3bx2cxd 12 set Font  setFont Font Gabriola 0 14 j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve set Bounds  setBounds 10 105 60 30 j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve set Text  setText Solve add Tab  addTab ax by c j Panel Main  jPanelMain 0 add Tab  addTab ax by cz d j Panel Main  jPanelMain 1 add Tab  addTab ax 2  ax2 bx c j Panel Main  jPanelMain 2 add Tab  addTab ax 3  ax3 bx 2  bx2 cx d j Panel Main  jPanelMain 3 j Panel Main  jPanelMain 0 add j Label Main  jLabelMain 0 j Panel Main  jPanelMain 1 add j Label Main  jLabelMain 1 j Panel Main  jPanelMain 2 add j Label Main  jLabelMain 2 j Panel Main  jPanelMain 3 add j Label Main  jLabelMain 3 i 0 i 8 i j Label Main  jLabelMain 0 add j T Fieldaxbyc  jTFieldaxbyc i i 0 i 6 i j Label Main  jLabelMain 0 add j Labelaxbyc  jLabelaxbyc i j Label Main  jLabelMain 0 add j Buttonaxbyc Solve  jButtonaxbycSolve i 0 i 15 i j Label Main  jLabelMain 1 add j T Fieldaxbyczd  jTFieldaxbyczd i i 0 i 12 i j Label Main  jLabelMain 1 add j Labelaxbyczd  jLabelaxbyczd i j Label Main  jLabelMain 1 add j Buttonaxbyczd Solve  jButtonaxbyczdSolve i 0 i 5 i j Label Main  jLabelMain 2 add j T Fieldax 2bxc  jTFieldax2bxc i i 0 i 8 i j Label Main  jLabelMain 2 add j Labelax 2bxc  jLabelax2bxc i j Label Main  jLabelMain 2 add j Buttonax 2bxc Solve  jButtonax2bxcSolve i 0 i 7 i j Label Main  jLabelMain 3 add j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd i i 0 i 13 i j Label Main  jLabelMain 3 add j Labelax 3bx 2cxd  jLabelax3bx2cxd i j Label Main  jLabelMain 3 add j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve set Bounds  setBounds 0 0 276 420 set Tab Placement  setTabPlacement J Tabbed Pane  JTabbedPane TOP 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, additional, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, equation, ax, cz, ax2, bx, ax3, bx2, cx, tabbed, pane, tabbedpane, criterion, frame, method, initializing, gui, variables, placing, specific, space, specifies, criteria, main, panel, jpanelmain, jpanel, label, jlabelmain, jlabel, fieldaxbyc, jtfieldaxbyc, text, field, jtextfield, labelaxbyc, jlabelaxbyc, buttonaxbyc, solve, jbuttonaxbycsolve, button, jbutton, fieldaxbyczd, jtfieldaxbyczd, labelaxbyczd, jlabelaxbyczd, buttonaxbyczd, jbuttonaxbyczdsolve, fieldax, jtfieldax2bxc, labelax, jlabelax2bxc, buttonax, jbuttonax2bxcsolve, jtfieldax3bx2cxd, jlabelax3bx2cxd, jbuttonax3bx2cxdsolve, set, layout, setlayout, setbounds, icon, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, calculator, background, equationcalculatorbackground1, jpg, equationcalculatorbackground2, equationcalculatorbackground3, equationcalculatorbackground4, size, setsize, location, setlocation, editable, seteditable, horizontal, alignment, sethorizontalalignment, font, setfont, gabriola, settext, add, tab, addtab, placement, settabplacement, jtabbedpane, top]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculatorGui.java,main
286 , 302
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		EquationCalculatorGui gui = new EquationCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 280, 420);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Equation Calculator Gui  EquationCalculatorGui gui Equation Calculator Gui  EquationCalculatorGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 230 115 280 420 j Frame  jFrame set Visible  setVisible j Frame  jFrame set Layout  setLayout j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, equation, calculator, gui, equationcalculatorgui, frame, jframe, bounds, setbounds, visible, setvisible, layout, setlayout, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculatorGui.java,EquationCalculatorGui
46 , 49
------------------------------------------------------------------------
	/***##Constructor##***/
	public EquationCalculatorGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Equation Calculator Gui  EquationCalculatorGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[equation, calculator, gui, equationcalculatorgui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationCalculatorGui.java,EquationCalculatorGui
16 , 303
------------------------------------------------------------------------
/**
 * A Equation Calculator GUI
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class EquationCalculatorGui extends JTabbedPane{
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JPanel jPanelMain[];
	JLabel jLabelMain[];
	//Additional Variables																		*******
    //Equation Ax+By=C
    JTextField jTFieldaxbyc[];
    JLabel jLabelaxbyc[];
    JButton jButtonaxbycSolve;
    //Equation Ax+By+Cz=D
    JTextField jTFieldaxbyczd[];
    JLabel jLabelaxbyczd[];
    JButton jButtonaxbyczdSolve;
  	//Equation Ax2+Bx=C
    JTextField jTFieldax2bxc[];
    JLabel jLabelax2bxc[];
    JButton jButtonax2bxcSolve;
  	//Equation Ax3+Bx2+Cx=D
    JTextField jTFieldax3bx2cxd[];
    JLabel jLabelax3bx2cxd[];
    JButton jButtonax3bx2cxdSolve;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public EquationCalculatorGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
   		jPanelMain = new JPanel[4];
   		jLabelMain = new JLabel[4];
   		//Additional Initialization 																	***
		//Equation Ax+By=C
	    jTFieldaxbyc = new JTextField[8];
	    jLabelaxbyc = new JLabel[6];
	    jButtonaxbycSolve = new JButton();
	    //Equation Ax+By+Cz=D
	    jTFieldaxbyczd = new JTextField[15];
	    jLabelaxbyczd = new JLabel[12];
	    jButtonaxbyczdSolve = new JButton();
	  	//Equation Ax2+Bx=C
	    jTFieldax2bxc = new JTextField[5];
	    jLabelax2bxc = new JLabel[8];
	    jButtonax2bxcSolve = new JButton();
	  	//Equation Ax3+Bx2+Cx=D
	    jTFieldax3bx2cxd = new JTextField[7];
	    jLabelax3bx2cxd = new JLabel[13];
	    jButtonax3bx2cxdSolve = new JButton();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
	    for(int i=0; i<4; i++){
			jPanelMain[i] = new JPanel();
			jPanelMain[i].setLayout(null);
			jLabelMain[i] = new JLabel();
			jLabelMain[i].setLayout(null);
			jLabelMain[i].setBounds(0, 0, 276, 420);
		}
		jLabelMain[0].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground1.jpg")));
		jLabelMain[1].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground2.jpg")));
		jLabelMain[2].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground3.jpg")));
		jLabelMain[3].setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"EquationCalculatorBackground4.jpg")));
		//Equation Ax+By=C												***
	    for(int i=0; i<8; i++){
	    	jTFieldaxbyc[i]=new JTextField();
	    	jTFieldaxbyc[i].setSize(40, 30);
	    }
	    jTFieldaxbyc[0].setLocation(24, 40);
	    jTFieldaxbyc[1].setLocation(105, 40);
	    jTFieldaxbyc[2].setLocation(190, 40);
	    jTFieldaxbyc[3].setLocation(24, 100);
	    jTFieldaxbyc[4].setLocation(105, 100);
	    jTFieldaxbyc[5].setLocation(190, 100);
	    jTFieldaxbyc[6].setLocation(57, 210); jTFieldaxbyc[6].setEditable(false); jTFieldaxbyc[6].setSize(185, 30);
	    	jTFieldaxbyc[6].setHorizontalAlignment(4);
	    jTFieldaxbyc[7].setLocation(57, 260); jTFieldaxbyc[7].setEditable(false); jTFieldaxbyc[7].setSize(185, 30);
    		jTFieldaxbyc[7].setHorizontalAlignment(4);
	    for(int i=0; i<6; i++){
	    	jLabelaxbyc[i]=new JLabel();
	    	jLabelaxbyc[i].setFont(new Font("Gabriola", 0, 26));
	    	jLabelaxbyc[i].setSize(40, 30);
	    }
	    jLabelaxbyc[0].setLocation(70, 40); jLabelaxbyc[0].setText("x  +");
	    jLabelaxbyc[1].setLocation(152, 40); jLabelaxbyc[1].setText("y  =");
	    jLabelaxbyc[2].setLocation(70, 100); jLabelaxbyc[2].setText("x  +");
	    jLabelaxbyc[3].setLocation(152, 100); jLabelaxbyc[3].setText("y  =");
	    jLabelaxbyc[4].setLocation(29, 210); jLabelaxbyc[4].setText("x =");
	    jLabelaxbyc[5].setLocation(29, 260); jLabelaxbyc[5].setText("y =");
	    jButtonaxbycSolve.setBounds(24, 155, 60, 30);
	    jButtonaxbycSolve.setText("Solve");
	    //Equation Ax+By+Cz=D											***
	    for(int i=0; i<15; i++){
	    	jTFieldaxbyczd[i]=new JTextField();
	    	jTFieldaxbyczd[i].setSize(40, 30);
	    }
	    jTFieldaxbyczd[0].setLocation(15, 15);
	    jTFieldaxbyczd[1].setLocation(80, 15);
	    jTFieldaxbyczd[2].setLocation(145, 15);
	    jTFieldaxbyczd[3].setLocation(215, 15);
	    jTFieldaxbyczd[4].setLocation(15, 65);
	    jTFieldaxbyczd[5].setLocation(80, 65);
	    jTFieldaxbyczd[6].setLocation(145, 65);
	    jTFieldaxbyczd[7].setLocation(215, 65);
	    jTFieldaxbyczd[8].setLocation(15, 115);
	    jTFieldaxbyczd[9].setLocation(80, 115);
	    jTFieldaxbyczd[10].setLocation(145, 115);
	    jTFieldaxbyczd[11].setLocation(215, 115);
	    jTFieldaxbyczd[12].setLocation(50, 195); jTFieldaxbyczd[12].setEditable(false); jTFieldaxbyczd[12].setSize(190, 30);
	    	jTFieldaxbyczd[12].setHorizontalAlignment(4);
	    jTFieldaxbyczd[13].setLocation(50, 238); jTFieldaxbyczd[13].setEditable(false); jTFieldaxbyczd[13].setSize(190, 30);
	    	jTFieldaxbyczd[13].setHorizontalAlignment(4);
	    jTFieldaxbyczd[14].setLocation(50, 280); jTFieldaxbyczd[14].setEditable(false); jTFieldaxbyczd[14].setSize(190, 30);
    		jTFieldaxbyczd[14].setHorizontalAlignment(4);
	    for(int i=0; i<12; i++){
	    	jLabelaxbyczd[i]=new JLabel();
	    	jLabelaxbyczd[i].setFont(new Font("Gabriola", 0, 22));
	    	jLabelaxbyczd[i].setSize(40, 30);
	    }
	    jLabelaxbyczd[0].setLocation(58, 15); jLabelaxbyczd[0].setText("x +");
	    jLabelaxbyczd[1].setLocation(123, 15); jLabelaxbyczd[1].setText("y +");
	    jLabelaxbyczd[2].setLocation(188, 15); jLabelaxbyczd[2].setText("z =");
	    jLabelaxbyczd[3].setLocation(58, 65); jLabelaxbyczd[3].setText("x +");
	    jLabelaxbyczd[4].setLocation(123, 65); jLabelaxbyczd[4].setText("y +");
	    jLabelaxbyczd[5].setLocation(188, 65); jLabelaxbyczd[5].setText("z =");
	    jLabelaxbyczd[6].setLocation(58, 115); jLabelaxbyczd[6].setText("x +");
	    jLabelaxbyczd[7].setLocation(123, 115); jLabelaxbyczd[7].setText("y +");
	    jLabelaxbyczd[8].setLocation(188, 115); jLabelaxbyczd[8].setText("z =");
	    jLabelaxbyczd[9].setLocation(25, 195); jLabelaxbyczd[9].setText("x =");
	    jLabelaxbyczd[10].setLocation(25, 238); jLabelaxbyczd[10].setText("y =");
	    jLabelaxbyczd[11].setLocation(25, 280); jLabelaxbyczd[11].setText("z =");
	    jButtonaxbyczdSolve.setBounds(15, 155, 60, 30);
	    jButtonaxbyczdSolve.setText("Solve");
	  	//Equation Ax2+Bx=C												***
	    for(int i=0; i<5; i++){
	    	jTFieldax2bxc[i]=new JTextField();
	    	jTFieldax2bxc[i].setSize(40, 30);
	    }
	    jTFieldax2bxc[0].setLocation(20, 60);
	    jTFieldax2bxc[1].setLocation(115, 60);
	    jTFieldax2bxc[2].setLocation(210, 60);
	    jTFieldax2bxc[3].setLocation(60, 200); jTFieldax2bxc[3].setEditable(false); jTFieldax2bxc[3].setSize(188, 30);
	    	jTFieldax2bxc[3].setHorizontalAlignment(4);
	    jTFieldax2bxc[4].setLocation(60, 250); jTFieldax2bxc[4].setEditable(false); jTFieldax2bxc[4].setSize(188, 30);
	    	jTFieldax2bxc[4].setHorizontalAlignment(4);
	    for(int i=0; i<8; i++){
	    	jLabelax2bxc[i]=new JLabel();
	    	jLabelax2bxc[i].setFont(new Font("Gabriola", 0, 28));
	    	jLabelax2bxc[i].setSize(40, 30);
	    }
	    jLabelax2bxc[0].setLocation(70, 60); jLabelax2bxc[0].setText("x");
	    jLabelax2bxc[1].setLocation(84, 53); jLabelax2bxc[1].setText("2"); 
	    	jLabelax2bxc[1].setFont(new Font("Gabriola", 0, 17));
	    jLabelax2bxc[2].setLocation(98, 60); jLabelax2bxc[2].setText("+");
	    jLabelax2bxc[3].setLocation(165, 60); jLabelax2bxc[3].setText("x   =");
	    jLabelax2bxc[4].setLocation(25, 200); jLabelax2bxc[4].setText("x  =");
	    jLabelax2bxc[5].setLocation(39, 204); jLabelax2bxc[5].setText("1");
	    	jLabelax2bxc[5].setFont(new Font("Gabriola", 0, 16));
	    jLabelax2bxc[6].setLocation(25, 250); jLabelax2bxc[6].setText("x  =");
	    jLabelax2bxc[7].setLocation(39, 254); jLabelax2bxc[7].setText("2");
	    	jLabelax2bxc[7].setFont(new Font("Gabriola", 0, 16));
	    jButtonax2bxcSolve.setBounds(20, 130, 60, 30);
	    jButtonax2bxcSolve.setText("Solve");
	  	//Equation Ax3+Bx2+Cx=D											***
	    for(int i=0; i<7; i++){
	    	jTFieldax3bx2cxd[i]=new JTextField();
	    	jTFieldax3bx2cxd[i].setSize(40, 30);
	    }
	    jTFieldax3bx2cxd[0].setLocation(10, 45);
	    jTFieldax3bx2cxd[1].setLocation(80, 45);
	    jTFieldax3bx2cxd[2].setLocation(150, 45);
	    jTFieldax3bx2cxd[3].setLocation(220, 45);
	    jTFieldax3bx2cxd[4].setLocation(55, 165); jTFieldax3bx2cxd[4].setEditable(false); jTFieldax3bx2cxd[4].setSize(200, 30);
	    	jTFieldax3bx2cxd[4].setHorizontalAlignment(4);
	    jTFieldax3bx2cxd[5].setLocation(55, 213); jTFieldax3bx2cxd[5].setEditable(false); jTFieldax3bx2cxd[5].setSize(200, 30);
	    	jTFieldax3bx2cxd[5].setHorizontalAlignment(4);
	    jTFieldax3bx2cxd[6].setLocation(55, 261); jTFieldax3bx2cxd[6].setEditable(false); jTFieldax3bx2cxd[6].setSize(200, 30);
	    	jTFieldax3bx2cxd[6].setHorizontalAlignment(4);
	    for(int i=0; i<13; i++){
	    	jLabelax3bx2cxd[i]=new JLabel();
	    	jLabelax3bx2cxd[i].setFont(new Font("Gabriola", 0, 22));
	    	jLabelax3bx2cxd[i].setSize(40, 30);
	    }
	    jLabelax3bx2cxd[0].setLocation(51, 45); jLabelax3bx2cxd[0].setText("x");
	    jLabelax3bx2cxd[1].setLocation(63, 38); jLabelax3bx2cxd[1].setText("3");
	    	jLabelax3bx2cxd[1].setFont(new Font("Gabriola", 0, 17));
	    jLabelax3bx2cxd[2].setLocation(71, 45); jLabelax3bx2cxd[2].setText("+");
	    jLabelax3bx2cxd[3].setLocation(121, 45); jLabelax3bx2cxd[3].setText("x");
	    jLabelax3bx2cxd[4].setLocation(133, 38); jLabelax3bx2cxd[4].setText("2");
	    	jLabelax3bx2cxd[4].setFont(new Font("Gabriola", 0, 19));
	    jLabelax3bx2cxd[5].setLocation(141, 45); jLabelax3bx2cxd[5].setText("+");
	    jLabelax3bx2cxd[6].setLocation(191, 45); jLabelax3bx2cxd[6].setText("x  =");
	    jLabelax3bx2cxd[7].setLocation(20, 165); jLabelax3bx2cxd[7].setText("x   =");
	    jLabelax3bx2cxd[8].setLocation(30, 169); jLabelax3bx2cxd[8].setText("1");	
	    	jLabelax3bx2cxd[8].setFont(new Font("Gabriola", 0, 15));
	    jLabelax3bx2cxd[9].setLocation(20, 213); jLabelax3bx2cxd[9].setText("x   =");
	    jLabelax3bx2cxd[10].setLocation(30, 215); jLabelax3bx2cxd[10].setText("2");
			jLabelax3bx2cxd[10].setFont(new Font("Gabriola", 0, 15));
	    jLabelax3bx2cxd[11].setLocation(20, 261); jLabelax3bx2cxd[11].setText("x   =");
	    jLabelax3bx2cxd[12].setLocation(30, 264); jLabelax3bx2cxd[12].setText("3");
			jLabelax3bx2cxd[12].setFont(new Font("Gabriola", 0, 14));
	    jButtonax3bx2cxdSolve.setBounds(10, 105, 60, 30);
	    jButtonax3bx2cxdSolve.setText("Solve");
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
	    //adding TabbedPane
	    addTab("  ax+by=c  ", null, jPanelMain[0]);
	    addTab(" ax+by+cz=d ", null, jPanelMain[1]);
		addTab("  ax2+bx=c  ", null, jPanelMain[2]);
		addTab("ax3+bx2+cx=d", null, jPanelMain[3]);
		jPanelMain[0].add(jLabelMain[0]);
		jPanelMain[1].add(jLabelMain[1]);
		jPanelMain[2].add(jLabelMain[2]);
		jPanelMain[3].add(jLabelMain[3]);
		//Equation Ax+By=C
	    for(int i=0; i<8; i++){
	    	jLabelMain[0].add(jTFieldaxbyc[i]);
	    }
	    for(int i=0; i<6; i++){
	    	jLabelMain[0].add(jLabelaxbyc[i]);
	    }
	    jLabelMain[0].add(jButtonaxbycSolve);
	    //Equation Ax+By+Cz=D
	    for(int i=0; i<15; i++){
	    	jLabelMain[1].add(jTFieldaxbyczd[i]);
	    }
	    for(int i=0; i<12; i++){
	    	jLabelMain[1].add(jLabelaxbyczd[i]);
	    }
	    jLabelMain[1].add(jButtonaxbyczdSolve);
	  	//Equation Ax2+Bx=C
	    for(int i=0; i<5; i++){
	    	jLabelMain[2].add(jTFieldax2bxc[i]);
	    }
	    for(int i=0; i<8; i++){
	    	jLabelMain[2].add(jLabelax2bxc[i]);
	    }
	    jLabelMain[2].add(jButtonax2bxcSolve);
	  	//Equation Ax3+Bx2+Cx=D
	    for(int i=0; i<7; i++){
	    	jLabelMain[3].add(jTFieldax3bx2cxd[i]);
	    }
	    for(int i=0; i<13; i++){
	    	jLabelMain[3].add(jLabelax3bx2cxd[i]);
	    }
	    jLabelMain[3].add(jButtonax3bx2cxdSolve);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
	    setBounds(0, 0, 276, 420);
	    setTabPlacement(JTabbedPane.TOP);
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		EquationCalculatorGui gui = new EquationCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 280, 420);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Equation Calculator Gui  EquationCalculatorGui   Equation  Ax  Equation  Ax Cz  Equation  Ax 2  Ax2 Bx  Equation  Ax 3  Ax3 Bx 2  Bx2 Cx   
    Equation  Calculator  GUI 
  GUI
   
      Minhas  Kamal 
  Kamal
  J Panel  JPanel j Panel Main  jPanelMain J Label  JLabel j Label Main  jLabelMain J Text Field  JTextField j T Fieldaxbyc  jTFieldaxbyc J Label  JLabel j Labelaxbyc  jLabelaxbyc J Button  JButton j Buttonaxbyc Solve  jButtonaxbycSolve J Text Field  JTextField j T Fieldaxbyczd  jTFieldaxbyczd J Label  JLabel j Labelaxbyczd  jLabelaxbyczd J Button  JButton j Buttonaxbyczd Solve  jButtonaxbyczdSolve J Text Field  JTextField j T Fieldax 2bxc  jTFieldax2bxc J Label  JLabel j Labelax 2bxc  jLabelax2bxc J Button  JButton j Buttonax 2bxc Solve  jButtonax2bxcSolve J Text Field  JTextField j T Fieldax 3bx 2cxd  jTFieldax3bx2cxd J Label  JLabel j Labelax 3bx 2cxd  jLabelax3bx2cxd J Button  JButton j Buttonax 3bx 2cxd Solve  jButtonax3bx2cxdSolve 
------------------------------------------------------------------------
[equation, calculator, gui, equationcalculatorgui, ax, cz, ax2, bx, ax3, bx2, cx, minhas, kamal, panel, jpanel, main, jpanelmain, label, jlabel, jlabelmain, text, field, jtextfield, fieldaxbyc, jtfieldaxbyc, labelaxbyc, jlabelaxbyc, button, jbutton, buttonaxbyc, solve, jbuttonaxbycsolve, fieldaxbyczd, jtfieldaxbyczd, labelaxbyczd, jlabelaxbyczd, buttonaxbyczd, jbuttonaxbyczdsolve, fieldax, jtfieldax2bxc, labelax, jlabelax2bxc, buttonax, jbuttonax2bxcsolve, jtfieldax3bx2cxd, jlabelax3bx2cxd, jbuttonax3bx2cxdsolve]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,AXBYC
8 , 38
------------------------------------------------------------------------
	//solves the equation ax+by=c
	public String[] AXBYC(String a1, String b1, String c1, String a2, String b2, String c2){	
		String xy[] = new String[2];	//holds resulting values
		try{
			double A1 = Double.parseDouble(a1);
			double B1 = Double.parseDouble(b1);
			double C1 = Double.parseDouble(c1);
			double A2 = Double.parseDouble(a2);
			double B2 = Double.parseDouble(b2);
			double C2 = Double.parseDouble(c2);
			if((A1*B2-A2*B1)!=0){
				xy[0]= "" + ( (C1*B2-C2*B1)/(A1*B2-A2*B1) );
				xy[1]= "" + ( (A1*C2-A2*C1)/(A1*B2-A2*B1) );
				//For better understanding ignore double number
				if((xy[0].indexOf(".")+4)<xy[0].length()){
					double gcd=gcdFinder(C1*B2-C2*B1, A1*B2-A2*B1);
					xy[0]= "(" + (C1*B2-C2*B1)/gcd + ") / (" + (A1*B2-A2*B1)/gcd + ")";
				}
				if((xy[1].indexOf(".")+4)<xy[1].length()){
					double gcd=gcdFinder(A1*C2-A2*C1, A1*B2-A2*B1);
					xy[1]= "(" + (A1*C2-A2*C1)/gcd + ") / (" + (A1*B2-A2*B1)/gcd + ")";
				}
			}else{
				xy[0]= "No Answer!";
				xy[1]= "No Answer!";
			}
		}catch(Exception e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}
		return xy;
	}

------------------------------------------------------------------------
 AXBYC  solves   equation  ax  holds  resulting  values    understanding  ignore  double  number   String xy String 2 A 1  A1 Double parse Double  parseDouble a 1  a1 B 1  B1 Double parse Double  parseDouble b 1  b1 C 1  C1 Double parse Double  parseDouble c 1  c1 A 2  A2 Double parse Double  parseDouble a 2  a2 B 2  B2 Double parse Double  parseDouble b 2  b2 C 2  C2 Double parse Double  parseDouble c 2  c2 A 1  A1 B 2  B2 A 2  A2 B 1  B1 0 xy 0 C 1  C1 B 2  B2 C 2  C2 B 1  B1 A 1  A1 B 2  B2 A 2  A2 B 1  B1 xy 1 A 1  A1 C 2  C2 A 2  A2 C 1  C1 A 1  A1 B 2  B2 A 2  A2 B 1  B1 xy 0 index Of  indexOf 4 xy 0 length gcd gcd Finder  gcdFinder C 1  C1 B 2  B2 C 2  C2 B 1  B1 A 1  A1 B 2  B2 A 2  A2 B 1  B1 xy 0 C 1  C1 B 2  B2 C 2  C2 B 1  B1 gcd A 1  A1 B 2  B2 A 2  A2 B 1  B1 gcd xy 1 index Of  indexOf 4 xy 1 length gcd gcd Finder  gcdFinder A 1  A1 C 2  C2 A 2  A2 C 1  C1 A 1  A1 B 2  B2 A 2  A2 B 1  B1 xy 1 A 1  A1 C 2  C2 A 2  A2 C 1  C1 gcd A 1  A1 B 2  B2 A 2  A2 B 1  B1 gcd xy 0 No Answer xy 1 No Answer Exception e Message Wrong Input n Numbers only 420 xy 
------------------------------------------------------------------------
[axbyc, solves, equation, ax, holds, resulting, values, understanding, ignore, double, number, string, xy, a1, parse, parsedouble, b1, c1, a2, b2, c2, index, indexof, length, gcd, finder, gcdfinder, answer, exception, message, wrong, input, numbers]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,AXBYCZD
39 , 83
------------------------------------------------------------------------
	//solves the equation ax+by+cz=d
	public String[] AXBYCZD(String a1, String b1, String c1, String d1, String a2, String b2, String c2, String d2, String a3,
							String b3, String c3, String d3){	
		String xyz[] = new String[3];	//holds resulting values
		try{
			double A1 = Double.parseDouble(a1);
			double B1 = Double.parseDouble(b1);
			double C1 = Double.parseDouble(c1);
			double D1 = Double.parseDouble(d1);
			double A2 = Double.parseDouble(a2);
			double B2 = Double.parseDouble(b2);
			double C2 = Double.parseDouble(c2);
			double D2 = Double.parseDouble(d2);
			double A3 = Double.parseDouble(a3);
			double B3 = Double.parseDouble(b3);
			double C3 = Double.parseDouble(c3);
			double D3 = Double.parseDouble(d3);
			Double divisor = A1*(B2*C3-C2*B3) + B1*(C2*A3-A2*C3) + C1*(A2*B3-B2*A3);
			if(divisor!=0){
				xyz[0]= "" + ( (D1*(B2*C3-C2*B3) + B1*(C2*D3-D2*C3) + C1*(D2*B3-B2*D3)) / divisor );
				xyz[1]= "" + ( (A1*(D2*C3-C2*D3) + D1*(C2*A3-A2*C3) + C1*(A2*D3-D2*A3)) / divisor );
				xyz[2]= "" + ( (A1*(B2*D3-D2*B3) + B1*(D2*A3-A2*D3) + D1*(A2*B3-B2*A3)) / divisor );
				//For better understanding ignore double number
				if((xyz[0].indexOf(".")+4)<xyz[0].length()){
					double gcd=gcdFinder(D1*(B2*C3-C2*B3) + B1*(C2*D3-D2*C3) + C1*(D2*B3-B2*D3), divisor);
					xyz[0]="(" + (D1*(B2*C3-C2*B3) + B1*(C2*D3-D2*C3) + C1*(D2*B3-B2*D3))/gcd + ") / (" + divisor/gcd + ")";
				}
				if((xyz[1].indexOf(".")+4)<xyz[1].length()){
					double gcd=gcdFinder(A1*(D2*C3-C2*D3) + D1*(C2*A3-A2*C3) + C1*(A2*D3-D2*A3), divisor);
					xyz[1]="(" + (A1*(D2*C3-C2*D3) + D1*(C2*A3-A2*C3) + C1*(A2*D3-D2*A3))/gcd + ") / (" + divisor/gcd + ")";
				}
				if((xyz[2].indexOf(".")+4)<xyz[2].length()){
					double gcd=gcdFinder(A1*(B2*D3-D2*B3) + B1*(D2*A3-A2*D3) + D1*(A2*B3-B2*A3), divisor);
					xyz[2]="(" + (A1*(B2*D3-D2*B3) + B1*(D2*A3-A2*D3) + D1*(A2*B3-B2*A3))/gcd + ") / (" + divisor/gcd + ")";
				}
			}else{
				xyz[0]= "No Answer!";
				xyz[1]= "No Answer!";
				xyz[2]= "No Answer!";
			}
		}catch(Exception e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}
		return xyz;
	}

------------------------------------------------------------------------
 AXBYCZD  solves   equation  ax cz  holds  resulting  values    understanding  ignore  double  number   String xyz String 3 A 1  A1 Double parse Double  parseDouble a 1  a1 B 1  B1 Double parse Double  parseDouble b 1  b1 C 1  C1 Double parse Double  parseDouble c 1  c1 D 1  D1 Double parse Double  parseDouble d 1  d1 A 2  A2 Double parse Double  parseDouble a 2  a2 B 2  B2 Double parse Double  parseDouble b 2  b2 C 2  C2 Double parse Double  parseDouble c 2  c2 D 2  D2 Double parse Double  parseDouble d 2  d2 A 3  A3 Double parse Double  parseDouble a 3  a3 B 3  B3 Double parse Double  parseDouble b 3  b3 C 3  C3 Double parse Double  parseDouble c 3  c3 D 3  D3 Double parse Double  parseDouble d 3  d3 Double divisor A 1  A1 B 2  B2 C 3  C3 C 2  C2 B 3  B3 B 1  B1 C 2  C2 A 3  A3 A 2  A2 C 3  C3 C 1  C1 A 2  A2 B 3  B3 B 2  B2 A 3  A3 divisor 0 xyz 0 D 1  D1 B 2  B2 C 3  C3 C 2  C2 B 3  B3 B 1  B1 C 2  C2 D 3  D3 D 2  D2 C 3  C3 C 1  C1 D 2  D2 B 3  B3 B 2  B2 D 3  D3 divisor xyz 1 A 1  A1 D 2  D2 C 3  C3 C 2  C2 D 3  D3 D 1  D1 C 2  C2 A 3  A3 A 2  A2 C 3  C3 C 1  C1 A 2  A2 D 3  D3 D 2  D2 A 3  A3 divisor xyz 2 A 1  A1 B 2  B2 D 3  D3 D 2  D2 B 3  B3 B 1  B1 D 2  D2 A 3  A3 A 2  A2 D 3  D3 D 1  D1 A 2  A2 B 3  B3 B 2  B2 A 3  A3 divisor xyz 0 index Of  indexOf 4 xyz 0 length gcd gcd Finder  gcdFinder D 1  D1 B 2  B2 C 3  C3 C 2  C2 B 3  B3 B 1  B1 C 2  C2 D 3  D3 D 2  D2 C 3  C3 C 1  C1 D 2  D2 B 3  B3 B 2  B2 D 3  D3 divisor xyz 0 D 1  D1 B 2  B2 C 3  C3 C 2  C2 B 3  B3 B 1  B1 C 2  C2 D 3  D3 D 2  D2 C 3  C3 C 1  C1 D 2  D2 B 3  B3 B 2  B2 D 3  D3 gcd divisor gcd xyz 1 index Of  indexOf 4 xyz 1 length gcd gcd Finder  gcdFinder A 1  A1 D 2  D2 C 3  C3 C 2  C2 D 3  D3 D 1  D1 C 2  C2 A 3  A3 A 2  A2 C 3  C3 C 1  C1 A 2  A2 D 3  D3 D 2  D2 A 3  A3 divisor xyz 1 A 1  A1 D 2  D2 C 3  C3 C 2  C2 D 3  D3 D 1  D1 C 2  C2 A 3  A3 A 2  A2 C 3  C3 C 1  C1 A 2  A2 D 3  D3 D 2  D2 A 3  A3 gcd divisor gcd xyz 2 index Of  indexOf 4 xyz 2 length gcd gcd Finder  gcdFinder A 1  A1 B 2  B2 D 3  D3 D 2  D2 B 3  B3 B 1  B1 D 2  D2 A 3  A3 A 2  A2 D 3  D3 D 1  D1 A 2  A2 B 3  B3 B 2  B2 A 3  A3 divisor xyz 2 A 1  A1 B 2  B2 D 3  D3 D 2  D2 B 3  B3 B 1  B1 D 2  D2 A 3  A3 A 2  A2 D 3  D3 D 1  D1 A 2  A2 B 3  B3 B 2  B2 A 3  A3 gcd divisor gcd xyz 0 No Answer xyz 1 No Answer xyz 2 No Answer Exception e Message Wrong Input n Numbers only 420 xyz 
------------------------------------------------------------------------
[axbyczd, solves, equation, ax, cz, holds, resulting, values, understanding, ignore, double, number, string, xyz, a1, parse, parsedouble, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, divisor, index, indexof, length, gcd, finder, gcdfinder, answer, exception, message, wrong, input, numbers]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,AX2BXC
84 , 116
------------------------------------------------------------------------
	//solves the equation ax2+b2=c
	public String[] AX2BXC(String a, String b, String c){
		String[] x=new String[2];	//holds resulting values
		try{
			double A = Double.parseDouble(a);
			double B = Double.parseDouble(b);
			double C = Double.parseDouble(c);
			double det = B*B - 4*A*C;		//determiner 
			if(det<0){	//unreal root
				x[0]=(-B)/(2*A) + " + i Sqrt(" + det/(4*A*A) + ")";
				x[1]=(-B)/(2*A) + " - i Sqrt(" + det/(4*A*A) + ")";
				if(x[0].length()>35){
					double gcd1=gcdFinder(-B, 2*A),
						gcd2=gcdFinder(det, 4*A*A);
					x[0] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") + i Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";
					x[1] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") - i Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";				
				}
			}else{		//real root
				double Sqrtd = Math.sqrt(det);
				x[0]="" + ( (-B+Sqrtd)/(2*A) );
				x[1]="" + ( (-B-Sqrtd)/(2*A) );
				if((x[0].indexOf(".")+4)<x[0].length()){
					double gcd1=gcdFinder(-B, 2*A),
							gcd2=gcdFinder(det, 4*A*A);
					x[0] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") + Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";
					x[1] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") - Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";				
				}
			}
		}catch(Exception e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}
		return x;
	}

------------------------------------------------------------------------
 AX 2 BXC  AX2BXC  solves   equation  ax 2  ax2 b 2  b2  holds  resulting  values  determiner  unreal  root  real  root   String x String 2 A Double parse Double  parseDouble a B Double parse Double  parseDouble b C Double parse Double  parseDouble c det B B 4 A C det 0 x 0 B 2 A i Sqrt det 4 A A x 1 B 2 A i Sqrt det 4 A A x 0 length 35 gcd 1  gcd1 gcd Finder  gcdFinder B 2 A gcd 2  gcd2 gcd Finder  gcdFinder det 4 A A x 0 B gcd 1  gcd1 2 A gcd 1  gcd1 i Sqrt det gcd 2  gcd2 4 A A gcd 2  gcd2 x 1 B gcd 1  gcd1 2 A gcd 1  gcd1 i Sqrt det gcd 2  gcd2 4 A A gcd 2  gcd2 Sqrtd Math sqrt det x 0 B Sqrtd 2 A x 1 B Sqrtd 2 A x 0 index Of  indexOf 4 x 0 length gcd 1  gcd1 gcd Finder  gcdFinder B 2 A gcd 2  gcd2 gcd Finder  gcdFinder det 4 A A x 0 B gcd 1  gcd1 2 A gcd 1  gcd1 Sqrt det gcd 2  gcd2 4 A A gcd 2  gcd2 x 1 B gcd 1  gcd1 2 A gcd 1  gcd1 Sqrt det gcd 2  gcd2 4 A A gcd 2  gcd2 Exception e Message Wrong Input n Numbers only 420 x 
------------------------------------------------------------------------
[ax, bxc, ax2bxc, solves, equation, ax2, b2, holds, resulting, values, determiner, unreal, root, real, string, double, parse, parsedouble, det, sqrt, length, gcd, gcd1, finder, gcdfinder, gcd2, sqrtd, math, index, indexof, exception, message, wrong, input, numbers]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,AX3BX2CXD
117 , 157
------------------------------------------------------------------------
	//solves the equation ax3+bx2+cx=d
	public String[] AX3BX2CXD(String a, String b, String c, String d){
		String x[] = new String[3];	//holds resulting values
		try{
			double A = Double.parseDouble(a);
			double B = Double.parseDouble(b);
			double C = Double.parseDouble(c);
			double D = Double.parseDouble(d);
			double result=0;		//The first real root
			for(double i=0; i<=500; i=(i+0.001)){	//finds the first real root
				result=(A*i*i*i)+(B*i*i)+(C*i)-D;
				if(result<0.0001 && result>-0.0001){	//when root is positive
					x[0] = ""+numberSimpleMaker(i);
				}
				else{									//when root is not positive
					result=-(A*i*i*i)+(B*i*i)-(C*i)-D;
					if(result<0.0001 && result>-0.0001){
						x[0] = ""+numberSimpleMaker(-i);
					}
				}
			}
			//finding the other two;
			if(!x[0].equals(null)){
				String[] rawX = new String[2];	//x of binary equation
				String rawA="" + ( Double.parseDouble(a) );
				String rawB="" + ( Double.parseDouble(b)+(Double.parseDouble(a)*Double.parseDouble(x[0])) );
				String rawC="" + (Double.parseDouble(c)+(Double.parseDouble(rawB)*Double.parseDouble(x[0]))) ;
				rawX=AX2BXC(rawA, rawB, rawC);	//AX2BXC() method call
				x[1]=rawX[0];
				x[2]=rawX[1];
			}
		}catch(NumberFormatException e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}catch(Exception e){
			//when result is not real
			for(int n=0; n<3; n++){	
				if(x[n]==null) x[n]="Does not have a real solution!";
			}
		}
		return x;
	}

------------------------------------------------------------------------
 AX 3 BX 2 CXD  AX3BX2CXD  solves   equation  ax 3  ax3 bx 2  bx2 cx  holds  resulting  values    real  root  finds    real  root  finds    real  root  finds    real  root   root   positive   root    positive  finding       binary  equation  AX 2 BXC  AX2BXC  method  call   result    real   String x String 3 A Double parse Double  parseDouble a B Double parse Double  parseDouble b C Double parse Double  parseDouble c D Double parse Double  parseDouble d result 0 i 0 i 500 i i 0 001 result A i i i B i i C i D result 0 0001 result 0 0001 x 0 number Simple Maker  numberSimpleMaker i result A i i i B i i C i D result 0 0001 result 0 0001 x 0 number Simple Maker  numberSimpleMaker i x 0 equals String raw X  rawX String 2 String raw A  rawA Double parse Double  parseDouble a String raw B  rawB Double parse Double  parseDouble b Double parse Double  parseDouble a Double parse Double  parseDouble x 0 String raw C  rawC Double parse Double  parseDouble c Double parse Double  parseDouble raw B  rawB Double parse Double  parseDouble x 0 raw X  rawX AX 2 BXC  AX2BXC raw A  rawA raw B  rawB raw C  rawC x 1 raw X  rawX 0 x 2 raw X  rawX 1 Number Format Exception  NumberFormatException e Message Wrong Input n Numbers only 420 Exception e n 0 n 3 n x n x n Does not have a real solution x 
------------------------------------------------------------------------
[ax, bx, cxd, ax3bx2cxd, solves, equation, ax3, bx2, cx, holds, resulting, values, real, root, finds, positive, finding, binary, bxc, ax2bxc, method, call, result, string, double, parse, parsedouble, number, simple, maker, numbersimplemaker, equals, raw, rawx, rawa, rawb, rawc, format, exception, numberformatexception, message, wrong, input, numbers, solution]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,numberSimpleMaker
159 , 175
------------------------------------------------------------------------
	//takes a number and makes it simpler
	private float numberSimpleMaker(double d){	//eg: takes 2.99987767 and returns 3
		int sign=1;
		if(d<0){	//if 'd' is negative makes 'd' positive
			d=-d;
			sign = -1;
		}
		float result=(float) d;
		int i= (int) Math.floor(d);
		for(float f=i; f<=(i+1); f=(float) (f+0.5)){
			if((d>f && d-f<0.001) || (d<f && f-d<0.001)){
				result = f;
				break;
			}
		}
		return result*sign;
	}

------------------------------------------------------------------------
 number Simple Maker  numberSimpleMaker  takes   number   makes   simpler   takes  99987767   returns      negative  makes   positive   sign 1 d 0 d d sign 1 result d i Math floor d f i f i 1 f f 0 5 d f d f 0 001 d f f d 0 001 result f result sign 
------------------------------------------------------------------------
[number, simple, maker, numbersimplemaker, takes, makes, simpler, returns, negative, positive, sign, result, math, floor]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,gcdFinder
176 , 200
------------------------------------------------------------------------
	//takes two number and finds the g.c.d
	private double gcdFinder(double a, double b){
		double gcd=1;
		boolean neg=false;
		long A=(long)a;
		long B=(long)b;
		if(A!=a || B!=b){
			//do nothing
		}else{
			if(A<0 && B<0) neg=true;	//both are negative
			if(A<0) A=A*(-1);	//make positive
			if(B<0) B=B*(-1);
			if(A>B){	//make A smaller
				A=A+B;
				B=A-B;
				A=A-B;
			}
			for(long i=1; i<=A; i++){
				if(A%i==0 && B%i==0)
					gcd=i;
			}
			if(neg) gcd=gcd*(-1);
		}
		return gcd;
	}

------------------------------------------------------------------------
 gcd Finder  gcdFinder  takes   number   finds        negative  make  positive  make   smaller   gcd 1 neg A a B b A a B b A 0 B 0 neg A 0 A A 1 B 0 B B 1 A B A A B B A B A A B i 1 i A i A i 0 B i 0 gcd i neg gcd gcd 1 gcd 
------------------------------------------------------------------------
[gcd, finder, gcdfinder, takes, number, finds, negative, make, positive, smaller, neg]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/equationCalculator/EquationSovlerOperation.java,EquationSovlerOperation
7 , 201
------------------------------------------------------------------------
public class EquationSovlerOperation {
	//solves the equation ax+by=c
	public String[] AXBYC(String a1, String b1, String c1, String a2, String b2, String c2){	
		String xy[] = new String[2];	//holds resulting values
		try{
			double A1 = Double.parseDouble(a1);
			double B1 = Double.parseDouble(b1);
			double C1 = Double.parseDouble(c1);
			double A2 = Double.parseDouble(a2);
			double B2 = Double.parseDouble(b2);
			double C2 = Double.parseDouble(c2);
			if((A1*B2-A2*B1)!=0){
				xy[0]= "" + ( (C1*B2-C2*B1)/(A1*B2-A2*B1) );
				xy[1]= "" + ( (A1*C2-A2*C1)/(A1*B2-A2*B1) );
				//For better understanding ignore double number
				if((xy[0].indexOf(".")+4)<xy[0].length()){
					double gcd=gcdFinder(C1*B2-C2*B1, A1*B2-A2*B1);
					xy[0]= "(" + (C1*B2-C2*B1)/gcd + ") / (" + (A1*B2-A2*B1)/gcd + ")";
				}
				if((xy[1].indexOf(".")+4)<xy[1].length()){
					double gcd=gcdFinder(A1*C2-A2*C1, A1*B2-A2*B1);
					xy[1]= "(" + (A1*C2-A2*C1)/gcd + ") / (" + (A1*B2-A2*B1)/gcd + ")";
				}
			}else{
				xy[0]= "No Answer!";
				xy[1]= "No Answer!";
			}
		}catch(Exception e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}
		return xy;
	}
	//solves the equation ax+by+cz=d
	public String[] AXBYCZD(String a1, String b1, String c1, String d1, String a2, String b2, String c2, String d2, String a3,
							String b3, String c3, String d3){	
		String xyz[] = new String[3];	//holds resulting values
		try{
			double A1 = Double.parseDouble(a1);
			double B1 = Double.parseDouble(b1);
			double C1 = Double.parseDouble(c1);
			double D1 = Double.parseDouble(d1);
			double A2 = Double.parseDouble(a2);
			double B2 = Double.parseDouble(b2);
			double C2 = Double.parseDouble(c2);
			double D2 = Double.parseDouble(d2);
			double A3 = Double.parseDouble(a3);
			double B3 = Double.parseDouble(b3);
			double C3 = Double.parseDouble(c3);
			double D3 = Double.parseDouble(d3);
			Double divisor = A1*(B2*C3-C2*B3) + B1*(C2*A3-A2*C3) + C1*(A2*B3-B2*A3);
			if(divisor!=0){
				xyz[0]= "" + ( (D1*(B2*C3-C2*B3) + B1*(C2*D3-D2*C3) + C1*(D2*B3-B2*D3)) / divisor );
				xyz[1]= "" + ( (A1*(D2*C3-C2*D3) + D1*(C2*A3-A2*C3) + C1*(A2*D3-D2*A3)) / divisor );
				xyz[2]= "" + ( (A1*(B2*D3-D2*B3) + B1*(D2*A3-A2*D3) + D1*(A2*B3-B2*A3)) / divisor );
				//For better understanding ignore double number
				if((xyz[0].indexOf(".")+4)<xyz[0].length()){
					double gcd=gcdFinder(D1*(B2*C3-C2*B3) + B1*(C2*D3-D2*C3) + C1*(D2*B3-B2*D3), divisor);
					xyz[0]="(" + (D1*(B2*C3-C2*B3) + B1*(C2*D3-D2*C3) + C1*(D2*B3-B2*D3))/gcd + ") / (" + divisor/gcd + ")";
				}
				if((xyz[1].indexOf(".")+4)<xyz[1].length()){
					double gcd=gcdFinder(A1*(D2*C3-C2*D3) + D1*(C2*A3-A2*C3) + C1*(A2*D3-D2*A3), divisor);
					xyz[1]="(" + (A1*(D2*C3-C2*D3) + D1*(C2*A3-A2*C3) + C1*(A2*D3-D2*A3))/gcd + ") / (" + divisor/gcd + ")";
				}
				if((xyz[2].indexOf(".")+4)<xyz[2].length()){
					double gcd=gcdFinder(A1*(B2*D3-D2*B3) + B1*(D2*A3-A2*D3) + D1*(A2*B3-B2*A3), divisor);
					xyz[2]="(" + (A1*(B2*D3-D2*B3) + B1*(D2*A3-A2*D3) + D1*(A2*B3-B2*A3))/gcd + ") / (" + divisor/gcd + ")";
				}
			}else{
				xyz[0]= "No Answer!";
				xyz[1]= "No Answer!";
				xyz[2]= "No Answer!";
			}
		}catch(Exception e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}
		return xyz;
	}
	//solves the equation ax2+b2=c
	public String[] AX2BXC(String a, String b, String c){
		String[] x=new String[2];	//holds resulting values
		try{
			double A = Double.parseDouble(a);
			double B = Double.parseDouble(b);
			double C = Double.parseDouble(c);
			double det = B*B - 4*A*C;		//determiner 
			if(det<0){	//unreal root
				x[0]=(-B)/(2*A) + " + i Sqrt(" + det/(4*A*A) + ")";
				x[1]=(-B)/(2*A) + " - i Sqrt(" + det/(4*A*A) + ")";
				if(x[0].length()>35){
					double gcd1=gcdFinder(-B, 2*A),
						gcd2=gcdFinder(det, 4*A*A);
					x[0] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") + i Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";
					x[1] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") - i Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";				
				}
			}else{		//real root
				double Sqrtd = Math.sqrt(det);
				x[0]="" + ( (-B+Sqrtd)/(2*A) );
				x[1]="" + ( (-B-Sqrtd)/(2*A) );
				if((x[0].indexOf(".")+4)<x[0].length()){
					double gcd1=gcdFinder(-B, 2*A),
							gcd2=gcdFinder(det, 4*A*A);
					x[0] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") + Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";
					x[1] = "(" + (-B)/gcd1 + "/" + (2*A)/gcd1 + ") - Sqrt(" + det/gcd2 + "/" + (4*A*A)/gcd2 + ")";				
				}
			}
		}catch(Exception e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}
		return x;
	}
	//solves the equation ax3+bx2+cx=d
	public String[] AX3BX2CXD(String a, String b, String c, String d){
		String x[] = new String[3];	//holds resulting values
		try{
			double A = Double.parseDouble(a);
			double B = Double.parseDouble(b);
			double C = Double.parseDouble(c);
			double D = Double.parseDouble(d);
			double result=0;		//The first real root
			for(double i=0; i<=500; i=(i+0.001)){	//finds the first real root
				result=(A*i*i*i)+(B*i*i)+(C*i)-D;
				if(result<0.0001 && result>-0.0001){	//when root is positive
					x[0] = ""+numberSimpleMaker(i);
				}
				else{									//when root is not positive
					result=-(A*i*i*i)+(B*i*i)-(C*i)-D;
					if(result<0.0001 && result>-0.0001){
						x[0] = ""+numberSimpleMaker(-i);
					}
				}
			}
			//finding the other two;
			if(!x[0].equals(null)){
				String[] rawX = new String[2];	//x of binary equation
				String rawA="" + ( Double.parseDouble(a) );
				String rawB="" + ( Double.parseDouble(b)+(Double.parseDouble(a)*Double.parseDouble(x[0])) );
				String rawC="" + (Double.parseDouble(c)+(Double.parseDouble(rawB)*Double.parseDouble(x[0]))) ;
				rawX=AX2BXC(rawA, rawB, rawC);	//AX2BXC() method call
				x[1]=rawX[0];
				x[2]=rawX[1];
			}
		}catch(NumberFormatException e){
			new Message("Wrong Input! \n   Numbers only!", 420);
		}catch(Exception e){
			//when result is not real
			for(int n=0; n<3; n++){	
				if(x[n]==null) x[n]="Does not have a real solution!";
			}
		}
		return x;
	}
	//private methods//
	//takes a number and makes it simpler
	private float numberSimpleMaker(double d){	//eg: takes 2.99987767 and returns 3
		int sign=1;
		if(d<0){	//if 'd' is negative makes 'd' positive
			d=-d;
			sign = -1;
		}
		float result=(float) d;
		int i= (int) Math.floor(d);
		for(float f=i; f<=(i+1); f=(float) (f+0.5)){
			if((d>f && d-f<0.001) || (d<f && f-d<0.001)){
				result = f;
				break;
			}
		}
		return result*sign;
	}
	//takes two number and finds the g.c.d
	private double gcdFinder(double a, double b){
		double gcd=1;
		boolean neg=false;
		long A=(long)a;
		long B=(long)b;
		if(A!=a || B!=b){
			//do nothing
		}else{
			if(A<0 && B<0) neg=true;	//both are negative
			if(A<0) A=A*(-1);	//make positive
			if(B<0) B=B*(-1);
			if(A>B){	//make A smaller
				A=A+B;
				B=A-B;
				A=A-B;
			}
			for(long i=1; i<=A; i++){
				if(A%i==0 && B%i==0)
					gcd=i;
			}
			if(neg) gcd=gcd*(-1);
		}
		return gcd;
	}
}

------------------------------------------------------------------------
 Equation Sovler Operation  EquationSovlerOperation   
------------------------------------------------------------------------
[equation, sovler, operation, equationsovleroperation]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/matrixCalculator/MatrixCalculator.java,InitialComponent
19 , 87
------------------------------------------------------------------------
    //**  Method for Initializing  **//
    private void InitialComponent(){
		/**
		 * Initialization 												#*******I*******#
		**/
    	jLabelMain=new JLabel();
    	jLabelIO=new JLabel();
    	jLabelDisplay=new JLabel[2];
    	jTextFieldIO=new JTextField[9];
//    	jButtonOperands = new JButton[3];
//    	jButtonOperator = new JButton[6];
    	//End of Initialization 										#_______I_______#
		/**
		 * Setting Bounds and Attributes of the Elements				#*******S*******#
		**/
    	//Main label
		jLabelMain.setBounds(0, 0, 330, 430);
		jLabelMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"MatrixCalculatorBackground.jpg")));
		//Label for Input Output
		jLabelIO.setBounds(120, -25, 200, 210);
		jLabelIO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"/MatrixCalculatorBrackets.png")));
		//Display label
		for(int i=0; i<2; i++){
			jLabelDisplay[i]=new JLabel();
			jLabelDisplay[i].setSize(70, 30);
			jLabelDisplay[i].setHorizontalAlignment(4);
			jLabelDisplay[i].setFont(new java.awt.Font("Lucida Console", 0, 16));
			jLabelDisplay[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
			jLabelDisplay[i].setLocation(6+i*75, 65);
		}
		jLabelDisplay[1].setSize(35, 30);
		jLabelDisplay[1].setHorizontalAlignment(2);
		//Input text
		int row=0, col=0;
		for(int i=0; i<9; i++){
			jTextFieldIO[i] = new JTextField();
			jTextFieldIO[i].setSize(47, 30);
			jTextFieldIO[i].setHorizontalAlignment(4);
			jTextFieldIO[i].setFont(new java.awt.Font("Lucida Console", 0, 16));
			jTextFieldIO[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
			if(i==3){ col=1; row=0;}
			if(i==6){ col=2; row=0;}
			jTextFieldIO[i].setLocation(19+row*58, 49+col*42);
			row++;
		}
    	//End of Setting Bounds and Attributes 							#_______S_______#
		/**
		 * Adding Components											#*******A*******#
		**/
		jLabelMain.add(jLabelIO);
		//Display label
		for(int i=0; i<2; i++){
			jLabelMain.add(jLabelDisplay[i]);
		}
		//Input text
		for(int i=0; i<9; i++){
			jLabelIO.add(jTextFieldIO[i]);
		}
    	//End of Adding Components										#_______A_______#
    	//setting criterion of the frame
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Matrix Calculator");
		super.gui.setResizable(false);
		super.gui.setBounds(230, 115, 327, 420);
		super.gui.add(jLabelMain);
		//setting criterion of the frame ends
    }

------------------------------------------------------------------------
 Initial Component  InitialComponent   Method   Initializing   	j Button Operands  	jButtonOperands    J Button  JButton  	j Button Operator  	jButtonOperator    J Button  JButton  End   Initialization  										 _______ I _______  _______I_______  End   Setting  Bounds   Attributes  							 _______ S _______  _______S_______  End   Adding  Components 										  Components										 _______ A _______  _______A_______  setting  criterion    frame  ends  Main  label  Label   Input  Output  Display  label  Input  text  Display  label  Input  text  setting  criterion    frame   
		   Setting  Bounds   Attributes    Elements 				  Elements				 
		  
		   Initialization  												 
		  
		   Adding  Components 											  Components											 
		  Initialization # I # j Label Main  jLabelMain J Label  JLabel j Label IO  jLabelIO J Label  JLabel j Label Display  jLabelDisplay J Label  JLabel 2 j Text Field IO  jTextFieldIO J Text Field  JTextField 9 j Label Main  jLabelMain set Bounds  setBounds 0 0 330 430 j Label Main  jLabelMain set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Matrix Calculator Background  MatrixCalculatorBackground jpg j Label IO  jLabelIO set Bounds  setBounds 120 25 200 210 j Label IO  jLabelIO set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Matrix Calculator Brackets  MatrixCalculatorBrackets png i 0 i 2 i j Label Display  jLabelDisplay i J Label  JLabel j Label Display  jLabelDisplay i set Size  setSize 70 30 j Label Display  jLabelDisplay i set Horizontal Alignment  setHorizontalAlignment 4 j Label Display  jLabelDisplay i set Font  setFont java awt Font Lucida Console 0 16 j Label Display  jLabelDisplay i set Border  setBorder javax swing border Soft Bevel Border  SoftBevelBorder javax swing border Bevel Border  BevelBorder LOWERED j Label Display  jLabelDisplay i set Location  setLocation 6 i 75 65 j Label Display  jLabelDisplay 1 set Size  setSize 35 30 j Label Display  jLabelDisplay 1 set Horizontal Alignment  setHorizontalAlignment 2 row 0 col 0 i 0 i 9 i j Text Field IO  jTextFieldIO i J Text Field  JTextField j Text Field IO  jTextFieldIO i set Size  setSize 47 30 j Text Field IO  jTextFieldIO i set Horizontal Alignment  setHorizontalAlignment 4 j Text Field IO  jTextFieldIO i set Font  setFont java awt Font Lucida Console 0 16 j Text Field IO  jTextFieldIO i set Border  setBorder javax swing border Soft Bevel Border  SoftBevelBorder javax swing border Bevel Border  BevelBorder LOWERED i 3 col 1 row 0 i 6 col 2 row 0 j Text Field IO  jTextFieldIO i set Location  setLocation 19 row 58 49 col 42 row Adding Components # A # j Label Main  jLabelMain add j Label IO  jLabelIO i 0 i 2 i j Label Main  jLabelMain add j Label Display  jLabelDisplay i i 0 i 9 i j Label IO  jLabelIO add j Text Field IO  jTextFieldIO i gui set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE gui set Title  setTitle Matrix Calculator gui set Resizable  setResizable gui set Bounds  setBounds 230 115 327 420 gui add j Label Main  jLabelMain 
------------------------------------------------------------------------
[initial, component, initialcomponent, method, initializing, button, operands, jbuttonoperands, jbutton, operator, jbuttonoperator, end, initialization, _______, _______i_______, setting, bounds, attributes, _______s_______, adding, components, _______a_______, criterion, frame, ends, main, label, input, output, display, text, elements, jlabelmain, jlabel, io, jlabelio, jlabeldisplay, field, jtextfieldio, jtextfield, set, setbounds, icon, seticon, javax, swing, image, imageicon, class, getclass, resource, getresource, res, imgs, matrix, calculator, background, matrixcalculatorbackground, jpg, brackets, matrixcalculatorbrackets, png, size, setsize, horizontal, alignment, sethorizontalalignment, font, setfont, java, awt, lucida, console, border, setborder, soft, bevel, softbevelborder, bevelborder, lowered, location, setlocation, row, col, add, gui, default, close, operation, setdefaultcloseoperation, window, constants, windowconstants, exit, exit_on_close, title, settitle, resizable, setresizable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/matrixCalculator/MatrixCalculator.java,main
92 , 102
------------------------------------------------------------------------
    //**  Main Method  **//
    public static void main(String args[]) {
    	/* Set the NIMBUS look and feel */
    	try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");					
		} catch (Exception ex) {
			//do nothing if operation unsuccessful
		}
        /* Create and display the form */
        new MatrixCalculator();
    }

------------------------------------------------------------------------
 main   Main  Method   Set   NIMBUS    feel     operation  unsuccessful  Create   display   form   javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Matrix Calculator  MatrixCalculator 
------------------------------------------------------------------------
[main, method, set, nimbus, feel, operation, unsuccessful, create, display, form, javax, swing, ui, manager, uimanager, setlookandfeel, plaf, nimbuslookandfeel, exception, matrix, calculator, matrixcalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/matrixCalculator/MatrixCalculator.java,MatrixCalculator
15 , 18
------------------------------------------------------------------------
    //**  Constructor  **//
    public MatrixCalculator(){
    	InitialComponent();
    }

------------------------------------------------------------------------
 Matrix Calculator  MatrixCalculator   Constructor    Initial Component  InitialComponent 
------------------------------------------------------------------------
[matrix, calculator, matrixcalculator, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/matrixCalculator/MatrixCalculator.java,MatrixCalculator
4 , 107
------------------------------------------------------------------------
public class MatrixCalculator extends UltimateCalculatorFrame{
	/**
	 * Variable Declaration												#*******D*******#
	**/
	private JLabel jLabelMain;
	private JLabel jLabelIO;
	private JLabel[] jLabelDisplay;
	private JTextField[] jTextFieldIO;
//	private JButton[] jButtonOperands;
//	private JButton[] jButtonOperator;
	//End of Variable Declaration										#_______D_______#
    //**  Constructor  **//
    public MatrixCalculator(){
    	InitialComponent();
    }
    //**  Method for Initializing  **//
    private void InitialComponent(){
		/**
		 * Initialization 												#*******I*******#
		**/
    	jLabelMain=new JLabel();
    	jLabelIO=new JLabel();
    	jLabelDisplay=new JLabel[2];
    	jTextFieldIO=new JTextField[9];
//    	jButtonOperands = new JButton[3];
//    	jButtonOperator = new JButton[6];
    	//End of Initialization 										#_______I_______#
		/**
		 * Setting Bounds and Attributes of the Elements				#*******S*******#
		**/
    	//Main label
		jLabelMain.setBounds(0, 0, 330, 430);
		jLabelMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"MatrixCalculatorBackground.jpg")));
		//Label for Input Output
		jLabelIO.setBounds(120, -25, 200, 210);
		jLabelIO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/" +
				"/MatrixCalculatorBrackets.png")));
		//Display label
		for(int i=0; i<2; i++){
			jLabelDisplay[i]=new JLabel();
			jLabelDisplay[i].setSize(70, 30);
			jLabelDisplay[i].setHorizontalAlignment(4);
			jLabelDisplay[i].setFont(new java.awt.Font("Lucida Console", 0, 16));
			jLabelDisplay[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
			jLabelDisplay[i].setLocation(6+i*75, 65);
		}
		jLabelDisplay[1].setSize(35, 30);
		jLabelDisplay[1].setHorizontalAlignment(2);
		//Input text
		int row=0, col=0;
		for(int i=0; i<9; i++){
			jTextFieldIO[i] = new JTextField();
			jTextFieldIO[i].setSize(47, 30);
			jTextFieldIO[i].setHorizontalAlignment(4);
			jTextFieldIO[i].setFont(new java.awt.Font("Lucida Console", 0, 16));
			jTextFieldIO[i].setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
			if(i==3){ col=1; row=0;}
			if(i==6){ col=2; row=0;}
			jTextFieldIO[i].setLocation(19+row*58, 49+col*42);
			row++;
		}
    	//End of Setting Bounds and Attributes 							#_______S_______#
		/**
		 * Adding Components											#*******A*******#
		**/
		jLabelMain.add(jLabelIO);
		//Display label
		for(int i=0; i<2; i++){
			jLabelMain.add(jLabelDisplay[i]);
		}
		//Input text
		for(int i=0; i<9; i++){
			jLabelIO.add(jTextFieldIO[i]);
		}
    	//End of Adding Components										#_______A_______#
    	//setting criterion of the frame
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Matrix Calculator");
		super.gui.setResizable(false);
		super.gui.setBounds(230, 115, 327, 420);
		super.gui.add(jLabelMain);
		//setting criterion of the frame ends
    }
    /**
	 * Action Events													#********AE*******#
	**/
    //End of Action Events												#________AE_______#
    //**  Main Method  **//
    public static void main(String args[]) {
    	/* Set the NIMBUS look and feel */
    	try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");					
		} catch (Exception ex) {
			//do nothing if operation unsuccessful
		}
        /* Create and display the form */
        new MatrixCalculator();
    }
    /**
     * Auxiliary Methods												#********AM*******#
    **/
    //End of Auxiliary Methods											#________AM_______#
}

------------------------------------------------------------------------
 Matrix Calculator  MatrixCalculator   
	   Variable  Declaration 												  Declaration												 
	  Variable Declaration # D # J Label  JLabel j Label Main  jLabelMain J Label  JLabel j Label IO  jLabelIO J Label  JLabel j Label Display  jLabelDisplay J Text Field  JTextField j Text Field IO  jTextFieldIO 
------------------------------------------------------------------------
[matrix, calculator, matrixcalculator, variable, declaration, label, jlabel, main, jlabelmain, io, jlabelio, display, jlabeldisplay, text, field, jtextfield, jtextfieldio]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunter.java,initialComponent
43 , 92
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		primNumHunterGui = new PrimeNumberHunterGui();
		//operation object
		pnhOperation = new PrimeNumberHunterOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"PrimeNumberHunterInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
    	jTFieldFT = primNumHunterGui.jTFieldFT;
    	jButtonFind = primNumHunterGui.jButtonFind;
    	jTFieldOutput = primNumHunterGui.jTFieldOutput;
    	jTPaneOutput = primNumHunterGui.jTPaneOutput;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
    	jButtonFind.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFindActionPerformed(evt);
            }
        });
    	jButtonFind.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
    		put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
		jButtonFind.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonFindActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//**Setting Criterion of the Frame**//
		//add main label to main frame
		super.gui.add(primNumHunterGui);
		super.gui.setBounds(200, 115, 513, 495);
		super.gui.setTitle("Prime Number Hunter");
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setLayout(null);
		super.gui.setResizable(false);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			  End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  Setting  Criterion    Frame  GUI  Initialization  operation  object  instruction    add  main  label   main  frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  prim Num Hunter Gui  primNumHunterGui Prime Number Hunter Gui  PrimeNumberHunterGui pnh Operation  pnhOperation Prime Number Hunter Operation  PrimeNumberHunterOperation instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Prime Number Hunter Instruction  PrimeNumberHunterInstruction txt Exception e instruction EMPTY j T Field FT  jTFieldFT prim Num Hunter Gui  primNumHunterGui j T Field FT  jTFieldFT j Button Find  jButtonFind prim Num Hunter Gui  primNumHunterGui j Button Find  jButtonFind j T Field Output  jTFieldOutput prim Num Hunter Gui  primNumHunterGui j T Field Output  jTFieldOutput j T Pane Output  jTPaneOutput prim Num Hunter Gui  primNumHunterGui j T Pane Output  jTPaneOutput j Button Find  jButtonFind add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Find Action Performed  jButtonFindActionPerformed evt j Button Find  jButtonFind get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button Find  jButtonFind get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Find Action Performed  jButtonFindActionPerformed evt gui add prim Num Hunter Gui  primNumHunterGui gui set Bounds  setBounds 200 115 513 495 gui set Title  setTitle Prime Number Hunter gui set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE gui set Layout  setLayout gui set Resizable  setResizable 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, setting, criterion, frame, gui, initialization, operation, object, instruction, add, main, label, method, initializing, variables, placing, specific, space, specifies, criteria, prim, num, hunter, primnumhuntergui, prime, number, primenumberhuntergui, pnh, pnhoperation, primenumberhunteroperation, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, primenumberhunterinstruction, txt, exception, empty, field, ft, jtfieldft, button, find, jbuttonfind, output, jtfieldoutput, pane, jtpaneoutput, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttonfindactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction, set, bounds, setbounds, title, settitle, default, close, setdefaultcloseoperation, javax, swing, constants, windowconstants, exit, exit_on_close, layout, setlayout, resizable, setresizable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunter.java,jButtonFindActionPerformed
95 , 107
------------------------------------------------------------------------
	//**
	private void jButtonFindActionPerformed(ActionEvent evt){
	    try{
    		long start=Long.parseLong(jTFieldFT[0].getText());
	    	long finish=Long.parseLong(jTFieldFT[1].getText());
	    	String Data = pnhOperation.primeNumberFinder(start, finish);
	    	jTPaneOutput.setText(Data);
	    	long NumOfPrimes = pnhOperation.charNumber(Data, ',');
	    	jTFieldOutput.setText("    " + NumOfPrimes);
	    }catch(Exception e){
	    	new Message("Input Correctly. \nOnly numbers are allowed. \nor, You may have exceeded the range!", 420);
	    }
    }

------------------------------------------------------------------------
 j Button Find Action Performed  jButtonFindActionPerformed    start Long parse Long  parseLong j T Field FT  jTFieldFT 0 get Text  getText finish Long parse Long  parseLong j T Field FT  jTFieldFT 1 get Text  getText String Data pnh Operation  pnhOperation prime Number Finder  primeNumberFinder start finish j T Pane Output  jTPaneOutput set Text  setText Data Num Of Primes  NumOfPrimes pnh Operation  pnhOperation char Number  charNumber Data j T Field Output  jTFieldOutput set Text  setText Num Of Primes  NumOfPrimes Exception e Message Input Correctly n Only  nOnly numbers are allowed nor You may have exceeded the range 420 
------------------------------------------------------------------------
[button, find, action, performed, jbuttonfindactionperformed, start, long, parse, parselong, field, ft, jtfieldft, text, gettext, finish, string, data, pnh, operation, pnhoperation, prime, number, finder, primenumberfinder, pane, output, jtpaneoutput, set, settext, num, primes, numofprimes, char, charnumber, jtfieldoutput, exception, message, input, correctly, nonly, numbers, allowed, exceeded, range]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunter.java,main
117 , 127
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new PrimeNumberHunter();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Prime Number Hunter  PrimeNumberHunter 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, prime, number, hunter, primenumberhunter]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunter.java,PrimeNumberHunter
38 , 42
------------------------------------------------------------------------
	/***##Constructor##***/
	public PrimeNumberHunter() {
		initialComponent();
		super.jCBItemMode[6].setSelected(true);
	}

------------------------------------------------------------------------
 Prime Number Hunter  PrimeNumberHunter   Constructor  initial Component  initialComponent j CB Item Mode  jCBItemMode 6 set Selected  setSelected 
------------------------------------------------------------------------
[prime, number, hunter, primenumberhunter, constructor, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, selected, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunter.java,PrimeNumberHunter
20 , 128
------------------------------------------------------------------------
/**
 * A Prime Number Hunter. Hunts down prime number in its range.
 * 
 * @author Minhas Kamal
 */
public class PrimeNumberHunter extends UltimateCalculatorFrame{
	// GUI Declaration
	private PrimeNumberHunterGui primNumHunterGui;
	//operation object
	private PrimeNumberHunterOperation pnhOperation;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JTextField[] jTFieldFT;
	private JButton jButtonFind;
	private JTextField jTFieldOutput;
	private JTextPane jTPaneOutput; 
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public PrimeNumberHunter() {
		initialComponent();
		super.jCBItemMode[6].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		primNumHunterGui = new PrimeNumberHunterGui();
		//operation object
		pnhOperation = new PrimeNumberHunterOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"PrimeNumberHunterInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
    	jTFieldFT = primNumHunterGui.jTFieldFT;
    	jButtonFind = primNumHunterGui.jButtonFind;
    	jTFieldOutput = primNumHunterGui.jTFieldOutput;
    	jTPaneOutput = primNumHunterGui.jTPaneOutput;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
    	jButtonFind.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonFindActionPerformed(evt);
            }
        });
    	jButtonFind.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
    		put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
		jButtonFind.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonFindActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//**Setting Criterion of the Frame**//
		//add main label to main frame
		super.gui.add(primNumHunterGui);
		super.gui.setBounds(200, 115, 513, 495);
		super.gui.setTitle("Prime Number Hunter");
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setLayout(null);
		super.gui.setResizable(false);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	private void jButtonFindActionPerformed(ActionEvent evt){
	    try{
    		long start=Long.parseLong(jTFieldFT[0].getText());
	    	long finish=Long.parseLong(jTFieldFT[1].getText());
	    	String Data = pnhOperation.primeNumberFinder(start, finish);
	    	jTPaneOutput.setText(Data);
	    	long NumOfPrimes = pnhOperation.charNumber(Data, ',');
	    	jTFieldOutput.setText("    " + NumOfPrimes);
	    }catch(Exception e){
	    	new Message("Input Correctly. \nOnly numbers are allowed. \nor, You may have exceeded the range!", 420);
	    }
    }
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new PrimeNumberHunter();
	}
}

------------------------------------------------------------------------
 Prime Number Hunter  PrimeNumberHunter  GUI  Declaration  operation  object    
    Prime  Number  Hunter  Hunts   prime  number    range 
   
      Minhas  Kamal 
  Kamal
  Prime Number Hunter Gui  PrimeNumberHunterGui prim Num Hunter Gui  primNumHunterGui Prime Number Hunter Operation  PrimeNumberHunterOperation pnh Operation  pnhOperation J Text Field  JTextField j T Field FT  jTFieldFT J Button  JButton j Button Find  jButtonFind J Text Field  JTextField j T Field Output  jTFieldOutput J Text Pane  JTextPane j T Pane Output  jTPaneOutput 
------------------------------------------------------------------------
[prime, number, hunter, primenumberhunter, gui, declaration, operation, object, hunts, range, minhas, kamal, primenumberhuntergui, prim, num, primnumhuntergui, primenumberhunteroperation, pnh, pnhoperation, text, field, jtextfield, ft, jtfieldft, button, jbutton, find, jbuttonfind, output, jtfieldoutput, pane, jtextpane, jtpaneoutput]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterGui.java,initialComponent
41 , 103
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
    	jLabelFT=new JLabel();
    	jTFieldFT=new JTextField[2];
    	jButtonFind=new JButton();
    	jLabelOutput=new JLabel();
    	jTFieldOutput=new JTextField();
    	jSPaneOutput=new JScrollPane();
    	jTPaneOutput=new JTextPane();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
    	jLabelFT.setText(" Find Prime Number From                                        To");
    	jLabelFT.setFont(new Font("Arial", 0, 13));
    	jLabelFT.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    	jLabelFT.setForeground(new Color(24, 23, 25));
    	jLabelFT.setBounds(9, 8, 488, 35);
    	for(int i=0; i<2; i++){
    		jTFieldFT[i]=new JTextField();
    		jTFieldFT[i].setBounds(165+i*175, 11, 150, 30);
    		jTFieldFT[i].setBackground(new Color(234, 233, 225));
    	}
    	jTFieldFT[0].setText("0");
    	jButtonFind.setText("Find");
    	jButtonFind.setBounds(427, 52, 70, 30);
		jButtonFind.setBackground(new Color(214, 203, 195));
    	jLabelOutput.setText(" Total Prime Numbers Found ");
    	jLabelOutput.setFont(new Font("Arial", 0, 13));
    	jLabelOutput.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    	jLabelOutput.setForeground(new Color(24, 23, 25));
		jLabelOutput.setBounds(9, 50, 410, 35);
    	jTFieldOutput.setEditable(false);
    	jTFieldOutput.setBounds(180, 53, 236, 30);
    	jTFieldOutput.setForeground(new Color(24, 23, 25));
    	jTFieldOutput.setBackground(new Color(234, 233, 225));
    	jTPaneOutput.setEditable(false);
    	jTPaneOutput.setForeground(new Color(24, 23, 25));
    	jTPaneOutput.setFont(new Font("Lucida Console", 0, 13));
    	jSPaneOutput.setViewportView(jTPaneOutput);
    	jSPaneOutput.setBounds(7, 90, 492, 350);
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
    	add(jLabelFT);
    	add(jTFieldFT[0]); add(jTFieldFT[1]);
    	add(jButtonFind);
    	add(jLabelOutput);
    	add(jTFieldOutput);
    	add(jSPaneOutput);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
    	setBounds(0, 0, 515, 495);
    	setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
    			"PrimeNumberHunterBackground.png")));
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										  End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	  End   Adding  Components  															 _______ A _______  _______A_______     Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Label FT  jLabelFT J Label  JLabel j T Field FT  jTFieldFT J Text Field  JTextField 2 j Button Find  jButtonFind J Button  JButton j Label Output  jLabelOutput J Label  JLabel j T Field Output  jTFieldOutput J Text Field  JTextField j S Pane Output  jSPaneOutput J Scroll Pane  JScrollPane j T Pane Output  jTPaneOutput J Text Pane  JTextPane j Label FT  jLabelFT set Text  setText Find Prime Number From To j Label FT  jLabelFT set Font  setFont Font Arial 0 13 j Label FT  jLabelFT set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Label FT  jLabelFT set Foreground  setForeground Color 24 23 25 j Label FT  jLabelFT set Bounds  setBounds 9 8 488 35 i 0 i 2 i j T Field FT  jTFieldFT i J Text Field  JTextField j T Field FT  jTFieldFT i set Bounds  setBounds 165 i 175 11 150 30 j T Field FT  jTFieldFT i set Background  setBackground Color 234 233 225 j T Field FT  jTFieldFT 0 set Text  setText 0 j Button Find  jButtonFind set Text  setText Find j Button Find  jButtonFind set Bounds  setBounds 427 52 70 30 j Button Find  jButtonFind set Background  setBackground Color 214 203 195 j Label Output  jLabelOutput set Text  setText Total Prime Numbers Found j Label Output  jLabelOutput set Font  setFont Font Arial 0 13 j Label Output  jLabelOutput set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Label Output  jLabelOutput set Foreground  setForeground Color 24 23 25 j Label Output  jLabelOutput set Bounds  setBounds 9 50 410 35 j T Field Output  jTFieldOutput set Editable  setEditable j T Field Output  jTFieldOutput set Bounds  setBounds 180 53 236 30 j T Field Output  jTFieldOutput set Foreground  setForeground Color 24 23 25 j T Field Output  jTFieldOutput set Background  setBackground Color 234 233 225 j T Pane Output  jTPaneOutput set Editable  setEditable j T Pane Output  jTPaneOutput set Foreground  setForeground Color 24 23 25 j T Pane Output  jTPaneOutput set Font  setFont Font Lucida Console 0 13 j S Pane Output  jSPaneOutput set Viewport View  setViewportView j T Pane Output  jTPaneOutput j S Pane Output  jSPaneOutput set Bounds  setBounds 7 90 492 350 add j Label FT  jLabelFT add j T Field FT  jTFieldFT 0 add j T Field FT  jTFieldFT 1 add j Button Find  jButtonFind add j Label Output  jLabelOutput add j T Field Output  jTFieldOutput add j S Pane Output  jSPaneOutput set Bounds  setBounds 0 0 515 495 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Prime Number Hunter Background  PrimeNumberHunterBackground png 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, criterion, frame, method, initializing, gui, variables, placing, specific, space, specifies, criteria, main, label, ft, jlabelft, jlabel, field, jtfieldft, text, jtextfield, button, find, jbuttonfind, jbutton, output, jlabeloutput, jtfieldoutput, pane, jspaneoutput, scroll, jscrollpane, jtpaneoutput, jtextpane, set, settext, prime, number, font, setfont, arial, border, setborder, soft, bevel, softbevelborder, bevelborder, lowered, foreground, setforeground, color, setbounds, background, setbackground, total, numbers, found, editable, seteditable, lucida, console, viewport, view, setviewportview, add, icon, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, hunter, primenumberhunterbackground, png]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterGui.java,main
104 , 120
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		PrimeNumberHunterGui gui = new PrimeNumberHunterGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(200, 115, 520, 495);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Prime Number Hunter Gui  PrimeNumberHunterGui gui Prime Number Hunter Gui  PrimeNumberHunterGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 200 115 520 495 j Frame  jFrame set Visible  setVisible j Frame  jFrame set Layout  setLayout j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, prime, number, hunter, gui, primenumberhuntergui, frame, jframe, bounds, setbounds, visible, setvisible, layout, setlayout, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterGui.java,PrimeNumberHunterGui
37 , 40
------------------------------------------------------------------------
	/***##Constructor##***/
	public PrimeNumberHunterGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Prime Number Hunter Gui  PrimeNumberHunterGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[prime, number, hunter, gui, primenumberhuntergui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterGui.java,PrimeNumberHunterGui
19 , 121
------------------------------------------------------------------------
/**
 * A Prime Number Hunter Gui
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class PrimeNumberHunterGui extends JLabel{
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JLabel jLabelFT;
	JTextField[] jTFieldFT;
	JButton jButtonFind;
	JLabel jLabelOutput;
	JTextField jTFieldOutput;
	JScrollPane jSPaneOutput;
	JTextPane jTPaneOutput; 
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public PrimeNumberHunterGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
    	jLabelFT=new JLabel();
    	jTFieldFT=new JTextField[2];
    	jButtonFind=new JButton();
    	jLabelOutput=new JLabel();
    	jTFieldOutput=new JTextField();
    	jSPaneOutput=new JScrollPane();
    	jTPaneOutput=new JTextPane();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
    	jLabelFT.setText(" Find Prime Number From                                        To");
    	jLabelFT.setFont(new Font("Arial", 0, 13));
    	jLabelFT.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    	jLabelFT.setForeground(new Color(24, 23, 25));
    	jLabelFT.setBounds(9, 8, 488, 35);
    	for(int i=0; i<2; i++){
    		jTFieldFT[i]=new JTextField();
    		jTFieldFT[i].setBounds(165+i*175, 11, 150, 30);
    		jTFieldFT[i].setBackground(new Color(234, 233, 225));
    	}
    	jTFieldFT[0].setText("0");
    	jButtonFind.setText("Find");
    	jButtonFind.setBounds(427, 52, 70, 30);
		jButtonFind.setBackground(new Color(214, 203, 195));
    	jLabelOutput.setText(" Total Prime Numbers Found ");
    	jLabelOutput.setFont(new Font("Arial", 0, 13));
    	jLabelOutput.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
    	jLabelOutput.setForeground(new Color(24, 23, 25));
		jLabelOutput.setBounds(9, 50, 410, 35);
    	jTFieldOutput.setEditable(false);
    	jTFieldOutput.setBounds(180, 53, 236, 30);
    	jTFieldOutput.setForeground(new Color(24, 23, 25));
    	jTFieldOutput.setBackground(new Color(234, 233, 225));
    	jTPaneOutput.setEditable(false);
    	jTPaneOutput.setForeground(new Color(24, 23, 25));
    	jTPaneOutput.setFont(new Font("Lucida Console", 0, 13));
    	jSPaneOutput.setViewportView(jTPaneOutput);
    	jSPaneOutput.setBounds(7, 90, 492, 350);
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
    	add(jLabelFT);
    	add(jTFieldFT[0]); add(jTFieldFT[1]);
    	add(jButtonFind);
    	add(jLabelOutput);
    	add(jTFieldOutput);
    	add(jSPaneOutput);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
    	setBounds(0, 0, 515, 495);
    	setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
    			"PrimeNumberHunterBackground.png")));
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		PrimeNumberHunterGui gui = new PrimeNumberHunterGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(200, 115, 520, 495);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Prime Number Hunter Gui  PrimeNumberHunterGui    
    Prime  Number  Hunter  Gui 
  Gui
   
      Minhas  Kamal 
  Kamal
  J Label  JLabel j Label FT  jLabelFT J Text Field  JTextField j T Field FT  jTFieldFT J Button  JButton j Button Find  jButtonFind J Label  JLabel j Label Output  jLabelOutput J Text Field  JTextField j T Field Output  jTFieldOutput J Scroll Pane  JScrollPane j S Pane Output  jSPaneOutput J Text Pane  JTextPane j T Pane Output  jTPaneOutput 
------------------------------------------------------------------------
[prime, number, hunter, gui, primenumberhuntergui, minhas, kamal, label, jlabel, ft, jlabelft, text, field, jtextfield, jtfieldft, button, jbutton, find, jbuttonfind, output, jlabeloutput, jtfieldoutput, scroll, pane, jscrollpane, jspaneoutput, jtextpane, jtpaneoutput]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterOperation.java,primeNumberFinder
14 , 111
------------------------------------------------------------------------
	public String primeNumberFinder(long start, long finish){
		String result="";
		//handle extreme cases
		if(finish<start){
			long i=start;
			start=finish;
			finish=i;
		}
		if(start<3){
			start =3;
			result="2, ";
		}
		if(finish<2){
			result="No Number Found!";
			return result;
		}
	    long x; //possible prime number
	    if(start%2==0) x=(start+1);   //I have made starting number odd, this will save time
	    else x=start;
	    for(; x<=finish; x=x+2){   //The program will work only with odd numbers
	        int flag=1;  //the flag
	        if(x>500){
	            if(x%3 == 0) flag=0;
	            else if(x%5 == 0) flag=0;
	            else if(x%7 == 0) flag=0;
	            else if(x%11 == 0) flag=0;
	            else if(x%13 == 0) flag=0;
	            else if(x%17 == 0) flag=0;
	            else if(x%19 == 0) flag=0;
	            else if(x%23 == 0) flag=0;
	            else if(x%29 == 0) flag=0;
	            else if(x%31 == 0) flag=0;
	            else if(x%37 == 0) flag=0;
	            else if(x%41 == 0) flag=0;
	            else if(x%43 == 0) flag=0;
	            else if(x%47 == 0) flag=0;
	            else if(x%53 == 0) flag=0;
	            else if(x%59 == 0) flag=0;
	            else if(x%61 == 0) flag=0;
	            else if(x%67 == 0) flag=0;
	            else if(x%71 == 0) flag=0;
	            else if(x%73 == 0) flag=0;
	            else if(x%79 == 0) flag=0;
	            else if(x%83 == 0) flag=0;
	            else if(x%89 == 0) flag=0;
	            else if(x%97 == 0) flag=0;
	            else if(x%101 == 0) flag=0;
	            else if(x%103 == 0) flag=0;
	            else if(x%107 == 0) flag=0;
	            else if(x%109 == 0) flag=0;
	            else if(x%113 == 0) flag=0;
	            else if(x%127 == 0) flag=0;
	            else if(x%131 == 0) flag=0;
	            else if(x%137 == 0) flag=0;
	            else if(x%139 == 0) flag=0;
	            else if(x%149 == 0) flag=0;
	            else if(x%151 == 0) flag=0;
	            else if(x%157 == 0) flag=0;
	            else if(x%163 == 0) flag=0;
	            else if(x%167 == 0) flag=0;
	            else if(x%173 == 0) flag=0;
	            else if(x%179 == 0) flag=0;
	            else if(x%181 == 0) flag=0;
	            else if(x%191 == 0) flag=0;
	            else if(x%193 == 0) flag=0;
	            else if(x%197 == 0) flag=0;
	            else if(x%199 == 0) flag=0;
	            else if(x%211 == 0) flag=0;
	            else if(x%223 == 0) flag=0;
	            else if(x%227 == 0) flag=0;
	            else if(x%229 == 0) flag=0;
	            else if(x%233 == 0) flag=0;
	            else if(x%239 == 0) flag=0;
	            else if(x%241 == 0) flag=0;
	            else if(x%251 == 0) flag=0;
	            else if(x%257 == 0) flag=0;
	            else{ 
	            	int limit=(int) Math.sqrt(x);
	            	for(long y=263; y<=limit; y=y+2){
	                     if(x%y==0){
	                    	 flag=0; 
	                    	 break;
	                     }
	                 }
	            }
	        }
		    else {
		    	for(long y=3; y<=x/3; y=y+2) {
		    		if(x%y==0) flag=0;
		    	}
		    }
		    if (flag==1){
		    	result = result + x + ", ";
		    }
	    }
	    result=result + "End.";
		return result;
	}

------------------------------------------------------------------------
 prime Number Finder  primeNumberFinder  handle  extreme  cases   prime  number    made  starting  number  odd    save  time    made  starting  number  odd    save  time   program   work    odd  numbers   flag   String result finish start i start start finish finish i start 3 start 3 result 2 finish 2 result No Number Found result x start 2 0 x start 1 x start x finish x x 2 flag 1 x 500 x 3 0 flag 0 x 5 0 flag 0 x 7 0 flag 0 x 11 0 flag 0 x 13 0 flag 0 x 17 0 flag 0 x 19 0 flag 0 x 23 0 flag 0 x 29 0 flag 0 x 31 0 flag 0 x 37 0 flag 0 x 41 0 flag 0 x 43 0 flag 0 x 47 0 flag 0 x 53 0 flag 0 x 59 0 flag 0 x 61 0 flag 0 x 67 0 flag 0 x 71 0 flag 0 x 73 0 flag 0 x 79 0 flag 0 x 83 0 flag 0 x 89 0 flag 0 x 97 0 flag 0 x 101 0 flag 0 x 103 0 flag 0 x 107 0 flag 0 x 109 0 flag 0 x 113 0 flag 0 x 127 0 flag 0 x 131 0 flag 0 x 137 0 flag 0 x 139 0 flag 0 x 149 0 flag 0 x 151 0 flag 0 x 157 0 flag 0 x 163 0 flag 0 x 167 0 flag 0 x 173 0 flag 0 x 179 0 flag 0 x 181 0 flag 0 x 191 0 flag 0 x 193 0 flag 0 x 197 0 flag 0 x 199 0 flag 0 x 211 0 flag 0 x 223 0 flag 0 x 227 0 flag 0 x 229 0 flag 0 x 233 0 flag 0 x 239 0 flag 0 x 241 0 flag 0 x 251 0 flag 0 x 257 0 flag 0 limit Math sqrt x y 263 y limit y y 2 x y 0 flag 0 y 3 y x 3 y y 2 x y 0 flag 0 flag 1 result result x result result End result 
------------------------------------------------------------------------
[prime, number, finder, primenumberfinder, handle, extreme, cases, made, starting, odd, save, time, program, work, numbers, flag, string, result, finish, start, found, limit, math, sqrt, end]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterOperation.java,charNumber
112 , 120
------------------------------------------------------------------------
	//returns specific number of a char in a string
	public int charNumber(String string, char ch){
		int num=0;
		int length=string.length();
		for(int i=0; i<length; i++){
			if(string.charAt(i)==ch) num++;
		}
		return num;
	}

------------------------------------------------------------------------
 char Number  charNumber  returns  specific  number    char    string   num 0 length string length i 0 i length i string char At  charAt i ch num num 
------------------------------------------------------------------------
[char, number, charnumber, returns, specific, string, num, length, charat, ch]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/primeNumberHunter/PrimeNumberHunterOperation.java,PrimeNumberHunterOperation
6 , 121
------------------------------------------------------------------------
/**
 * My most improved version of haunting prime numbers. As finding prime number is very time consuming,
 * I have tried to make it more time efficient, but at the same time more complex.It finds all prime 
 * number in its domain (3 - 999,999,999,999,999,999).
 *
 * @author Minhas Kamal
 */
public class PrimeNumberHunterOperation {
	public String primeNumberFinder(long start, long finish){
		String result="";
		//handle extreme cases
		if(finish<start){
			long i=start;
			start=finish;
			finish=i;
		}
		if(start<3){
			start =3;
			result="2, ";
		}
		if(finish<2){
			result="No Number Found!";
			return result;
		}
	    long x; //possible prime number
	    if(start%2==0) x=(start+1);   //I have made starting number odd, this will save time
	    else x=start;
	    for(; x<=finish; x=x+2){   //The program will work only with odd numbers
	        int flag=1;  //the flag
	        if(x>500){
	            if(x%3 == 0) flag=0;
	            else if(x%5 == 0) flag=0;
	            else if(x%7 == 0) flag=0;
	            else if(x%11 == 0) flag=0;
	            else if(x%13 == 0) flag=0;
	            else if(x%17 == 0) flag=0;
	            else if(x%19 == 0) flag=0;
	            else if(x%23 == 0) flag=0;
	            else if(x%29 == 0) flag=0;
	            else if(x%31 == 0) flag=0;
	            else if(x%37 == 0) flag=0;
	            else if(x%41 == 0) flag=0;
	            else if(x%43 == 0) flag=0;
	            else if(x%47 == 0) flag=0;
	            else if(x%53 == 0) flag=0;
	            else if(x%59 == 0) flag=0;
	            else if(x%61 == 0) flag=0;
	            else if(x%67 == 0) flag=0;
	            else if(x%71 == 0) flag=0;
	            else if(x%73 == 0) flag=0;
	            else if(x%79 == 0) flag=0;
	            else if(x%83 == 0) flag=0;
	            else if(x%89 == 0) flag=0;
	            else if(x%97 == 0) flag=0;
	            else if(x%101 == 0) flag=0;
	            else if(x%103 == 0) flag=0;
	            else if(x%107 == 0) flag=0;
	            else if(x%109 == 0) flag=0;
	            else if(x%113 == 0) flag=0;
	            else if(x%127 == 0) flag=0;
	            else if(x%131 == 0) flag=0;
	            else if(x%137 == 0) flag=0;
	            else if(x%139 == 0) flag=0;
	            else if(x%149 == 0) flag=0;
	            else if(x%151 == 0) flag=0;
	            else if(x%157 == 0) flag=0;
	            else if(x%163 == 0) flag=0;
	            else if(x%167 == 0) flag=0;
	            else if(x%173 == 0) flag=0;
	            else if(x%179 == 0) flag=0;
	            else if(x%181 == 0) flag=0;
	            else if(x%191 == 0) flag=0;
	            else if(x%193 == 0) flag=0;
	            else if(x%197 == 0) flag=0;
	            else if(x%199 == 0) flag=0;
	            else if(x%211 == 0) flag=0;
	            else if(x%223 == 0) flag=0;
	            else if(x%227 == 0) flag=0;
	            else if(x%229 == 0) flag=0;
	            else if(x%233 == 0) flag=0;
	            else if(x%239 == 0) flag=0;
	            else if(x%241 == 0) flag=0;
	            else if(x%251 == 0) flag=0;
	            else if(x%257 == 0) flag=0;
	            else{ 
	            	int limit=(int) Math.sqrt(x);
	            	for(long y=263; y<=limit; y=y+2){
	                     if(x%y==0){
	                    	 flag=0; 
	                    	 break;
	                     }
	                 }
	            }
	        }
		    else {
		    	for(long y=3; y<=x/3; y=y+2) {
		    		if(x%y==0) flag=0;
		    	}
		    }
		    if (flag==1){
		    	result = result + x + ", ";
		    }
	    }
	    result=result + "End.";
		return result;
	}
	//returns specific number of a char in a string
	public int charNumber(String string, char ch){
		int num=0;
		int length=string.length();
		for(int i=0; i<length; i++){
			if(string.charAt(i)==ch) num++;
		}
		return num;
	}
}

------------------------------------------------------------------------
 Prime Number Hunter Operation  PrimeNumberHunterOperation   
     improved  version   haunting  prime  numbers   finding  prime  number    time  consuming 
       make    time  efficient      time   complex  finds   prime  
   number    domain    999 999 999 999 999 999 
  
      Minhas  Kamal 
  Kamal
  
------------------------------------------------------------------------
[prime, number, hunter, operation, primenumberhunteroperation, improved, version, haunting, numbers, finding, time, consuming, make, efficient, complex, finds, domain, minhas, kamal]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,initialComponent
54 , 225
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		simpleCalcGui = new SimpleCalculatorGui();
		//operation object
		scOperation = new SimpleCalculatorOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"SimpleCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jButtonNumerical = simpleCalcGui.jButtonNumerical;	//10 buttons(0-9)
		jButtonPoint = simpleCalcGui.jButtonPoint;			//point(.)
		jButtonOperator = simpleCalcGui.jButtonOperator;	//+, -, *, /, SQRT(), =
		jButtonMemory = simpleCalcGui.jButtonMemory;		//M, MS
		jButtonClear = simpleCalcGui.jButtonClear; 			//AC, C, back space
		jLabelDisplay = simpleCalcGui.jLabelDisplay;		//operation, result
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
			jButtonNumerical[i].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
				put(KeyStroke.getKeyStroke(48+i, 0), i+"_pressed");
			jButtonNumerical[i].getActionMap().put(i+"_pressed", new AbstractAction() {
				public void actionPerformed(ActionEvent evt) {
					jButtonNumericalActionPerformed(evt);
				}
			});
		}
		//Point
		jButtonPoint.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD,0), "POINT_pressed");
		jButtonPoint.getActionMap().put("POINT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonPoint.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonNumericalActionPerformed(evt);
            }
        });
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperatorActionPerformed(evt);
	            }
	        });
		}
		jButtonOperator[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,InputEvent.SHIFT_MASK), "PLUS_pressed");
		jButtonOperator[0].getActionMap().put("PLUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,0), "MINUS_pressed");
		jButtonOperator[1].getActionMap().put("MINUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_8,InputEvent.SHIFT_MASK), "MULT_pressed");
		jButtonOperator[2].getActionMap().put("MULT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,0), "DIVD_pressed");
		jButtonOperator[3].getActionMap().put("DIVD_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[5].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,0), "EQL_pressed");
		jButtonOperator[5].getActionMap().put("EQL_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_R,0), "SQRT_pressed");
		jButtonOperator[4].getActionMap().put("SQRT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[6].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_6,InputEvent.SHIFT_MASK), "POW_pressed");
		jButtonOperator[6].getActionMap().put("POW_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonMemoryActionPerformed(evt);
	            }
	        });
		}
		jButtonMemory[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_M,0), "MEM_pressed");
		jButtonMemory[0].getActionMap().put("MEM_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		jButtonMemory[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "STO_pressed");
		jButtonMemory[1].getActionMap().put("STO_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonClearActionPerformed(evt);
	            }
	        });
		}
		jButtonClear[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C,0), "CLR_pressed");
		jButtonClear[0].getActionMap().put("CLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0), "ACLR_pressed");
		jButtonClear[1].getActionMap().put("ACLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), "BSPACE_pressed");
		jButtonClear[2].getActionMap().put("BSPACE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//**Setting Criterion of the Frame**//
		super.gui.add(simpleCalcGui);
		super.gui.setTitle("Simple Calculator");
		super.gui.setBounds(230, 115, 276, 420);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			   End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA   End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization  operation  object  instruction  10  buttons  point      SQRT    MS  AC   back  space  operation  result  Numeric  Buttons  Point  Operator  Buttons  Memory  Buttons  Clear  Buttons  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  simple Calc Gui  simpleCalcGui Simple Calculator Gui  SimpleCalculatorGui sc Operation  scOperation Simple Calculator Operation  SimpleCalculatorOperation instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Simple Calculator Instruction  SimpleCalculatorInstruction txt Exception e instruction EMPTY j Button Numerical  jButtonNumerical simple Calc Gui  simpleCalcGui j Button Numerical  jButtonNumerical j Button Point  jButtonPoint simple Calc Gui  simpleCalcGui j Button Point  jButtonPoint j Button Operator  jButtonOperator simple Calc Gui  simpleCalcGui j Button Operator  jButtonOperator j Button Memory  jButtonMemory simple Calc Gui  simpleCalcGui j Button Memory  jButtonMemory j Button Clear  jButtonClear simple Calc Gui  simpleCalcGui j Button Clear  jButtonClear j Label Display  jLabelDisplay simple Calc Gui  simpleCalcGui j Label Display  jLabelDisplay i 0 i 10 i j Button Numerical  jButtonNumerical i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Numerical  jButtonNumerical i get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke 48 i 0 i _pressed j Button Numerical  jButtonNumerical i get Action Map  getActionMap put i _pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Point  jButtonPoint get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK PERIOD  VK_PERIOD 0 POINT _pressed  POINT_pressed j Button Point  jButtonPoint get Action Map  getActionMap put POINT _pressed  POINT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt j Button Point  jButtonPoint add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Numerical Action Performed  jButtonNumericalActionPerformed evt i 0 i 7 i j Button Operator  jButtonOperator i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK EQUALS  VK_EQUALS Input Event  InputEvent SHIFT MASK  SHIFT_MASK PLUS _pressed  PLUS_pressed j Button Operator  jButtonOperator 0 get Action Map  getActionMap put PLUS _pressed  PLUS_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK MINUS  VK_MINUS 0 MINUS _pressed  MINUS_pressed j Button Operator  jButtonOperator 1 get Action Map  getActionMap put MINUS _pressed  MINUS_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _8  VK_8 Input Event  InputEvent SHIFT MASK  SHIFT_MASK MULT _pressed  MULT_pressed j Button Operator  jButtonOperator 2 get Action Map  getActionMap put MULT _pressed  MULT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 3 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK SLASH  VK_SLASH 0 DIVD _pressed  DIVD_pressed j Button Operator  jButtonOperator 3 get Action Map  getActionMap put DIVD _pressed  DIVD_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 5 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK EQUALS  VK_EQUALS 0 EQL _pressed  EQL_pressed j Button Operator  jButtonOperator 5 get Action Map  getActionMap put EQL _pressed  EQL_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 4 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK R  VK_R 0 SQRT _pressed  SQRT_pressed j Button Operator  jButtonOperator 4 get Action Map  getActionMap put SQRT _pressed  SQRT_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt j Button Operator  jButtonOperator 6 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK _6  VK_6 Input Event  InputEvent SHIFT MASK  SHIFT_MASK POW _pressed  POW_pressed j Button Operator  jButtonOperator 6 get Action Map  getActionMap put POW _pressed  POW_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Operator Action Performed  jButtonOperatorActionPerformed evt i 0 i 2 i j Button Memory  jButtonMemory i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt j Button Memory  jButtonMemory 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK M  VK_M 0 MEM _pressed  MEM_pressed j Button Memory  jButtonMemory 0 get Action Map  getActionMap put MEM _pressed  MEM_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt j Button Memory  jButtonMemory 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK S  VK_S 0 STO _pressed  STO_pressed j Button Memory  jButtonMemory 1 get Action Map  getActionMap put STO _pressed  STO_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Memory Action Performed  jButtonMemoryActionPerformed evt i 0 i 3 i j Button Clear  jButtonClear i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 0 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK C  VK_C 0 CLR _pressed  CLR_pressed j Button Clear  jButtonClear 0 get Action Map  getActionMap put CLR _pressed  CLR_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 1 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK A  VK_A 0 ACLR _pressed  ACLR_pressed j Button Clear  jButtonClear 1 get Action Map  getActionMap put ACLR _pressed  ACLR_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt j Button Clear  jButtonClear 2 get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK BACK SPACE  VK_BACK_SPACE 0 BSPACE _pressed  BSPACE_pressed j Button Clear  jButtonClear 2 get Action Map  getActionMap put BSPACE _pressed  BSPACE_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Clear Action Performed  jButtonClearActionPerformed evt gui add simple Calc Gui  simpleCalcGui gui set Title  setTitle Simple Calculator gui set Bounds  setBounds 230 115 276 420 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, operation, object, instruction, buttons, point, sqrt, ms, ac, back, space, result, numeric, operator, memory, clear, setting, criterion, frame, method, initializing, variables, placing, specific, specifies, criteria, main, simple, calc, simplecalcgui, calculator, simplecalculatorgui, sc, scoperation, simplecalculatoroperation, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, simplecalculatorinstruction, txt, exception, empty, button, numerical, jbuttonnumerical, jbuttonpoint, jbuttonoperator, jbuttonmemory, jbuttonclear, label, display, jlabeldisplay, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttonnumericalactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, _pressed, getactionmap, abstract, abstractaction, keyevent, vk, period, vk_period, point_pressed, jbuttonoperatoractionperformed, equals, vk_equals, inputevent, shift, mask, shift_mask, plus_pressed, minus, vk_minus, minus_pressed, _8, vk_8, mult, mult_pressed, slash, vk_slash, divd, divd_pressed, eql, eql_pressed, vk_r, sqrt_pressed, _6, vk_6, pow, pow_pressed, jbuttonmemoryactionperformed, vk_m, mem, mem_pressed, vk_s, sto, sto_pressed, jbuttonclearactionperformed, vk_c, clr, clr_pressed, vk_a, aclr, aclr_pressed, vk_back_space, bspace, bspace_pressed, set, title, settitle, bounds, setbounds]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,jButtonNumericalActionPerformed
229 , 237
------------------------------------------------------------------------
	//numeric buttons
	private void jButtonNumericalActionPerformed(ActionEvent evt){
		if(number.length()<20){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}
		jLabelDisplay[0].setText(number);
	}

------------------------------------------------------------------------
 j Button Numerical Action Performed  jButtonNumericalActionPerformed  numeric  buttons   number length 20 number contains evt get Action Command  getActionCommand equals number number evt get Action Command  getActionCommand j Label Display  jLabelDisplay 0 set Text  setText number 
------------------------------------------------------------------------
[button, numerical, action, performed, jbuttonnumericalactionperformed, numeric, buttons, number, length, evt, command, getactioncommand, equals, label, display, jlabeldisplay, set, text, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,jButtonMemoryActionPerformed
238 , 250
------------------------------------------------------------------------
	//memory buttons
	private void jButtonMemoryActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="M" || evt.getActionCommand().equals("m")){
			if((number+memory).length()<23){
				number=number+memory;
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="MS" || evt.getActionCommand().equals("s")){
			if(jLabelDisplay[1].getText().length()>0){
				memory=Double.parseDouble(jLabelDisplay[1].getText());
			}
		}
	}

------------------------------------------------------------------------
 j Button Memory Action Performed  jButtonMemoryActionPerformed  memory  buttons   evt get Action Command  getActionCommand M evt get Action Command  getActionCommand equals m number memory length 23 number number memory j Label Display  jLabelDisplay 0 set Text  setText number evt get Action Command  getActionCommand MS evt get Action Command  getActionCommand equals s j Label Display  jLabelDisplay 1 get Text  getText length 0 memory Double parse Double  parseDouble j Label Display  jLabelDisplay 1 get Text  getText 
------------------------------------------------------------------------
[button, memory, action, performed, jbuttonmemoryactionperformed, buttons, evt, command, getactioncommand, equals, number, length, label, display, jlabeldisplay, set, text, settext, ms, gettext, double, parse, parsedouble]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,jButtonClearActionPerformed
251 , 269
------------------------------------------------------------------------
	//clear buttons
	private void jButtonClearActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="<B" || evt.getActionCommand().equals("\b")){
			if(number.length()>0){
				number=number.substring(0, number.length()-1);
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="C" || evt.getActionCommand().equals("c")){
			number="";
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="AC" || evt.getActionCommand().equals("a")){
			number="";
			operand1="";
			operand2="";
			operator="";
			jLabelDisplay[0].setText("");
			jLabelDisplay[1].setText("");
		}
	}

------------------------------------------------------------------------
 j Button Clear Action Performed  jButtonClearActionPerformed  clear  buttons   evt get Action Command  getActionCommand B evt get Action Command  getActionCommand equals b number length 0 number number substring 0 number length 1 j Label Display  jLabelDisplay 0 set Text  setText number evt get Action Command  getActionCommand C evt get Action Command  getActionCommand equals c number j Label Display  jLabelDisplay 0 set Text  setText number evt get Action Command  getActionCommand AC evt get Action Command  getActionCommand equals a number operand 1  operand1 operand 2  operand2 operator j Label Display  jLabelDisplay 0 set Text  setText j Label Display  jLabelDisplay 1 set Text  setText 
------------------------------------------------------------------------
[button, clear, action, performed, jbuttonclearactionperformed, buttons, evt, command, getactioncommand, equals, number, length, substring, label, display, jlabeldisplay, set, text, settext, ac, operand, operand1, operand2, operator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,jButtonOperatorActionPerformed
270 , 299
------------------------------------------------------------------------
	//operand buttons
	private void jButtonOperatorActionPerformed(ActionEvent evt){
		if(evt.getActionCommand().equals("=")){				//when '=' is pressed
			operand2=number;
			String ans=scOperation.operation(operand1, operand2, operator);
			jLabelDisplay[1].setText(ans);
			operator="";
		}else if(evt.getActionCommand()=="sqrt" || evt.getActionCommand().equals("r")){	
			String ans = scOperation.sqrt(jLabelDisplay[1].getText());
			jLabelDisplay[1].setText(ans);
		}else{											//when operator is pressed
			if(!number.isEmpty()){
				if(operator.isEmpty()){					//general time
					operand1=number;
					operator=evt.getActionCommand();
				}else{									//for chain work, eg. 2+3+4+....
					operand2=number;
					String ans=scOperation.operation(operand1, operand2, operator);
					jLabelDisplay[1].setText(ans);
					operand1=ans;
					operator=evt.getActionCommand();
				}
			}else{										//when some thing is done to the answer, eg.  ..=3 + 2 ...
				operand1=jLabelDisplay[1].getText();	//get the ans.
				operator=evt.getActionCommand();		//get the operator
			}
		}
		number="";						//empty input string
		jLabelDisplay[0].setText("");	//empty input space
	}

------------------------------------------------------------------------
 j Button Operator Action Performed  jButtonOperatorActionPerformed  operand  buttons     pressed   operator   pressed  general  time   chain  work      thing      answer         ans    operator  empty  input  string  empty  input  space   evt get Action Command  getActionCommand equals operand 2  operand2 number String ans sc Operation  scOperation operation operand 1  operand1 operand 2  operand2 operator j Label Display  jLabelDisplay 1 set Text  setText ans operator evt get Action Command  getActionCommand sqrt evt get Action Command  getActionCommand equals r String ans sc Operation  scOperation sqrt j Label Display  jLabelDisplay 1 get Text  getText j Label Display  jLabelDisplay 1 set Text  setText ans number is Empty  isEmpty operator is Empty  isEmpty operand 1  operand1 number operator evt get Action Command  getActionCommand operand 2  operand2 number String ans sc Operation  scOperation operation operand 1  operand1 operand 2  operand2 operator j Label Display  jLabelDisplay 1 set Text  setText ans operand 1  operand1 ans operator evt get Action Command  getActionCommand operand 1  operand1 j Label Display  jLabelDisplay 1 get Text  getText operator evt get Action Command  getActionCommand number j Label Display  jLabelDisplay 0 set Text  setText 
------------------------------------------------------------------------
[button, operator, action, performed, jbuttonoperatoractionperformed, operand, buttons, pressed, general, time, chain, work, thing, answer, ans, empty, input, string, space, evt, command, getactioncommand, equals, operand2, number, sc, operation, scoperation, operand1, label, display, jlabeldisplay, set, text, settext, sqrt, gettext, isempty]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,main
309 , 319
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new SimpleCalculator();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Simple Calculator  SimpleCalculator 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, simple, calculator, simplecalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,SimpleCalculator
44 , 53
------------------------------------------------------------------------
	/***##Constructor##***/
	public SimpleCalculator() {
    	number="";
    	memory=0.0;
    	operand1="";
    	operand2="";
    	operator="";
		initialComponent();
		super.jCBItemMode[0].setSelected(true);
	}

------------------------------------------------------------------------
 Simple Calculator  SimpleCalculator   Constructor  number memory 0 0 operand 1  operand1 operand 2  operand2 operator initial Component  initialComponent j CB Item Mode  jCBItemMode 0 set Selected  setSelected 
------------------------------------------------------------------------
[simple, calculator, simplecalculator, constructor, number, memory, operand, operand1, operand2, operator, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, selected, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculator.java,SimpleCalculator
19 , 320
------------------------------------------------------------------------
/**
 * A Simple Calculator
 * 
 * @author Minhas Kamal
 */
public class SimpleCalculator extends UltimateCalculatorFrame{
	// GUI Declaration
	private SimpleCalculatorGui simpleCalcGui;
	//operation object
	private SimpleCalculatorOperation scOperation;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JButton[] jButtonNumerical;
	private JButton[] jButtonOperator;
	private JButton[] jButtonMemory;
	private JButton[] jButtonClear;
	private JButton jButtonPoint;
	private JLabel[] jLabelDisplay;
    //other variables
    private String number; 
    private double memory;
    private String operand1, operand2;
    private String operator;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public SimpleCalculator() {
    	number="";
    	memory=0.0;
    	operand1="";
    	operand2="";
    	operator="";
		initialComponent();
		super.jCBItemMode[0].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		simpleCalcGui = new SimpleCalculatorGui();
		//operation object
		scOperation = new SimpleCalculatorOperation();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"SimpleCalculatorInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jButtonNumerical = simpleCalcGui.jButtonNumerical;	//10 buttons(0-9)
		jButtonPoint = simpleCalcGui.jButtonPoint;			//point(.)
		jButtonOperator = simpleCalcGui.jButtonOperator;	//+, -, *, /, SQRT(), =
		jButtonMemory = simpleCalcGui.jButtonMemory;		//M, MS
		jButtonClear = simpleCalcGui.jButtonClear; 			//AC, C, back space
		jLabelDisplay = simpleCalcGui.jLabelDisplay;		//operation, result
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonNumericalActionPerformed(evt);
	            }
	        });
			jButtonNumerical[i].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
				put(KeyStroke.getKeyStroke(48+i, 0), i+"_pressed");
			jButtonNumerical[i].getActionMap().put(i+"_pressed", new AbstractAction() {
				public void actionPerformed(ActionEvent evt) {
					jButtonNumericalActionPerformed(evt);
				}
			});
		}
		//Point
		jButtonPoint.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD,0), "POINT_pressed");
		jButtonPoint.getActionMap().put("POINT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNumericalActionPerformed(evt);
	        }
	    });
		jButtonPoint.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jButtonNumericalActionPerformed(evt);
            }
        });
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonOperatorActionPerformed(evt);
	            }
	        });
		}
		jButtonOperator[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,InputEvent.SHIFT_MASK), "PLUS_pressed");
		jButtonOperator[0].getActionMap().put("PLUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,0), "MINUS_pressed");
		jButtonOperator[1].getActionMap().put("MINUS_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_8,InputEvent.SHIFT_MASK), "MULT_pressed");
		jButtonOperator[2].getActionMap().put("MULT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[3].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,0), "DIVD_pressed");
		jButtonOperator[3].getActionMap().put("DIVD_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[5].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,0), "EQL_pressed");
		jButtonOperator[5].getActionMap().put("EQL_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[4].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_R,0), "SQRT_pressed");
		jButtonOperator[4].getActionMap().put("SQRT_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		jButtonOperator[6].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_6,InputEvent.SHIFT_MASK), "POW_pressed");
		jButtonOperator[6].getActionMap().put("POW_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOperatorActionPerformed(evt);
	        }
	    });
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonMemoryActionPerformed(evt);
	            }
	        });
		}
		jButtonMemory[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_M,0), "MEM_pressed");
		jButtonMemory[0].getActionMap().put("MEM_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		jButtonMemory[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_S,0), "STO_pressed");
		jButtonMemory[1].getActionMap().put("STO_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonMemoryActionPerformed(evt);
	        }
	    });
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jButtonClearActionPerformed(evt);
	            }
	        });
		}
		jButtonClear[0].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_C,0), "CLR_pressed");
		jButtonClear[0].getActionMap().put("CLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[1].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_A,0), "ACLR_pressed");
		jButtonClear[1].getActionMap().put("ACLR_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		jButtonClear[2].getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0), "BSPACE_pressed");
		jButtonClear[2].getActionMap().put("BSPACE_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonClearActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//**Setting Criterion of the Frame**//
		super.gui.add(simpleCalcGui);
		super.gui.setTitle("Simple Calculator");
		super.gui.setBounds(230, 115, 276, 420);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	//numeric buttons
	private void jButtonNumericalActionPerformed(ActionEvent evt){
		if(number.length()<20){
			if(!(number.contains(".") && evt.getActionCommand().equals("."))){
				number=number+evt.getActionCommand();
			}
		}
		jLabelDisplay[0].setText(number);
	}
	//memory buttons
	private void jButtonMemoryActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="M" || evt.getActionCommand().equals("m")){
			if((number+memory).length()<23){
				number=number+memory;
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="MS" || evt.getActionCommand().equals("s")){
			if(jLabelDisplay[1].getText().length()>0){
				memory=Double.parseDouble(jLabelDisplay[1].getText());
			}
		}
	}
	//clear buttons
	private void jButtonClearActionPerformed(ActionEvent evt){
		if(evt.getActionCommand()=="<B" || evt.getActionCommand().equals("\b")){
			if(number.length()>0){
				number=number.substring(0, number.length()-1);
			}
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="C" || evt.getActionCommand().equals("c")){
			number="";
			jLabelDisplay[0].setText(number);
		}else if(evt.getActionCommand()=="AC" || evt.getActionCommand().equals("a")){
			number="";
			operand1="";
			operand2="";
			operator="";
			jLabelDisplay[0].setText("");
			jLabelDisplay[1].setText("");
		}
	}
	//operand buttons
	private void jButtonOperatorActionPerformed(ActionEvent evt){
		if(evt.getActionCommand().equals("=")){				//when '=' is pressed
			operand2=number;
			String ans=scOperation.operation(operand1, operand2, operator);
			jLabelDisplay[1].setText(ans);
			operator="";
		}else if(evt.getActionCommand()=="sqrt" || evt.getActionCommand().equals("r")){	
			String ans = scOperation.sqrt(jLabelDisplay[1].getText());
			jLabelDisplay[1].setText(ans);
		}else{											//when operator is pressed
			if(!number.isEmpty()){
				if(operator.isEmpty()){					//general time
					operand1=number;
					operator=evt.getActionCommand();
				}else{									//for chain work, eg. 2+3+4+....
					operand2=number;
					String ans=scOperation.operation(operand1, operand2, operator);
					jLabelDisplay[1].setText(ans);
					operand1=ans;
					operator=evt.getActionCommand();
				}
			}else{										//when some thing is done to the answer, eg.  ..=3 + 2 ...
				operand1=jLabelDisplay[1].getText();	//get the ans.
				operator=evt.getActionCommand();		//get the operator
			}
		}
		number="";						//empty input string
		jLabelDisplay[0].setText("");	//empty input space
	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new SimpleCalculator();
	}
}

------------------------------------------------------------------------
 Simple Calculator  SimpleCalculator  GUI  Declaration  operation  object    variables   
    Simple  Calculator 
  Calculator
   
      Minhas  Kamal 
  Kamal
  Simple Calculator Gui  SimpleCalculatorGui simple Calc Gui  simpleCalcGui Simple Calculator Operation  SimpleCalculatorOperation sc Operation  scOperation J Button  JButton j Button Numerical  jButtonNumerical J Button  JButton j Button Operator  jButtonOperator J Button  JButton j Button Memory  jButtonMemory J Button  JButton j Button Clear  jButtonClear J Button  JButton j Button Point  jButtonPoint J Label  JLabel j Label Display  jLabelDisplay String number memory String operand 1  operand1 operand 2  operand2 String operator 
------------------------------------------------------------------------
[simple, calculator, simplecalculator, gui, declaration, operation, object, variables, minhas, kamal, simplecalculatorgui, calc, simplecalcgui, simplecalculatoroperation, sc, scoperation, button, jbutton, numerical, jbuttonnumerical, operator, jbuttonoperator, memory, jbuttonmemory, clear, jbuttonclear, point, jbuttonpoint, label, jlabel, display, jlabeldisplay, string, number, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorGui.java,initialComponent
37 , 153
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jButtonNumerical=new JButton[10];	//10 buttons(0-9)
		jButtonPoint=new JButton();			//point(.)
		jButtonOperator=new JButton[7];		//+, -, *, /, SQRT(), =
		jButtonMemory=new JButton[2];		//M, MS
		jButtonClear=new JButton[3]; 		//AC, C, back space
		jLabelDisplay=new JLabel[2];	//operation, result
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i] = new JButton(""+i);
			jButtonNumerical[i].setSize(50, 40);
			jButtonNumerical[i].setLocation(((i-1)%3)*50+10, 280-(((i-1)/3)*40));
			jButtonNumerical[i].setFont(new Font("Calibri", 0, 19));
			jButtonNumerical[i].setBackground(new Color(200, 200, 190));
			jButtonNumerical[i].setBorder(null);
		}
		jButtonNumerical[0].setLocation(10, 320); jButtonNumerical[0].setSize(100, 40);
		//Point
		jButtonPoint.setBackground(new Color(210, 210, 190));
		jButtonPoint.setText("."); jButtonPoint.setBounds(110, 320, 50, 40);
		jButtonPoint.setFont(new Font("Vrinda", 0, 26));
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i] = new JButton();
			jButtonOperator[i].setSize(45, 40);
			jButtonOperator[i].setFont(new Font("Calibri", 0, 17));
			jButtonOperator[i].setBackground(new Color(188, 188, 188));
			jButtonOperator[i].setBorder(null);
		}
		jButtonOperator[0].setText("+");
		jButtonOperator[0].setLocation(170, 320);
		jButtonOperator[1].setText("-"); 
		jButtonOperator[1].setLocation(170, 280);
		jButtonOperator[2].setText("x");
		jButtonOperator[2].setLocation(170, 240);
		jButtonOperator[3].setText("/"); 
		jButtonOperator[3].setLocation(170, 200);
		jButtonOperator[5].setText("=");
		jButtonOperator[5].setBounds(215, 280, 45, 80);
		jButtonOperator[4].setText("sqrt"); 
		jButtonOperator[4].setLocation(215, 240);
		jButtonOperator[6].setText("^"); 
		jButtonOperator[6].setLocation(215, 200);
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i] = new JButton(); 
			jButtonMemory[i].setSize(50, 33);
			jButtonMemory[i].setFont(new Font("Arial", 0, 13));
			jButtonMemory[i].setBorder(null);
		}
		jButtonMemory[0].setText("M"); 
		jButtonMemory[0].setLocation(10, 150);
		jButtonMemory[1].setText("MS"); 
		jButtonMemory[1].setLocation(60, 150);
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i] = new JButton();
			jButtonClear[i].setSize(45, 33);
			jButtonClear[i].setFont(new Font("Vrinda", 0, 17));
			jButtonClear[i].setBorder(null);
		}
		jButtonClear[0].setText("C"); 
		jButtonClear[0].setLocation(170, 150);
		jButtonClear[1].setText("AC"); 
		jButtonClear[1].setLocation(215, 150);
		jButtonClear[2].setText("<B"); 
		jButtonClear[2].setLocation(110, 150); 
		jButtonClear[2].setSize(50, 33);
		//Display label
		for(int i=0; i<2; i++){
			jLabelDisplay[i] = new JLabel();
			jLabelDisplay[i].setSize(250, 45);
			jLabelDisplay[i].setHorizontalAlignment(4);
			jLabelDisplay[i].setFont(new Font("Lucida Console", 0, 16));
			jLabelDisplay[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		}
		jLabelDisplay[0].setLocation(10, 18);
		jLabelDisplay[1].setLocation(10, 63); jLabelDisplay[1].setSize(250, 60);
			jLabelDisplay[1].setFont(new Font("Lucida Console", 0, 20));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding buttons
		for(int i=0; i<10; i++){
			add(jButtonNumerical[i]);
		}
		add(jButtonPoint);
		for(int i=0; i<7; i++){
			add(jButtonOperator[i]);
		}
		for(int i=0; i<2; i++){
			add(jButtonMemory[i]);
		}
		for(int i=0; i<3; i++){
			add(jButtonClear[i]);
		}
		//adding display labels
		for(int i=0; i<2; i++){
			add(jLabelDisplay[i]);
		}
		// End of Adding Components 															#_______A_______#
		//set criteria of main label
		setBounds(0, 0, 276, 425);
		setIcon(new ImageIcon(getClass().getResource("/res/imgs/SimpleCalculatorBackground.jpg")));
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		   End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										   End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	   End   Adding  Components  															 _______ A _______  _______A_______  10  buttons  point      SQRT    MS  AC   back  space  operation  result  Numeric  Buttons  Point  Operator  Buttons  Memory  Buttons  Clear  Buttons  Display  label  adding  buttons  adding  display  labels  set  criteria   main  label   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Button Numerical  jButtonNumerical J Button  JButton 10 j Button Point  jButtonPoint J Button  JButton j Button Operator  jButtonOperator J Button  JButton 7 j Button Memory  jButtonMemory J Button  JButton 2 j Button Clear  jButtonClear J Button  JButton 3 j Label Display  jLabelDisplay J Label  JLabel 2 i 0 i 10 i j Button Numerical  jButtonNumerical i J Button  JButton i j Button Numerical  jButtonNumerical i set Size  setSize 50 40 j Button Numerical  jButtonNumerical i set Location  setLocation i 1 3 50 10 280 i 1 3 40 j Button Numerical  jButtonNumerical i set Font  setFont Font Calibri 0 19 j Button Numerical  jButtonNumerical i set Background  setBackground Color 200 200 190 j Button Numerical  jButtonNumerical i set Border  setBorder j Button Numerical  jButtonNumerical 0 set Location  setLocation 10 320 j Button Numerical  jButtonNumerical 0 set Size  setSize 100 40 j Button Point  jButtonPoint set Background  setBackground Color 210 210 190 j Button Point  jButtonPoint set Text  setText j Button Point  jButtonPoint set Bounds  setBounds 110 320 50 40 j Button Point  jButtonPoint set Font  setFont Font Vrinda 0 26 i 0 i 7 i j Button Operator  jButtonOperator i J Button  JButton j Button Operator  jButtonOperator i set Size  setSize 45 40 j Button Operator  jButtonOperator i set Font  setFont Font Calibri 0 17 j Button Operator  jButtonOperator i set Background  setBackground Color 188 188 188 j Button Operator  jButtonOperator i set Border  setBorder j Button Operator  jButtonOperator 0 set Text  setText j Button Operator  jButtonOperator 0 set Location  setLocation 170 320 j Button Operator  jButtonOperator 1 set Text  setText j Button Operator  jButtonOperator 1 set Location  setLocation 170 280 j Button Operator  jButtonOperator 2 set Text  setText x j Button Operator  jButtonOperator 2 set Location  setLocation 170 240 j Button Operator  jButtonOperator 3 set Text  setText j Button Operator  jButtonOperator 3 set Location  setLocation 170 200 j Button Operator  jButtonOperator 5 set Text  setText j Button Operator  jButtonOperator 5 set Bounds  setBounds 215 280 45 80 j Button Operator  jButtonOperator 4 set Text  setText sqrt j Button Operator  jButtonOperator 4 set Location  setLocation 215 240 j Button Operator  jButtonOperator 6 set Text  setText j Button Operator  jButtonOperator 6 set Location  setLocation 215 200 i 0 i 2 i j Button Memory  jButtonMemory i J Button  JButton j Button Memory  jButtonMemory i set Size  setSize 50 33 j Button Memory  jButtonMemory i set Font  setFont Font Arial 0 13 j Button Memory  jButtonMemory i set Border  setBorder j Button Memory  jButtonMemory 0 set Text  setText M j Button Memory  jButtonMemory 0 set Location  setLocation 10 150 j Button Memory  jButtonMemory 1 set Text  setText MS j Button Memory  jButtonMemory 1 set Location  setLocation 60 150 i 0 i 3 i j Button Clear  jButtonClear i J Button  JButton j Button Clear  jButtonClear i set Size  setSize 45 33 j Button Clear  jButtonClear i set Font  setFont Font Vrinda 0 17 j Button Clear  jButtonClear i set Border  setBorder j Button Clear  jButtonClear 0 set Text  setText C j Button Clear  jButtonClear 0 set Location  setLocation 170 150 j Button Clear  jButtonClear 1 set Text  setText AC j Button Clear  jButtonClear 1 set Location  setLocation 215 150 j Button Clear  jButtonClear 2 set Text  setText B j Button Clear  jButtonClear 2 set Location  setLocation 110 150 j Button Clear  jButtonClear 2 set Size  setSize 50 33 i 0 i 2 i j Label Display  jLabelDisplay i J Label  JLabel j Label Display  jLabelDisplay i set Size  setSize 250 45 j Label Display  jLabelDisplay i set Horizontal Alignment  setHorizontalAlignment 4 j Label Display  jLabelDisplay i set Font  setFont Font Lucida Console 0 16 j Label Display  jLabelDisplay i set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Label Display  jLabelDisplay 0 set Location  setLocation 10 18 j Label Display  jLabelDisplay 1 set Location  setLocation 10 63 j Label Display  jLabelDisplay 1 set Size  setSize 250 60 j Label Display  jLabelDisplay 1 set Font  setFont Font Lucida Console 0 20 i 0 i 10 i add j Button Numerical  jButtonNumerical i add j Button Point  jButtonPoint i 0 i 7 i add j Button Operator  jButtonOperator i i 0 i 2 i add j Button Memory  jButtonMemory i i 0 i 3 i add j Button Clear  jButtonClear i i 0 i 2 i add j Label Display  jLabelDisplay i set Bounds  setBounds 0 0 276 425 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Simple Calculator Background  SimpleCalculatorBackground jpg 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, buttons, point, sqrt, ms, ac, back, space, operation, result, numeric, operator, memory, clear, display, label, labels, set, criteria, main, method, initializing, gui, variables, placing, specific, frame, specifies, button, numerical, jbuttonnumerical, jbutton, jbuttonpoint, jbuttonoperator, jbuttonmemory, jbuttonclear, jlabeldisplay, jlabel, size, setsize, location, setlocation, font, setfont, calibri, background, setbackground, color, border, setborder, text, settext, setbounds, vrinda, arial, horizontal, alignment, sethorizontalalignment, lucida, console, soft, bevel, softbevelborder, bevelborder, lowered, add, icon, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, simple, calculator, simplecalculatorbackground, jpg]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorGui.java,main
154 , 170
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		SimpleCalculatorGui gui = new SimpleCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 280, 420);
		jFrame.setVisible(true);
		//jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form  j Frame  jFrame set Layout  setLayout null    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Simple Calculator Gui  SimpleCalculatorGui gui Simple Calculator Gui  SimpleCalculatorGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 230 115 280 420 j Frame  jFrame set Visible  setVisible j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, frame, jframe, layout, setlayout, null, method, simple, calculator, gui, simplecalculatorgui, bounds, setbounds, visible, setvisible, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorGui.java,SimpleCalculatorGui
33 , 36
------------------------------------------------------------------------
	/***##Constructor##***/
	public SimpleCalculatorGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Simple Calculator Gui  SimpleCalculatorGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[simple, calculator, gui, simplecalculatorgui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorGui.java,SimpleCalculatorGui
16 , 171
------------------------------------------------------------------------
/**
 * A Simple Calculator GUI
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class SimpleCalculatorGui extends JLabel{
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JButton[] jButtonNumerical;
	JButton[] jButtonOperator;
	JButton[] jButtonMemory;
	JButton[] jButtonClear;
	JButton jButtonPoint;
	JLabel[] jLabelDisplay;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public SimpleCalculatorGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jButtonNumerical=new JButton[10];	//10 buttons(0-9)
		jButtonPoint=new JButton();			//point(.)
		jButtonOperator=new JButton[7];		//+, -, *, /, SQRT(), =
		jButtonMemory=new JButton[2];		//M, MS
		jButtonClear=new JButton[3]; 		//AC, C, back space
		jLabelDisplay=new JLabel[2];	//operation, result
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Numeric Buttons
		for(int i=0; i<10; i++){
			jButtonNumerical[i] = new JButton(""+i);
			jButtonNumerical[i].setSize(50, 40);
			jButtonNumerical[i].setLocation(((i-1)%3)*50+10, 280-(((i-1)/3)*40));
			jButtonNumerical[i].setFont(new Font("Calibri", 0, 19));
			jButtonNumerical[i].setBackground(new Color(200, 200, 190));
			jButtonNumerical[i].setBorder(null);
		}
		jButtonNumerical[0].setLocation(10, 320); jButtonNumerical[0].setSize(100, 40);
		//Point
		jButtonPoint.setBackground(new Color(210, 210, 190));
		jButtonPoint.setText("."); jButtonPoint.setBounds(110, 320, 50, 40);
		jButtonPoint.setFont(new Font("Vrinda", 0, 26));
		//Operator Buttons
		for(int i=0; i<7; i++){
			jButtonOperator[i] = new JButton();
			jButtonOperator[i].setSize(45, 40);
			jButtonOperator[i].setFont(new Font("Calibri", 0, 17));
			jButtonOperator[i].setBackground(new Color(188, 188, 188));
			jButtonOperator[i].setBorder(null);
		}
		jButtonOperator[0].setText("+");
		jButtonOperator[0].setLocation(170, 320);
		jButtonOperator[1].setText("-"); 
		jButtonOperator[1].setLocation(170, 280);
		jButtonOperator[2].setText("x");
		jButtonOperator[2].setLocation(170, 240);
		jButtonOperator[3].setText("/"); 
		jButtonOperator[3].setLocation(170, 200);
		jButtonOperator[5].setText("=");
		jButtonOperator[5].setBounds(215, 280, 45, 80);
		jButtonOperator[4].setText("sqrt"); 
		jButtonOperator[4].setLocation(215, 240);
		jButtonOperator[6].setText("^"); 
		jButtonOperator[6].setLocation(215, 200);
		//Memory Buttons
		for(int i=0; i<2; i++){
			jButtonMemory[i] = new JButton(); 
			jButtonMemory[i].setSize(50, 33);
			jButtonMemory[i].setFont(new Font("Arial", 0, 13));
			jButtonMemory[i].setBorder(null);
		}
		jButtonMemory[0].setText("M"); 
		jButtonMemory[0].setLocation(10, 150);
		jButtonMemory[1].setText("MS"); 
		jButtonMemory[1].setLocation(60, 150);
		//Clear Buttons
		for(int i=0; i<3; i++){
			jButtonClear[i] = new JButton();
			jButtonClear[i].setSize(45, 33);
			jButtonClear[i].setFont(new Font("Vrinda", 0, 17));
			jButtonClear[i].setBorder(null);
		}
		jButtonClear[0].setText("C"); 
		jButtonClear[0].setLocation(170, 150);
		jButtonClear[1].setText("AC"); 
		jButtonClear[1].setLocation(215, 150);
		jButtonClear[2].setText("<B"); 
		jButtonClear[2].setLocation(110, 150); 
		jButtonClear[2].setSize(50, 33);
		//Display label
		for(int i=0; i<2; i++){
			jLabelDisplay[i] = new JLabel();
			jLabelDisplay[i].setSize(250, 45);
			jLabelDisplay[i].setHorizontalAlignment(4);
			jLabelDisplay[i].setFont(new Font("Lucida Console", 0, 16));
			jLabelDisplay[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		}
		jLabelDisplay[0].setLocation(10, 18);
		jLabelDisplay[1].setLocation(10, 63); jLabelDisplay[1].setSize(250, 60);
			jLabelDisplay[1].setFont(new Font("Lucida Console", 0, 20));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding buttons
		for(int i=0; i<10; i++){
			add(jButtonNumerical[i]);
		}
		add(jButtonPoint);
		for(int i=0; i<7; i++){
			add(jButtonOperator[i]);
		}
		for(int i=0; i<2; i++){
			add(jButtonMemory[i]);
		}
		for(int i=0; i<3; i++){
			add(jButtonClear[i]);
		}
		//adding display labels
		for(int i=0; i<2; i++){
			add(jLabelDisplay[i]);
		}
		// End of Adding Components 															#_______A_______#
		//set criteria of main label
		setBounds(0, 0, 276, 425);
		setIcon(new ImageIcon(getClass().getResource("/res/imgs/SimpleCalculatorBackground.jpg")));
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		SimpleCalculatorGui gui = new SimpleCalculatorGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 280, 420);
		jFrame.setVisible(true);
		//jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Simple Calculator Gui  SimpleCalculatorGui    
    Simple  Calculator  GUI 
  GUI
   
      Minhas  Kamal 
  Kamal
  J Button  JButton j Button Numerical  jButtonNumerical J Button  JButton j Button Operator  jButtonOperator J Button  JButton j Button Memory  jButtonMemory J Button  JButton j Button Clear  jButtonClear J Button  JButton j Button Point  jButtonPoint J Label  JLabel j Label Display  jLabelDisplay 
------------------------------------------------------------------------
[simple, calculator, gui, simplecalculatorgui, minhas, kamal, button, jbutton, numerical, jbuttonnumerical, operator, jbuttonoperator, memory, jbuttonmemory, clear, jbuttonclear, point, jbuttonpoint, label, jlabel, display, jlabeldisplay]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,operation
16 , 33
------------------------------------------------------------------------
	//Interfacing method
	public String operation(String operand1, String operand2, String operator){
		try{
			if(!operand1.equals("")){	//general case
				if(operator.equals("+")) return sum(operand1, operand2);
				else if(operator.equals("-")) return substract(operand1, operand2);
				else if(operator.equals("x") || operator.equals("*")) return multiply(operand1, operand2);
				else if(operator.equals("/")) return divide(operand1, operand2);
				else if(operator.equals("^")) return power(operand1, operand2);
				else return ""+Double.parseDouble(operand2);
			}
			else if(!operand2.equals("")) return ""+Double.parseDouble(operand2);	//when 0.999999999=1
			else return operand2;
		}catch(Exception e){
			new Message("Wrong input!", 420);
			return "";
		}
	}

------------------------------------------------------------------------
 operation  Interfacing  method  general  case   999999999   999999999   operand 1  operand1 equals operator equals sum operand 1  operand1 operand 2  operand2 operator equals substract operand 1  operand1 operand 2  operand2 operator equals x operator equals multiply operand 1  operand1 operand 2  operand2 operator equals divide operand 1  operand1 operand 2  operand2 operator equals power operand 1  operand1 operand 2  operand2 Double parse Double  parseDouble operand 2  operand2 operand 2  operand2 equals Double parse Double  parseDouble operand 2  operand2 operand 2  operand2 Exception e Message Wrong input 420 
------------------------------------------------------------------------
[operation, interfacing, method, general, case, operand, operand1, equals, operator, sum, operand2, substract, multiply, divide, power, double, parse, parsedouble, exception, message, wrong, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,sum
34 , 39
------------------------------------------------------------------------
	//operational methods
	private String sum(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a+b);
	}

------------------------------------------------------------------------
 sum  operational  methods   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[sum, operational, methods, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,substract
40 , 44
------------------------------------------------------------------------
	private String substract(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a-b);
	}

------------------------------------------------------------------------
 substract   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[substract, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,multiply
45 , 49
------------------------------------------------------------------------
	private String multiply(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a*b);
	}

------------------------------------------------------------------------
 multiply   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 a b 
------------------------------------------------------------------------
[multiply, double, parse, parsedouble, operand, operand1, operand2]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,divide
50 , 60
------------------------------------------------------------------------
	private String divide(String operand1, String operand2) throws Exception{
		String r="0";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(b!=0){
			r= ""+(a/b);
		}else{
			new Message("Cannot divide by Zero!", 420);
		}
		return r;
	}

------------------------------------------------------------------------
 divide   String r 0 a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 b 0 r a b Message Cannot divide by Zero 420 r 
------------------------------------------------------------------------
[divide, string, double, parse, parsedouble, operand, operand1, operand2, message]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,power
61 , 65
------------------------------------------------------------------------
	public String power(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+Math.pow(a, b);
	}

------------------------------------------------------------------------
 power   a Double parse Double  parseDouble operand 1  operand1 b Double parse Double  parseDouble operand 2  operand2 Math pow a b 
------------------------------------------------------------------------
[power, double, parse, parsedouble, operand, operand1, operand2, math, pow]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,sqrt
66 , 75
------------------------------------------------------------------------
	//sqrt method
	public String sqrt(String operand1){
		double a=Double.parseDouble(operand1);
		if(a>=0){
			return ""+Math.pow(a, 0.5);
		}else{
			new Message("There is no square-root of \n   negative number!", 420);
			return "";
		}
	}

------------------------------------------------------------------------
 sqrt  sqrt  method   a Double parse Double  parseDouble operand 1  operand1 a 0 Math pow a 0 5 Message There is no square root of n negative number 420 
------------------------------------------------------------------------
[sqrt, method, double, parse, parsedouble, operand, operand1, math, pow, message, square, root, negative, number]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,SimpleCalculatorOperation
14 , 15
------------------------------------------------------------------------
	public SimpleCalculatorOperation() {
	}

------------------------------------------------------------------------
 Simple Calculator Operation  SimpleCalculatorOperation   
------------------------------------------------------------------------
[simple, calculator, operation, simplecalculatoroperation]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/simpleCalculator/SimpleCalculatorOperation.java,SimpleCalculatorOperation
8 , 76
------------------------------------------------------------------------
/**
 * Controls operation of simple calculator.
 *
 * @author Minhas Kamal
 */
public class SimpleCalculatorOperation {
	public SimpleCalculatorOperation() {
	}
	//Interfacing method
	public String operation(String operand1, String operand2, String operator){
		try{
			if(!operand1.equals("")){	//general case
				if(operator.equals("+")) return sum(operand1, operand2);
				else if(operator.equals("-")) return substract(operand1, operand2);
				else if(operator.equals("x") || operator.equals("*")) return multiply(operand1, operand2);
				else if(operator.equals("/")) return divide(operand1, operand2);
				else if(operator.equals("^")) return power(operand1, operand2);
				else return ""+Double.parseDouble(operand2);
			}
			else if(!operand2.equals("")) return ""+Double.parseDouble(operand2);	//when 0.999999999=1
			else return operand2;
		}catch(Exception e){
			new Message("Wrong input!", 420);
			return "";
		}
	}
	//operational methods
	private String sum(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a+b);
	}
	private String substract(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a-b);
	}
	private String multiply(String operand1, String operand2) throws Exception{
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+(a*b);
	}
	private String divide(String operand1, String operand2) throws Exception{
		String r="0";
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		if(b!=0){
			r= ""+(a/b);
		}else{
			new Message("Cannot divide by Zero!", 420);
		}
		return r;
	}
	public String power(String operand1, String operand2){
		double a=Double.parseDouble(operand1);
		double b=Double.parseDouble(operand2);
		return ""+Math.pow(a, b);
	}
	//sqrt method
	public String sqrt(String operand1){
		double a=Double.parseDouble(operand1);
		if(a>=0){
			return ""+Math.pow(a, 0.5);
		}else{
			new Message("There is no square-root of \n   negative number!", 420);
			return "";
		}
	}
}

------------------------------------------------------------------------
 Simple Calculator Operation  SimpleCalculatorOperation   
   Controls  operation   simple  calculator 
  
      Minhas  Kamal 
  Kamal
  
------------------------------------------------------------------------
[simple, calculator, operation, simplecalculatoroperation, controls, minhas, kamal]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,initialComponent
61 , 136
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings({ "serial" })
	private void initialComponent() {
		// GUI Initialization
		unitConvgui = new UnitConverterGui();
		//operation object
		unitConvOperLength = new UnitConverterOperationLength();
		unitConvOperWeight = new UnitConverterOperationWeight();
		unitConvOperTemperature = new UnitConverterOperationTemperature();
		unitConvOperArea = new UnitConverterOperationArea();
		unitConvOperVolume = new UnitConverterOperationVolume();
		unitConvOperTime = new UnitConverterOperationTime();
		unitConvOperEnergy = new UnitConverterOperationEnergy();
		unitConvOperPower = new UnitConverterOperationPower();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"UnitConverterInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jCBoxTypeSelection = unitConvgui.jCBoxTypeSelection; 
		jComboBoxType = unitConvgui.jComboBoxType; 
		jTFieldIO = unitConvgui.jTFieldIO;
		jButtonConvert = unitConvgui.jButtonConvert;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		jCBoxTypeSelection.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jCBoxTypeSelectionActionPerformed(evt);
            }
        });
		jComboBoxType[0].addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jComboBoxTypeFromActionPerformed(evt);
            }
        });
		jComboBoxType[1].addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jComboBoxTypeToActionPerformed(evt);
            }
        });
		jButtonConvert.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	buttonPressed=true;
            	jButtonConvertActionPerformed();
            	buttonPressed=false;
            }
        });
		jButtonConvert.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
		jButtonConvert.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	buttonPressed=true;
            	jButtonConvertActionPerformed();
            	buttonPressed=false;
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//setting criterion of the frame
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Unit Converter");		
		super.gui.setBounds(230, 115, 350, 400);
		super.gui.add(unitConvgui);
		super.gui.setResizable(false);
		super.gui.setLayout(null);
		super.gui.setFocusable(true);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			  End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization  operation  object  instruction    setting  criterion    frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  unit Convgui  unitConvgui Unit Converter Gui  UnitConverterGui unit Conv Oper Length  unitConvOperLength Unit Converter Operation Length  UnitConverterOperationLength unit Conv Oper Weight  unitConvOperWeight Unit Converter Operation Weight  UnitConverterOperationWeight unit Conv Oper Temperature  unitConvOperTemperature Unit Converter Operation Temperature  UnitConverterOperationTemperature unit Conv Oper Area  unitConvOperArea Unit Converter Operation Area  UnitConverterOperationArea unit Conv Oper Volume  unitConvOperVolume Unit Converter Operation Volume  UnitConverterOperationVolume unit Conv Oper Time  unitConvOperTime Unit Converter Operation Time  UnitConverterOperationTime unit Conv Oper Energy  unitConvOperEnergy Unit Converter Operation Energy  UnitConverterOperationEnergy unit Conv Oper Power  unitConvOperPower Unit Converter Operation Power  UnitConverterOperationPower instruction File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Unit Converter Instruction  UnitConverterInstruction txt Exception e instruction EMPTY j C Box Type Selection  jCBoxTypeSelection unit Convgui  unitConvgui j C Box Type Selection  jCBoxTypeSelection j Combo Box Type  jComboBoxType unit Convgui  unitConvgui j Combo Box Type  jComboBoxType j T Field IO  jTFieldIO unit Convgui  unitConvgui j T Field IO  jTFieldIO j Button Convert  jButtonConvert unit Convgui  unitConvgui j Button Convert  jButtonConvert j C Box Type Selection  jCBoxTypeSelection add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j C Box Type Selection Action Performed  jCBoxTypeSelectionActionPerformed evt j Combo Box Type  jComboBoxType 0 add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Combo Box Type From Action Performed  jComboBoxTypeFromActionPerformed evt j Combo Box Type  jComboBoxType 1 add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Combo Box Type To Action Performed  jComboBoxTypeToActionPerformed evt j Button Convert  jButtonConvert add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt button Pressed  buttonPressed j Button Convert Action Performed  jButtonConvertActionPerformed button Pressed  buttonPressed j Button Convert  jButtonConvert get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button Convert  jButtonConvert get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt button Pressed  buttonPressed j Button Convert Action Performed  jButtonConvertActionPerformed button Pressed  buttonPressed gui set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE gui set Title  setTitle Unit Converter gui set Bounds  setBounds 230 115 350 400 gui add unit Convgui  unitConvgui gui set Resizable  setResizable gui set Layout  setLayout gui set Focusable  setFocusable 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, operation, object, instruction, setting, criterion, frame, method, initializing, variables, placing, specific, space, specifies, criteria, main, unit, convgui, unitconvgui, converter, unitconvertergui, conv, oper, length, unitconvoperlength, unitconverteroperationlength, weight, unitconvoperweight, unitconverteroperationweight, temperature, unitconvopertemperature, unitconverteroperationtemperature, area, unitconvoperarea, unitconverteroperationarea, volume, unitconvopervolume, unitconverteroperationvolume, time, unitconvopertime, unitconverteroperationtime, energy, unitconvoperenergy, unitconverteroperationenergy, power, unitconvoperpower, unitconverteroperationpower, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, unitconverterinstruction, txt, exception, empty, box, type, selection, jcboxtypeselection, combo, jcomboboxtype, field, jtfieldio, button, convert, jbuttonconvert, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jcboxtypeselectionactionperformed, jcomboboxtypefromactionperformed, jcomboboxtypetoactionperformed, pressed, buttonpressed, jbuttonconvertactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction, set, default, close, setdefaultcloseoperation, javax, swing, constants, windowconstants, exit, exit_on_close, title, settitle, bounds, setbounds, resizable, setresizable, layout, setlayout, focusable, setfocusable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,jCBoxTypeSelectionActionPerformed
140 , 199
------------------------------------------------------------------------
	//Mode
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void jCBoxTypeSelectionActionPerformed(ActionEvent evt){
		SelectedIndex=jCBoxTypeSelection.getSelectedIndex()+1;
		if(SelectedIndex==1){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Angstrom", "Nanometer", "Micron", 
					"Millimeter", "Centimeter", "Meter", "KiloMeter", "Inch", "Feet", "Yard", "Nautical Mile", "Mile",
					"Rod"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Angstrom", "Nanometer", "Micron", 
					"Millimeter", "Centimeter", "Meter", "KiloMeter", "Inch", "Feet", "Yard", "Nautical Mile", "Mile",
					"Rod"}));
		}else if(SelectedIndex==2){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Milligram", "Gram", "Kilogram",
					"Tonne", "Ounce", "Pound", "Carat"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Milligram", "Gram", "Kilogram",
					"Tonne", "Ounce", "Pound", "Carat"}));
		}else if(SelectedIndex==3){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Celsius", "Fahrenheit", "Kelvin"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Celsius", "Fahrenheit", "Kelvin"}));
		}else if(SelectedIndex==4){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Square Centimeter", "Square Meter",
					"Hectare", "Square Kilometer", "Square Inch", "Square Feet", "Square Yard", "Square Mile", "Katha", 
					"Bigha", "Satak", "Acre"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Square Centimeter", "Square Meter",
					"Hectare", "Square Kilometer", "Square Inch", "Square Feet", "Square Yard", "Square Mile", "Katha", 
					"Bigha", "Satak", "Acre"}));
		}else if(SelectedIndex==5){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Cubic Centimeter", "Cubic Meter",
					"Cubic Inch", "Cubic Feet", "Cubic Yard", "Liter", "Gallon(UK)", "Gallon(US)"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Cubic Centimeter", "Cubic Meter",
					"Cubic Inch", "Cubic Feet", "Cubic Yard", "Liter", "Gallon(UK)", "Gallon(US)"}));
		}else if(SelectedIndex==6){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Nanosecond", "Millisecond", 
					"Second", "Minute", "Hour", "Day" , "Week"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Nanosecond", "Millisecond", 
					"Second", "Minute", "Hour", "Day" , "Week"}));
		}else if(SelectedIndex==7){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Joule", "Kilojoule",
					"Calorie", "Kilocalorie", "Electron-Volts", "Foot-Pound"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Joule", "Kilojoule",
					"Calorie", "Kilocalorie", "Electron-Volts", "Foot-Pound"}));
		}else if(SelectedIndex==8){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Watt", "Kilowatt",
					"Horsepower" }));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Watt", "Kilowatt",
					"Horsepower" }));
		}
		//initializing
		from=1;
		to=1;
		jTFieldIO[1].setText("");
	}

------------------------------------------------------------------------
 j C Box Type Selection Action Performed  jCBoxTypeSelectionActionPerformed  Mode  Setting  types  Setting  types  Setting  types  Setting  types  Setting  types  Setting  types  Setting  types  Setting  types  initializing   Selected Index  SelectedIndex j C Box Type Selection  jCBoxTypeSelection get Selected Index  getSelectedIndex 1 Selected Index  SelectedIndex 1 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Angstrom Nanometer Micron Millimeter Centimeter Meter Kilo Meter  KiloMeter Inch Feet Yard Nautical Mile Mile Rod j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Angstrom Nanometer Micron Millimeter Centimeter Meter Kilo Meter  KiloMeter Inch Feet Yard Nautical Mile Mile Rod Selected Index  SelectedIndex 2 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Milligram Gram Kilogram Tonne Ounce Pound Carat j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Milligram Gram Kilogram Tonne Ounce Pound Carat Selected Index  SelectedIndex 3 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Celsius Fahrenheit Kelvin j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Celsius Fahrenheit Kelvin Selected Index  SelectedIndex 4 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Square Centimeter Square Meter Hectare Square Kilometer Square Inch Square Feet Square Yard Square Mile Katha Bigha Satak Acre j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Square Centimeter Square Meter Hectare Square Kilometer Square Inch Square Feet Square Yard Square Mile Katha Bigha Satak Acre Selected Index  SelectedIndex 5 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Cubic Centimeter Cubic Meter Cubic Inch Cubic Feet Cubic Yard Liter Gallon UK Gallon US j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Cubic Centimeter Cubic Meter Cubic Inch Cubic Feet Cubic Yard Liter Gallon UK Gallon US Selected Index  SelectedIndex 6 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Nanosecond Millisecond Second Minute Hour Day Week j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Nanosecond Millisecond Second Minute Hour Day Week Selected Index  SelectedIndex 7 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Joule Kilojoule Calorie Kilocalorie Electron Volts Foot Pound j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Joule Kilojoule Calorie Kilocalorie Electron Volts Foot Pound Selected Index  SelectedIndex 8 j Combo Box Type  jComboBoxType 0 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Watt Kilowatt Horsepower j Combo Box Type  jComboBoxType 1 set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Watt Kilowatt Horsepower from 1 to 1 j T Field IO  jTFieldIO 1 set Text  setText 
------------------------------------------------------------------------
[box, type, selection, action, performed, jcboxtypeselectionactionperformed, mode, setting, types, initializing, selected, index, selectedindex, jcboxtypeselection, getselectedindex, combo, jcomboboxtype, set, model, setmodel, default, defaultcomboboxmodel, string, angstrom, nanometer, micron, millimeter, centimeter, meter, kilo, kilometer, inch, feet, yard, nautical, mile, rod, milligram, gram, kilogram, tonne, ounce, pound, carat, celsius, fahrenheit, kelvin, square, hectare, katha, bigha, satak, acre, cubic, liter, gallon, uk, nanosecond, millisecond, minute, hour, day, week, joule, kilojoule, calorie, kilocalorie, electron, volts, foot, watt, kilowatt, horsepower, field, io, jtfieldio, text, settext]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,jComboBoxTypeFromActionPerformed
200 , 204
------------------------------------------------------------------------
	//Combo Box Item//
	private void jComboBoxTypeFromActionPerformed(ActionEvent evt){
		from=jComboBoxType[0].getSelectedIndex()+1;
		jButtonConvertActionPerformed();
	}

------------------------------------------------------------------------
 j Combo Box Type From Action Performed  jComboBoxTypeFromActionPerformed  Combo  Box  Item   from j Combo Box Type  jComboBoxType 0 get Selected Index  getSelectedIndex 1 j Button Convert Action Performed  jButtonConvertActionPerformed 
------------------------------------------------------------------------
[combo, box, type, action, performed, jcomboboxtypefromactionperformed, item, jcomboboxtype, selected, index, getselectedindex, button, convert, jbuttonconvertactionperformed]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,jComboBoxTypeToActionPerformed
205 , 208
------------------------------------------------------------------------
	private void jComboBoxTypeToActionPerformed(ActionEvent evt){
		to=jComboBoxType[1].getSelectedIndex()+1;
		jButtonConvertActionPerformed();
	}

------------------------------------------------------------------------
 j Combo Box Type To Action Performed  jComboBoxTypeToActionPerformed   to j Combo Box Type  jComboBoxType 1 get Selected Index  getSelectedIndex 1 j Button Convert Action Performed  jButtonConvertActionPerformed 
------------------------------------------------------------------------
[combo, box, type, action, performed, jcomboboxtypetoactionperformed, jcomboboxtype, selected, index, getselectedindex, button, convert, jbuttonconvertactionperformed]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,jButtonConvertActionPerformed
209 , 236
------------------------------------------------------------------------
	//Convert Button//
	private void jButtonConvertActionPerformed(){
		try{
			double input=Double.parseDouble(jTFieldIO[0].getText());
			double output=0.0;
			if(SelectedIndex==1){
				output = unitConvOperLength.Length(from, to, input);
			}else if(SelectedIndex==2){
				output = unitConvOperWeight.Weight(from, to, input);
			}else if(SelectedIndex==3){
				output = unitConvOperTemperature.Temperature(from, to, input);
			}else if(SelectedIndex==4){
				output = unitConvOperArea.Area(from, to, input);
			}else if(SelectedIndex==5){
				output = unitConvOperVolume.Volume(from, to, input);
			}else if(SelectedIndex==6){
				output = unitConvOperTime.Time(from, to, input);
			}else if(SelectedIndex==7){
				output = unitConvOperEnergy.Energy(from, to, input);
			}else if(SelectedIndex==8){
				output = unitConvOperPower.Power(from, to, input);
			}
			jTFieldIO[1].setText(output+"");
		}catch(Exception e){
			if(buttonPressed) new Message("Math Error!\n   Please input correctly.", 420);
			else jTFieldIO[1].setText("");
		}
	}

------------------------------------------------------------------------
 j Button Convert Action Performed  jButtonConvertActionPerformed  Convert  Button   input Double parse Double  parseDouble j T Field IO  jTFieldIO 0 get Text  getText output 0 0 Selected Index  SelectedIndex 1 output unit Conv Oper Length  unitConvOperLength Length from to input Selected Index  SelectedIndex 2 output unit Conv Oper Weight  unitConvOperWeight Weight from to input Selected Index  SelectedIndex 3 output unit Conv Oper Temperature  unitConvOperTemperature Temperature from to input Selected Index  SelectedIndex 4 output unit Conv Oper Area  unitConvOperArea Area from to input Selected Index  SelectedIndex 5 output unit Conv Oper Volume  unitConvOperVolume Volume from to input Selected Index  SelectedIndex 6 output unit Conv Oper Time  unitConvOperTime Time from to input Selected Index  SelectedIndex 7 output unit Conv Oper Energy  unitConvOperEnergy Energy from to input Selected Index  SelectedIndex 8 output unit Conv Oper Power  unitConvOperPower Power from to input j T Field IO  jTFieldIO 1 set Text  setText output Exception e button Pressed  buttonPressed Message Math Error n Please input correctly 420 j T Field IO  jTFieldIO 1 set Text  setText 
------------------------------------------------------------------------
[button, convert, action, performed, jbuttonconvertactionperformed, input, double, parse, parsedouble, field, io, jtfieldio, text, gettext, output, selected, index, selectedindex, unit, conv, oper, length, unitconvoperlength, weight, unitconvoperweight, temperature, unitconvopertemperature, area, unitconvoperarea, volume, unitconvopervolume, time, unitconvopertime, energy, unitconvoperenergy, power, unitconvoperpower, set, settext, exception, pressed, buttonpressed, message, math, error, correctly]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,main
246 , 256
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new UnitConverter();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Unit Converter  UnitConverter 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, unit, converter, unitconverter]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,UnitConverter
52 , 60
------------------------------------------------------------------------
	/***##Constructor##***/
	public UnitConverter() {
		SelectedIndex=1;
		from=1;
		to=1;
		buttonPressed=false;
		initialComponent();
		super.jCBItemMode[4].setSelected(true);
	}

------------------------------------------------------------------------
 Unit Converter  UnitConverter   Constructor  Selected Index  SelectedIndex 1 from 1 to 1 button Pressed  buttonPressed initial Component  initialComponent j CB Item Mode  jCBItemMode 4 set Selected  setSelected 
------------------------------------------------------------------------
[unit, converter, unitconverter, constructor, selected, index, selectedindex, button, pressed, buttonpressed, initial, component, initialcomponent, cb, item, mode, jcbitemmode, set, setselected]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverter.java,UnitConverter
21 , 257
------------------------------------------------------------------------
/**
 * A Unit Converter
 * 
 * @author Minhas Kamal
 */
public class UnitConverter extends UltimateCalculatorFrame{
	// GUI Declaration
	private UnitConverterGui unitConvgui;
	//operation object
	private UnitConverterOperationLength unitConvOperLength;
	private UnitConverterOperationWeight unitConvOperWeight;
	private UnitConverterOperationTemperature unitConvOperTemperature;
	private UnitConverterOperationArea unitConvOperArea;
	private UnitConverterOperationVolume unitConvOperVolume;
	private UnitConverterOperationTime unitConvOperTime;
	private UnitConverterOperationEnergy unitConvOperEnergy;
	private UnitConverterOperationPower unitConvOperPower;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	@SuppressWarnings("rawtypes")
	private JComboBox jCBoxTypeSelection;
	@SuppressWarnings("rawtypes")
	private JComboBox[] jComboBoxType;
    private JTextField[] jTFieldIO;
    private JButton jButtonConvert;
    //other variables
    private int SelectedIndex;
    private int from, to;
    private boolean buttonPressed;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public UnitConverter() {
		SelectedIndex=1;
		from=1;
		to=1;
		buttonPressed=false;
		initialComponent();
		super.jCBItemMode[4].setSelected(true);
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings({ "serial" })
	private void initialComponent() {
		// GUI Initialization
		unitConvgui = new UnitConverterGui();
		//operation object
		unitConvOperLength = new UnitConverterOperationLength();
		unitConvOperWeight = new UnitConverterOperationWeight();
		unitConvOperTemperature = new UnitConverterOperationTemperature();
		unitConvOperArea = new UnitConverterOperationArea();
		unitConvOperVolume = new UnitConverterOperationVolume();
		unitConvOperTime = new UnitConverterOperationTime();
		unitConvOperEnergy = new UnitConverterOperationEnergy();
		unitConvOperPower = new UnitConverterOperationPower();
		//instruction
		try {
			super.instruction = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/" +
					"UnitConverterInstruction.txt"));
		} catch (Exception e) {
			super.instruction = "EMPTY";
		}
		//**
		// Assignation 																			#*******A*******#
		//**
		jCBoxTypeSelection = unitConvgui.jCBoxTypeSelection; 
		jComboBoxType = unitConvgui.jComboBoxType; 
		jTFieldIO = unitConvgui.jTFieldIO;
		jButtonConvert = unitConvgui.jButtonConvert;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		jCBoxTypeSelection.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jCBoxTypeSelectionActionPerformed(evt);
            }
        });
		jComboBoxType[0].addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jComboBoxTypeFromActionPerformed(evt);
            }
        });
		jComboBoxType[1].addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jComboBoxTypeToActionPerformed(evt);
            }
        });
		jButtonConvert.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	buttonPressed=true;
            	jButtonConvertActionPerformed();
            	buttonPressed=false;
            }
        });
		jButtonConvert.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
		jButtonConvert.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	buttonPressed=true;
            	jButtonConvertActionPerformed();
            	buttonPressed=false;
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
		//setting criterion of the frame
		super.gui.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		super.gui.setTitle("Unit Converter");		
		super.gui.setBounds(230, 115, 350, 400);
		super.gui.add(unitConvgui);
		super.gui.setResizable(false);
		super.gui.setLayout(null);
		super.gui.setFocusable(true);
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	//Mode
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void jCBoxTypeSelectionActionPerformed(ActionEvent evt){
		SelectedIndex=jCBoxTypeSelection.getSelectedIndex()+1;
		if(SelectedIndex==1){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Angstrom", "Nanometer", "Micron", 
					"Millimeter", "Centimeter", "Meter", "KiloMeter", "Inch", "Feet", "Yard", "Nautical Mile", "Mile",
					"Rod"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Angstrom", "Nanometer", "Micron", 
					"Millimeter", "Centimeter", "Meter", "KiloMeter", "Inch", "Feet", "Yard", "Nautical Mile", "Mile",
					"Rod"}));
		}else if(SelectedIndex==2){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Milligram", "Gram", "Kilogram",
					"Tonne", "Ounce", "Pound", "Carat"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Milligram", "Gram", "Kilogram",
					"Tonne", "Ounce", "Pound", "Carat"}));
		}else if(SelectedIndex==3){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Celsius", "Fahrenheit", "Kelvin"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Celsius", "Fahrenheit", "Kelvin"}));
		}else if(SelectedIndex==4){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Square Centimeter", "Square Meter",
					"Hectare", "Square Kilometer", "Square Inch", "Square Feet", "Square Yard", "Square Mile", "Katha", 
					"Bigha", "Satak", "Acre"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Square Centimeter", "Square Meter",
					"Hectare", "Square Kilometer", "Square Inch", "Square Feet", "Square Yard", "Square Mile", "Katha", 
					"Bigha", "Satak", "Acre"}));
		}else if(SelectedIndex==5){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Cubic Centimeter", "Cubic Meter",
					"Cubic Inch", "Cubic Feet", "Cubic Yard", "Liter", "Gallon(UK)", "Gallon(US)"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Cubic Centimeter", "Cubic Meter",
					"Cubic Inch", "Cubic Feet", "Cubic Yard", "Liter", "Gallon(UK)", "Gallon(US)"}));
		}else if(SelectedIndex==6){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Nanosecond", "Millisecond", 
					"Second", "Minute", "Hour", "Day" , "Week"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Nanosecond", "Millisecond", 
					"Second", "Minute", "Hour", "Day" , "Week"}));
		}else if(SelectedIndex==7){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Joule", "Kilojoule",
					"Calorie", "Kilocalorie", "Electron-Volts", "Foot-Pound"}));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Joule", "Kilojoule",
					"Calorie", "Kilocalorie", "Electron-Volts", "Foot-Pound"}));
		}else if(SelectedIndex==8){
			//Setting types
			jComboBoxType[0].setModel(new DefaultComboBoxModel(new String[] {"Watt", "Kilowatt",
					"Horsepower" }));
			jComboBoxType[1].setModel(new DefaultComboBoxModel(new String[] {"Watt", "Kilowatt",
					"Horsepower" }));
		}
		//initializing
		from=1;
		to=1;
		jTFieldIO[1].setText("");
	}
	//Combo Box Item//
	private void jComboBoxTypeFromActionPerformed(ActionEvent evt){
		from=jComboBoxType[0].getSelectedIndex()+1;
		jButtonConvertActionPerformed();
	}
	private void jComboBoxTypeToActionPerformed(ActionEvent evt){
		to=jComboBoxType[1].getSelectedIndex()+1;
		jButtonConvertActionPerformed();
	}
	//Convert Button//
	private void jButtonConvertActionPerformed(){
		try{
			double input=Double.parseDouble(jTFieldIO[0].getText());
			double output=0.0;
			if(SelectedIndex==1){
				output = unitConvOperLength.Length(from, to, input);
			}else if(SelectedIndex==2){
				output = unitConvOperWeight.Weight(from, to, input);
			}else if(SelectedIndex==3){
				output = unitConvOperTemperature.Temperature(from, to, input);
			}else if(SelectedIndex==4){
				output = unitConvOperArea.Area(from, to, input);
			}else if(SelectedIndex==5){
				output = unitConvOperVolume.Volume(from, to, input);
			}else if(SelectedIndex==6){
				output = unitConvOperTime.Time(from, to, input);
			}else if(SelectedIndex==7){
				output = unitConvOperEnergy.Energy(from, to, input);
			}else if(SelectedIndex==8){
				output = unitConvOperPower.Power(from, to, input);
			}
			jTFieldIO[1].setText(output+"");
		}catch(Exception e){
			if(buttonPressed) new Message("Math Error!\n   Please input correctly.", 420);
			else jTFieldIO[1].setText("");
		}
	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new UnitConverter();
	}
}

------------------------------------------------------------------------
 Unit Converter  UnitConverter  GUI  Declaration  operation  object    variables   
    Unit  Converter 
  Converter
   
      Minhas  Kamal 
  Kamal
  Unit Converter Gui  UnitConverterGui unit Convgui  unitConvgui Unit Converter Operation Length  UnitConverterOperationLength unit Conv Oper Length  unitConvOperLength Unit Converter Operation Weight  UnitConverterOperationWeight unit Conv Oper Weight  unitConvOperWeight Unit Converter Operation Temperature  UnitConverterOperationTemperature unit Conv Oper Temperature  unitConvOperTemperature Unit Converter Operation Area  UnitConverterOperationArea unit Conv Oper Area  unitConvOperArea Unit Converter Operation Volume  UnitConverterOperationVolume unit Conv Oper Volume  unitConvOperVolume Unit Converter Operation Time  UnitConverterOperationTime unit Conv Oper Time  unitConvOperTime Unit Converter Operation Energy  UnitConverterOperationEnergy unit Conv Oper Energy  unitConvOperEnergy Unit Converter Operation Power  UnitConverterOperationPower unit Conv Oper Power  unitConvOperPower @ Suppress Warnings  @SuppressWarnings rawtypes J Combo Box  JComboBox j C Box Type Selection  jCBoxTypeSelection @ Suppress Warnings  @SuppressWarnings rawtypes J Combo Box  JComboBox j Combo Box Type  jComboBoxType J Text Field  JTextField j T Field IO  jTFieldIO J Button  JButton j Button Convert  jButtonConvert Selected Index  SelectedIndex from to button Pressed  buttonPressed 
------------------------------------------------------------------------
[unit, converter, unitconverter, gui, declaration, operation, object, variables, minhas, kamal, unitconvertergui, convgui, unitconvgui, length, unitconverteroperationlength, conv, oper, unitconvoperlength, weight, unitconverteroperationweight, unitconvoperweight, temperature, unitconverteroperationtemperature, unitconvopertemperature, area, unitconverteroperationarea, unitconvoperarea, volume, unitconverteroperationvolume, unitconvopervolume, time, unitconverteroperationtime, unitconvopertime, energy, unitconverteroperationenergy, unitconvoperenergy, power, unitconverteroperationpower, unitconvoperpower, suppress, warnings, @suppresswarnings, rawtypes, combo, box, jcombobox, type, selection, jcboxtypeselection, jcomboboxtype, text, field, jtextfield, io, jtfieldio, button, jbutton, convert, jbuttonconvert, selected, index, selectedindex, pressed, buttonpressed]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterGui.java,initialComponent
41 , 110
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jlabelIdentifier = new JLabel[2];
		jCBoxTypeSelection = new JComboBox(); 
		jComboBoxType = new JComboBox[2]; 
		jTFieldIO = new JTextField[2];
		jButtonConvert = new JButton();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Main combo box
		jCBoxTypeSelection.setBounds(10, 10, 325, 35);
		jCBoxTypeSelection.setBackground(new Color(154, 152, 151));
		jCBoxTypeSelection.setFont(new Font("Cambria", 0, 17));
		jCBoxTypeSelection.setModel(new DefaultComboBoxModel(new String[]{"  Length", "  Weight", "  Temperature", 
				"  Area", "  Volume", "  Time", "  Energy", "  Power"}));
		//loop for twins
		for(int i=0; i<2; i++){
			//Identification label
			jlabelIdentifier[i]=new JLabel();
			jlabelIdentifier[i].setBounds(18, 135+i*120, 40, 20);
			jlabelIdentifier[i].setFont(new Font("Vrinda", 1, 17));
			//combo boxes
			jComboBoxType[i]=new JComboBox();
			jComboBoxType[i].setBounds(10, 160+i*120, 140, 30);
			jComboBoxType[i].setBackground(new Color(134, 132, 131));
			jComboBoxType[i].setModel(new DefaultComboBoxModel(new String[] {"Angstrom", "Nanometer", "Micron", 
					"Millimeter", "Centimeter", "Meter", "KiloMeter", "Inch", "Feet", "Yard", "Nautical Mile", "Mile",
					"Rod"}));
			//text fields
			jTFieldIO[i]=new JTextField();
			jTFieldIO[i].setBounds(155, 160+i*120, 180, 30);
			jTFieldIO[i].setFont(new Font("Calibri", 0, 16));
			jTFieldIO[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
//			jTFieldIO[i].setBackground(new Color(174, 172, 171));
		}
		jlabelIdentifier[0].setText("From");
		jlabelIdentifier[1].setText("To");
		jTFieldIO[1].setEditable(false);	//output is not editable
		//button
		jButtonConvert.setBounds(173, 220, 90, 30);
		jButtonConvert.setText("Convert");
		jButtonConvert.setBackground(new Color(194, 192, 191));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		for(int i=0; i<2; i++){
			add(jlabelIdentifier[i]);
			add(jComboBoxType[i]);
			add(jTFieldIO[i]);
		}
		add(jButtonConvert);
		add(jCBoxTypeSelection);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		//Main label
		setBounds(0, 0, 350, 400);
		setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"UnitConverterBackground.jpg")));
		setLayout(null);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										   End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	  End   Adding  Components  															 _______ A _______  _______A_______  Setting  Criterion    Frame   Main  combo  box  loop   twins  			j T Field IO  			jTFieldIO set Background  setBackground  Color 174  172  171  Identification  label  combo  boxes  text  fields  output    editable  button   Main  label   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  jlabel Identifier  jlabelIdentifier J Label  JLabel 2 j C Box Type Selection  jCBoxTypeSelection J Combo Box  JComboBox j Combo Box Type  jComboBoxType J Combo Box  JComboBox 2 j T Field IO  jTFieldIO J Text Field  JTextField 2 j Button Convert  jButtonConvert J Button  JButton j C Box Type Selection  jCBoxTypeSelection set Bounds  setBounds 10 10 325 35 j C Box Type Selection  jCBoxTypeSelection set Background  setBackground Color 154 152 151 j C Box Type Selection  jCBoxTypeSelection set Font  setFont Font Cambria 0 17 j C Box Type Selection  jCBoxTypeSelection set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Length Weight Temperature Area Volume Time Energy Power i 0 i 2 i jlabel Identifier  jlabelIdentifier i J Label  JLabel jlabel Identifier  jlabelIdentifier i set Bounds  setBounds 18 135 i 120 40 20 jlabel Identifier  jlabelIdentifier i set Font  setFont Font Vrinda 1 17 j Combo Box Type  jComboBoxType i J Combo Box  JComboBox j Combo Box Type  jComboBoxType i set Bounds  setBounds 10 160 i 120 140 30 j Combo Box Type  jComboBoxType i set Background  setBackground Color 134 132 131 j Combo Box Type  jComboBoxType i set Model  setModel Default Combo Box Model  DefaultComboBoxModel String Angstrom Nanometer Micron Millimeter Centimeter Meter Kilo Meter  KiloMeter Inch Feet Yard Nautical Mile Mile Rod j T Field IO  jTFieldIO i J Text Field  JTextField j T Field IO  jTFieldIO i set Bounds  setBounds 155 160 i 120 180 30 j T Field IO  jTFieldIO i set Font  setFont Font Calibri 0 16 j T Field IO  jTFieldIO i set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED jlabel Identifier  jlabelIdentifier 0 set Text  setText From jlabel Identifier  jlabelIdentifier 1 set Text  setText To j T Field IO  jTFieldIO 1 set Editable  setEditable j Button Convert  jButtonConvert set Bounds  setBounds 173 220 90 30 j Button Convert  jButtonConvert set Text  setText Convert j Button Convert  jButtonConvert set Background  setBackground Color 194 192 191 i 0 i 2 i add jlabel Identifier  jlabelIdentifier i add j Combo Box Type  jComboBoxType i add j T Field IO  jTFieldIO i add j Button Convert  jButtonConvert add j C Box Type Selection  jCBoxTypeSelection set Bounds  setBounds 0 0 350 400 set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Unit Converter Background  UnitConverterBackground jpg set Layout  setLayout 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, criterion, frame, main, combo, box, loop, twins, field, io, jtfieldio, set, background, setbackground, color, identification, label, boxes, text, fields, output, editable, button, method, initializing, gui, variables, placing, specific, space, specifies, criteria, jlabel, identifier, jlabelidentifier, type, selection, jcboxtypeselection, jcombobox, jcomboboxtype, jtextfield, convert, jbuttonconvert, jbutton, setbounds, font, setfont, cambria, model, setmodel, default, defaultcomboboxmodel, string, length, weight, temperature, area, volume, time, energy, power, vrinda, angstrom, nanometer, micron, millimeter, centimeter, meter, kilo, kilometer, inch, feet, yard, nautical, mile, rod, calibri, border, setborder, soft, bevel, softbevelborder, bevelborder, lowered, settext, seteditable, add, icon, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, unit, converter, unitconverterbackground, jpg, layout, setlayout]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterGui.java,main
111 , 128
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		/* Create and display the form */
		UnitConverterGui gui = new UnitConverterGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 355, 400);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Unit Converter Gui  UnitConverterGui gui Unit Converter Gui  UnitConverterGui J Frame  JFrame j Frame  jFrame J Frame  JFrame j Frame  jFrame set Bounds  setBounds 230 115 355 400 j Frame  jFrame set Visible  setVisible j Frame  jFrame set Layout  setLayout j Frame  jFrame add gui j Frame  jFrame set Default Close Operation  setDefaultCloseOperation J Frame  JFrame EXIT ON CLOSE  EXIT_ON_CLOSE 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, unit, converter, gui, unitconvertergui, frame, jframe, bounds, setbounds, visible, setvisible, layout, setlayout, add, default, close, setdefaultcloseoperation, exit, exit_on_close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterGui.java,UnitConverterGui
37 , 40
------------------------------------------------------------------------
	/***##Constructor##***/
	public UnitConverterGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 Unit Converter Gui  UnitConverterGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[unit, converter, gui, unitconvertergui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterGui.java,UnitConverterGui
19 , 129
------------------------------------------------------------------------
/**
 * A Unit Converter GUI
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class UnitConverterGui extends JLabel {
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	@SuppressWarnings("rawtypes")
	JComboBox jCBoxTypeSelection;
	@SuppressWarnings("rawtypes")
	JComboBox[] jComboBoxType;
    JLabel[] jlabelIdentifier;
    JTextField[] jTFieldIO;
    JButton jButtonConvert;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public UnitConverterGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jlabelIdentifier = new JLabel[2];
		jCBoxTypeSelection = new JComboBox(); 
		jComboBoxType = new JComboBox[2]; 
		jTFieldIO = new JTextField[2];
		jButtonConvert = new JButton();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Main combo box
		jCBoxTypeSelection.setBounds(10, 10, 325, 35);
		jCBoxTypeSelection.setBackground(new Color(154, 152, 151));
		jCBoxTypeSelection.setFont(new Font("Cambria", 0, 17));
		jCBoxTypeSelection.setModel(new DefaultComboBoxModel(new String[]{"  Length", "  Weight", "  Temperature", 
				"  Area", "  Volume", "  Time", "  Energy", "  Power"}));
		//loop for twins
		for(int i=0; i<2; i++){
			//Identification label
			jlabelIdentifier[i]=new JLabel();
			jlabelIdentifier[i].setBounds(18, 135+i*120, 40, 20);
			jlabelIdentifier[i].setFont(new Font("Vrinda", 1, 17));
			//combo boxes
			jComboBoxType[i]=new JComboBox();
			jComboBoxType[i].setBounds(10, 160+i*120, 140, 30);
			jComboBoxType[i].setBackground(new Color(134, 132, 131));
			jComboBoxType[i].setModel(new DefaultComboBoxModel(new String[] {"Angstrom", "Nanometer", "Micron", 
					"Millimeter", "Centimeter", "Meter", "KiloMeter", "Inch", "Feet", "Yard", "Nautical Mile", "Mile",
					"Rod"}));
			//text fields
			jTFieldIO[i]=new JTextField();
			jTFieldIO[i].setBounds(155, 160+i*120, 180, 30);
			jTFieldIO[i].setFont(new Font("Calibri", 0, 16));
			jTFieldIO[i].setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
//			jTFieldIO[i].setBackground(new Color(174, 172, 171));
		}
		jlabelIdentifier[0].setText("From");
		jlabelIdentifier[1].setText("To");
		jTFieldIO[1].setEditable(false);	//output is not editable
		//button
		jButtonConvert.setBounds(173, 220, 90, 30);
		jButtonConvert.setText("Convert");
		jButtonConvert.setBackground(new Color(194, 192, 191));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		for(int i=0; i<2; i++){
			add(jlabelIdentifier[i]);
			add(jComboBoxType[i]);
			add(jTFieldIO[i]);
		}
		add(jButtonConvert);
		add(jCBoxTypeSelection);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		//Main label
		setBounds(0, 0, 350, 400);
		setIcon(new ImageIcon(getClass().getResource("/res/imgs/" +
				"UnitConverterBackground.jpg")));
		setLayout(null);
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		/* Create and display the form */
		UnitConverterGui gui = new UnitConverterGui();
		JFrame jFrame = new JFrame();
		jFrame.setBounds(230, 115, 355, 400);
		jFrame.setVisible(true);
		jFrame.setLayout(null);
		jFrame.add(gui);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}

------------------------------------------------------------------------
 Unit Converter Gui  UnitConverterGui    
    Unit  Converter  GUI 
  GUI
   
      Minhas  Kamal 
  Kamal
  @ Suppress Warnings  @SuppressWarnings rawtypes J Combo Box  JComboBox j C Box Type Selection  jCBoxTypeSelection @ Suppress Warnings  @SuppressWarnings rawtypes J Combo Box  JComboBox j Combo Box Type  jComboBoxType J Label  JLabel jlabel Identifier  jlabelIdentifier J Text Field  JTextField j T Field IO  jTFieldIO J Button  JButton j Button Convert  jButtonConvert 
------------------------------------------------------------------------
[unit, converter, gui, unitconvertergui, minhas, kamal, suppress, warnings, @suppresswarnings, rawtypes, combo, box, jcombobox, type, selection, jcboxtypeselection, jcomboboxtype, label, jlabel, identifier, jlabelidentifier, text, field, jtextfield, io, jtfieldio, button, jbutton, convert, jbuttonconvert]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationArea.java,Area
7 , 337
------------------------------------------------------------------------
	/**
	 * Area											
	**/
	public double Area(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Square Centimeter
			if(to==1){				//Square Centimeter
				output = input;
			}else if(to==2){		//Square Meter
				output = input*0.0001;
			}else if(to==3){		//Hectare
				output = input*0.00000001;
			}else if(to==4){		//Square Kilometer
				output = input*0.0000000001;
			}else if(to==5){		//Square Inch
				output = input*0.15500031000062;
			}else if(to==6){		//Square Feet
				output = input*0.001076391041671;
			}else if(to==7){		//Square Yard
				output = (input*0.001076391041671)/9;
			}else if(to==8){		//Square Mile
				output = (input*0.001076391041671)/27878400;
			}else if(to==9){		//Katha
				output = (input*0.001076391041671)/718.7400071874;
			}else if(to==10){		//Bigha
				output = (input*0.001076391041671)/14374.800143748;
			}else if(to==11){		//Satak
				output = (input*0.001076391041671)/435.60;
			}else if(to==12){		//Acre
				output = (input*0.001076391041671)/43560;
			}
		}
		else if(from==2){									//Square Meter
			if(to==1){				//Square Centimeter
				output = input*10000;
			}else if(to==2){		//Square Meter
				output = input;
			}else if(to==3){		//Hectare
				output = input*0.0001;
			}else if(to==4){		//Square Kilometer
				output = input*0.000001;
			}else if(to==5){		//Square Inch
				output = input*1550.0031000062;
			}else if(to==6){		//Square Feet
				output = input*10.76391041671;
			}else if(to==7){		//Square Yard
				output = (input*10.76391041671)/9;
			}else if(to==8){		//Square Mile
				output = (input*10.76391041671)/27878400;
			}else if(to==9){		//Katha
				output = input/66.9;
			}else if(to==10){		//Bigha
				output = input/1338;
			}else if(to==11){		//Satak
				output = (input*10.76391041671)/435.60;
			}else if(to==12){		//Acre
				output = (input*10.76391041671)/43560;
			}
		}
		else if(from==3){									//Hectare
			if(to==1){				//Square Centimeter
				output = input*100000000;
			}else if(to==2){		//Square Meter
				output = input*10000;
			}else if(to==3){		//Hectare
				output = input;
			}else if(to==4){		//Square Kilometer
				output = input*0.01;
			}else if(to==5){		//Square Inch
				output = input*15500031.000062;
			}else if(to==6){		//Square Feet
				output = input*107639.1041671;
			}else if(to==7){		//Square Yard
				output = (input*107639.1041671)/9;
			}else if(to==8){		//Square Mile
				output = (input*107639.1041671)/27878400;
			}else if(to==9){		//Katha
				output = (input*107639.1041671)/718.7400071874;
			}else if(to==10){		//Bigha
				output = (input*107639.1041671)/14374.800143748;
			}else if(to==11){		//Satak
				output = input*247.1053814671653;
			}else if(to==12){		//Acre
				output = input*2.471053814671653;
			}
		}
		else if(from==4){									//Square Kilometer
			if(to==1){				//Square Centimeter
				output = input*100000000*100;
			}else if(to==2){		//Square Meter
				output = input*1000000;
			}else if(to==3){		//Hectare
				output = input*100;
			}else if(to==4){		//Square Kilometer
				output = input;
			}else if(to==5){		//Square Inch
				output = input*1550003100.0062;
			}else if(to==6){		//Square Feet
				output = input*10763910.41671;
			}else if(to==7){		//Square Yard
				output = (input*10763910.41671)/9;
			}else if(to==8){		//Square Mile
				output = (input*10763910.41671)/27878400;
			}else if(to==9){		//Katha
				output = (input*10763910.41671)/718.7400071874;
			}else if(to==10){		//Bigha
				output = (input*10763910.41671)/14374.800143748;
			}else if(to==11){		//Satak
				output = (input*10763910.41671)/435.60;
			}else if(to==12){		//Acre
				output = (input*10763910.41671)/43560;
			}
		}
		else if(from==5){									//Square Inch
			if(to==1){				//Square Centimeter
				output = input*6.4516;
			}else if(to==2){		//Square Meter
				output = input*0.00064516;
			}else if(to==3){		//Hectare
				output = input*0.000000064516;
			}else if(to==4){		//Square Kilometer
				output = input*0.00000000064516;
			}else if(to==5){		//Square Inch
				output = input;
			}else if(to==6){		//Square Feet
				output = input/144;
			}else if(to==7){		//Square Yard
				output = input/1296;
			}else if(to==8){		//Square Mile
				output = input/(40144896*100);
			}else if(to==9){		//Katha
				output = input/103680;
			}else if(to==10){		//Bigha
				output = input/2073600;
			}else if(to==11){		//Satak
				output = input/62726.40;
			}else if(to==12){		//Acre
				output = input/6272640;
			}
		}
		else if(from==6){									//Square Feet
			if(to==1){				//Square Centimeter
				output = input*929.0304;
			}else if(to==2){		//Square Meter
				output = input*0.09290304;
			}else if(to==3){		//Hectare
				output = input*0.000009290304;
			}else if(to==4){		//Square Kilometer
				output = input*0.00000009290304;
			}else if(to==5){		//Square Inch
				output = input*144;
			}else if(to==6){		//Square Feet
				output = input;
			}else if(to==7){		//Square Yard
				output = input/9;
			}else if(to==8){		//Square Mile
				output = input/27878400;
			}else if(to==9){		//Katha
				output = input/718.7400071874001;
			}else if(to==10){		//Bigha
				output = input/14374.80000143748;
			}else if(to==11){		//Satak
				output = input/435.60;
			}else if(to==12){		//Acre
				output = input/43560;
			}
		}
		else if(from==7){									//Square Yard
			if(to==1){				//Square Centimeter
				output = input*8361.2736;
			}else if(to==2){		//Square Meter
				output = input*0.83612736;
			}else if(to==3){		//Hectare
				output = input*0.000083612736;
			}else if(to==4){		//Square Kilometer
				output = input*0.00000083612736;
			}else if(to==5){		//Square Inch
				output = input*1296;
			}else if(to==6){		//Square Feet
				output = input*9;
			}else if(to==7){		//Square Yard
				output = input;
			}else if(to==8){		//Square Mile
				output = input/3097600;
			}else if(to==9){		//Katha
				output = input/79.860000007986;
			}else if(to==10){		//Bigha
				output = input/1597.20000015972;
			}else if(to==11){		//Satak
				output = input/48.40;
			}else if(to==12){		//Acre
				output = input/4840;
			}
		}
		else if(from==8){									//Square Mile
			if(to==1){				//Square Centimeter
				output = input*25899881103.36;
			}else if(to==2){		//Square Meter
				output = input*2589988.110336;
			}else if(to==3){		//Hectare
				output = input*258.9988110336;
			}else if(to==4){		//Square Kilometer
				output = input*2.589988110336;
			}else if(to==5){		//Square Inch
				output = input*40144896*100;
			}else if(to==6){		//Square Feet
				output = input*27878400;
			}else if(to==7){		//Square Yard
				output = input*3097600;
			}else if(to==8){		//Square Mile
				output = input;
			}else if(to==9){		//Katha
				output = input*38787.8784;
			}else if(to==10){		//Bigha
				output = input*1939.39392;
			}else if(to==11){		//Satak
				output = input*64000;
			}else if(to==12){		//Acre
				output = input*640;
			}
		}
		else if(from==9){									//Katha
			if(to==1){				//Square Centimeter
				output = input*404685.64224*1.65;
			}else if(to==2){		//Square Meter
				output = input*40.468564224*1.65;
			}else if(to==3){		//Hectare
				output = input*0.0040468564224*1.65;
			}else if(to==4){		//Square Kilometer
				output = input*0.000040468564224*1.65;
			}else if(to==5){		//Square Inch
				output = input*62726.40*1.65;
			}else if(to==6){		//Square Feet
				output = input*435.60*1.65;
			}else if(to==7){		//Square Yard
				output = input*48.40*1.65;
			}else if(to==8){		//Square Mile
				output = input*0.000015625*1.65;
			}else if(to==9){		//Katha
				output = input;
			}else if(to==10){		//Bigha
				output = input/20;
			}else if(to==11){		//Satak
				output = input*1.65;
			}else if(to==12){		//Acre
				output = input/60.6060606061;
			}
		}
		else if(from==10){									//Bigha
			if(to==1){				//Square Centimeter
				output = input*404685.64224*33;
			}else if(to==2){		//Square Meter
				output = input*40.468564224*33;
			}else if(to==3){		//Hectare
				output = input*0.0040468564224*33;
			}else if(to==4){		//Square Kilometer
				output = input*0.000040468564224*33;
			}else if(to==5){		//Square Inch
				output = input*62726.40*33;
			}else if(to==6){		//Square Feet
				output = input*435.60*33;
			}else if(to==7){		//Square Yard
				output = input*48.40*33;
			}else if(to==8){		//Square Mile
				output = input*0.000015625*33;
			}else if(to==9){		//Katha
				output = input*0.6060606061*33;
			}else if(to==10){		//Bigha
				output = input;
			}else if(to==11){		//Satak
				output = input*33;
			}else if(to==12){		//Acre
				output = input/3.0303030303;
			}
		}
		else if(from==11){									//Satak
			if(to==1){				//Square Centimeter
				output = input*404685.64224;
			}else if(to==2){		//Square Meter
				output = input*40.468564224;
			}else if(to==3){		//Hectare
				output = input*0.0040468564224;
			}else if(to==4){		//Square Kilometer
				output = input*0.000040468564224;
			}else if(to==5){		//Square Inch
				output = input*62726.40;
			}else if(to==6){		//Square Feet
				output = input*435.60;
			}else if(to==7){		//Square Yard
				output = input*48.40;
			}else if(to==8){		//Square Mile
				output = input*0.000015625;
			}else if(to==9){		//Katha
				output = input*0.6060606061;
			}else if(to==10){		//Bigha
				output = input*0.030303030303;
			}else if(to==11){		//Satak
				output = input;
			}else if(to==12){		//Acre
				output = input/100;
			}
		}
		else if(from==12){									//Acre
			if(to==1){				//Square Centimeter
				output = input*40468564.224;
			}else if(to==2){		//Square Meter
				output = input*4046.8564224;
			}else if(to==3){		//Hectare
				output = input*0.40468564224;
			}else if(to==4){		//Square Kilometer
				output = input*0.0040468564224;
			}else if(to==5){		//Square Inch
				output = input*6272640;
			}else if(to==6){		//Square Feet
				output = input*43560;
			}else if(to==7){		//Square Yard
				output = input*4840;
			}else if(to==8){		//Square Mile
				output = input*0.0015625;
			}else if(to==9){		//Katha
				output = input*60.60606061;
			}else if(to==10){		//Bigha
				output = input*3.0303030303;
			}else if(to==11){		//Satak
				output = input*100;
			}else if(to==12){		//Acre
				output = input;
			}
		}
		return output;
	}	

------------------------------------------------------------------------
 Area  Square  Centimeter  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Square  Meter  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Hectare  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Square  Kilometer  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Square  Inch  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Square  Feet  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Square  Yard  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Square  Mile  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Katha  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Bigha  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Satak  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre  Acre  Square  Centimeter  Square  Meter  Hectare  Square  Kilometer  Square  Inch  Square  Feet  Square  Yard  Square  Mile  Katha  Bigha  Satak  Acre   
	   Area 											
	  Area											
	  output 0 0 from 1 to 1 output input to 2 output input 0 0001 to 3 output input 0 00000001 to 4 output input 0 0000000001 to 5 output input 0 15500031000062 to 6 output input 0 001076391041671 to 7 output input 0 001076391041671 9 to 8 output input 0 001076391041671 27878400 to 9 output input 0 001076391041671 718 7400071874 to 10 output input 0 001076391041671 14374 800143748 to 11 output input 0 001076391041671 435 60 to 12 output input 0 001076391041671 43560 from 2 to 1 output input 10000 to 2 output input to 3 output input 0 0001 to 4 output input 0 000001 to 5 output input 1550 0031000062 to 6 output input 10 76391041671 to 7 output input 10 76391041671 9 to 8 output input 10 76391041671 27878400 to 9 output input 66 9 to 10 output input 1338 to 11 output input 10 76391041671 435 60 to 12 output input 10 76391041671 43560 from 3 to 1 output input 100000000 to 2 output input 10000 to 3 output input to 4 output input 0 01 to 5 output input 15500031 000062 to 6 output input 107639 1041671 to 7 output input 107639 1041671 9 to 8 output input 107639 1041671 27878400 to 9 output input 107639 1041671 718 7400071874 to 10 output input 107639 1041671 14374 800143748 to 11 output input 247 1053814671653 to 12 output input 2 471053814671653 from 4 to 1 output input 100000000 100 to 2 output input 1000000 to 3 output input 100 to 4 output input to 5 output input 1550003100 0062 to 6 output input 10763910 41671 to 7 output input 10763910 41671 9 to 8 output input 10763910 41671 27878400 to 9 output input 10763910 41671 718 7400071874 to 10 output input 10763910 41671 14374 800143748 to 11 output input 10763910 41671 435 60 to 12 output input 10763910 41671 43560 from 5 to 1 output input 6 4516 to 2 output input 0 00064516 to 3 output input 0 000000064516 to 4 output input 0 00000000064516 to 5 output input to 6 output input 144 to 7 output input 1296 to 8 output input 40144896 100 to 9 output input 103680 to 10 output input 2073600 to 11 output input 62726 40 to 12 output input 6272640 from 6 to 1 output input 929 0304 to 2 output input 0 09290304 to 3 output input 0 000009290304 to 4 output input 0 00000009290304 to 5 output input 144 to 6 output input to 7 output input 9 to 8 output input 27878400 to 9 output input 718 7400071874001 to 10 output input 14374 80000143748 to 11 output input 435 60 to 12 output input 43560 from 7 to 1 output input 8361 2736 to 2 output input 0 83612736 to 3 output input 0 000083612736 to 4 output input 0 00000083612736 to 5 output input 1296 to 6 output input 9 to 7 output input to 8 output input 3097600 to 9 output input 79 860000007986 to 10 output input 1597 20000015972 to 11 output input 48 40 to 12 output input 4840 from 8 to 1 output input 25899881103 36 to 2 output input 2589988 110336 to 3 output input 258 9988110336 to 4 output input 2 589988110336 to 5 output input 40144896 100 to 6 output input 27878400 to 7 output input 3097600 to 8 output input to 9 output input 38787 8784 to 10 output input 1939 39392 to 11 output input 64000 to 12 output input 640 from 9 to 1 output input 404685 64224 1 65 to 2 output input 40 468564224 1 65 to 3 output input 0 0040468564224 1 65 to 4 output input 0 000040468564224 1 65 to 5 output input 62726 40 1 65 to 6 output input 435 60 1 65 to 7 output input 48 40 1 65 to 8 output input 0 000015625 1 65 to 9 output input to 10 output input 20 to 11 output input 1 65 to 12 output input 60 6060606061 from 10 to 1 output input 404685 64224 33 to 2 output input 40 468564224 33 to 3 output input 0 0040468564224 33 to 4 output input 0 000040468564224 33 to 5 output input 62726 40 33 to 6 output input 435 60 33 to 7 output input 48 40 33 to 8 output input 0 000015625 33 to 9 output input 0 6060606061 33 to 10 output input to 11 output input 33 to 12 output input 3 0303030303 from 11 to 1 output input 404685 64224 to 2 output input 40 468564224 to 3 output input 0 0040468564224 to 4 output input 0 000040468564224 to 5 output input 62726 40 to 6 output input 435 60 to 7 output input 48 40 to 8 output input 0 000015625 to 9 output input 0 6060606061 to 10 output input 0 030303030303 to 11 output input to 12 output input 100 from 12 to 1 output input 40468564 224 to 2 output input 4046 8564224 to 3 output input 0 40468564224 to 4 output input 0 0040468564224 to 5 output input 6272640 to 6 output input 43560 to 7 output input 4840 to 8 output input 0 0015625 to 9 output input 60 60606061 to 10 output input 3 0303030303 to 11 output input 100 to 12 output input output 
------------------------------------------------------------------------
[area, square, centimeter, meter, hectare, kilometer, inch, feet, yard, mile, katha, bigha, satak, acre, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationArea.java,UnitConverterOperationArea
6 , 338
------------------------------------------------------------------------
public class UnitConverterOperationArea {
	/**
	 * Area											
	**/
	public double Area(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Square Centimeter
			if(to==1){				//Square Centimeter
				output = input;
			}else if(to==2){		//Square Meter
				output = input*0.0001;
			}else if(to==3){		//Hectare
				output = input*0.00000001;
			}else if(to==4){		//Square Kilometer
				output = input*0.0000000001;
			}else if(to==5){		//Square Inch
				output = input*0.15500031000062;
			}else if(to==6){		//Square Feet
				output = input*0.001076391041671;
			}else if(to==7){		//Square Yard
				output = (input*0.001076391041671)/9;
			}else if(to==8){		//Square Mile
				output = (input*0.001076391041671)/27878400;
			}else if(to==9){		//Katha
				output = (input*0.001076391041671)/718.7400071874;
			}else if(to==10){		//Bigha
				output = (input*0.001076391041671)/14374.800143748;
			}else if(to==11){		//Satak
				output = (input*0.001076391041671)/435.60;
			}else if(to==12){		//Acre
				output = (input*0.001076391041671)/43560;
			}
		}
		else if(from==2){									//Square Meter
			if(to==1){				//Square Centimeter
				output = input*10000;
			}else if(to==2){		//Square Meter
				output = input;
			}else if(to==3){		//Hectare
				output = input*0.0001;
			}else if(to==4){		//Square Kilometer
				output = input*0.000001;
			}else if(to==5){		//Square Inch
				output = input*1550.0031000062;
			}else if(to==6){		//Square Feet
				output = input*10.76391041671;
			}else if(to==7){		//Square Yard
				output = (input*10.76391041671)/9;
			}else if(to==8){		//Square Mile
				output = (input*10.76391041671)/27878400;
			}else if(to==9){		//Katha
				output = input/66.9;
			}else if(to==10){		//Bigha
				output = input/1338;
			}else if(to==11){		//Satak
				output = (input*10.76391041671)/435.60;
			}else if(to==12){		//Acre
				output = (input*10.76391041671)/43560;
			}
		}
		else if(from==3){									//Hectare
			if(to==1){				//Square Centimeter
				output = input*100000000;
			}else if(to==2){		//Square Meter
				output = input*10000;
			}else if(to==3){		//Hectare
				output = input;
			}else if(to==4){		//Square Kilometer
				output = input*0.01;
			}else if(to==5){		//Square Inch
				output = input*15500031.000062;
			}else if(to==6){		//Square Feet
				output = input*107639.1041671;
			}else if(to==7){		//Square Yard
				output = (input*107639.1041671)/9;
			}else if(to==8){		//Square Mile
				output = (input*107639.1041671)/27878400;
			}else if(to==9){		//Katha
				output = (input*107639.1041671)/718.7400071874;
			}else if(to==10){		//Bigha
				output = (input*107639.1041671)/14374.800143748;
			}else if(to==11){		//Satak
				output = input*247.1053814671653;
			}else if(to==12){		//Acre
				output = input*2.471053814671653;
			}
		}
		else if(from==4){									//Square Kilometer
			if(to==1){				//Square Centimeter
				output = input*100000000*100;
			}else if(to==2){		//Square Meter
				output = input*1000000;
			}else if(to==3){		//Hectare
				output = input*100;
			}else if(to==4){		//Square Kilometer
				output = input;
			}else if(to==5){		//Square Inch
				output = input*1550003100.0062;
			}else if(to==6){		//Square Feet
				output = input*10763910.41671;
			}else if(to==7){		//Square Yard
				output = (input*10763910.41671)/9;
			}else if(to==8){		//Square Mile
				output = (input*10763910.41671)/27878400;
			}else if(to==9){		//Katha
				output = (input*10763910.41671)/718.7400071874;
			}else if(to==10){		//Bigha
				output = (input*10763910.41671)/14374.800143748;
			}else if(to==11){		//Satak
				output = (input*10763910.41671)/435.60;
			}else if(to==12){		//Acre
				output = (input*10763910.41671)/43560;
			}
		}
		else if(from==5){									//Square Inch
			if(to==1){				//Square Centimeter
				output = input*6.4516;
			}else if(to==2){		//Square Meter
				output = input*0.00064516;
			}else if(to==3){		//Hectare
				output = input*0.000000064516;
			}else if(to==4){		//Square Kilometer
				output = input*0.00000000064516;
			}else if(to==5){		//Square Inch
				output = input;
			}else if(to==6){		//Square Feet
				output = input/144;
			}else if(to==7){		//Square Yard
				output = input/1296;
			}else if(to==8){		//Square Mile
				output = input/(40144896*100);
			}else if(to==9){		//Katha
				output = input/103680;
			}else if(to==10){		//Bigha
				output = input/2073600;
			}else if(to==11){		//Satak
				output = input/62726.40;
			}else if(to==12){		//Acre
				output = input/6272640;
			}
		}
		else if(from==6){									//Square Feet
			if(to==1){				//Square Centimeter
				output = input*929.0304;
			}else if(to==2){		//Square Meter
				output = input*0.09290304;
			}else if(to==3){		//Hectare
				output = input*0.000009290304;
			}else if(to==4){		//Square Kilometer
				output = input*0.00000009290304;
			}else if(to==5){		//Square Inch
				output = input*144;
			}else if(to==6){		//Square Feet
				output = input;
			}else if(to==7){		//Square Yard
				output = input/9;
			}else if(to==8){		//Square Mile
				output = input/27878400;
			}else if(to==9){		//Katha
				output = input/718.7400071874001;
			}else if(to==10){		//Bigha
				output = input/14374.80000143748;
			}else if(to==11){		//Satak
				output = input/435.60;
			}else if(to==12){		//Acre
				output = input/43560;
			}
		}
		else if(from==7){									//Square Yard
			if(to==1){				//Square Centimeter
				output = input*8361.2736;
			}else if(to==2){		//Square Meter
				output = input*0.83612736;
			}else if(to==3){		//Hectare
				output = input*0.000083612736;
			}else if(to==4){		//Square Kilometer
				output = input*0.00000083612736;
			}else if(to==5){		//Square Inch
				output = input*1296;
			}else if(to==6){		//Square Feet
				output = input*9;
			}else if(to==7){		//Square Yard
				output = input;
			}else if(to==8){		//Square Mile
				output = input/3097600;
			}else if(to==9){		//Katha
				output = input/79.860000007986;
			}else if(to==10){		//Bigha
				output = input/1597.20000015972;
			}else if(to==11){		//Satak
				output = input/48.40;
			}else if(to==12){		//Acre
				output = input/4840;
			}
		}
		else if(from==8){									//Square Mile
			if(to==1){				//Square Centimeter
				output = input*25899881103.36;
			}else if(to==2){		//Square Meter
				output = input*2589988.110336;
			}else if(to==3){		//Hectare
				output = input*258.9988110336;
			}else if(to==4){		//Square Kilometer
				output = input*2.589988110336;
			}else if(to==5){		//Square Inch
				output = input*40144896*100;
			}else if(to==6){		//Square Feet
				output = input*27878400;
			}else if(to==7){		//Square Yard
				output = input*3097600;
			}else if(to==8){		//Square Mile
				output = input;
			}else if(to==9){		//Katha
				output = input*38787.8784;
			}else if(to==10){		//Bigha
				output = input*1939.39392;
			}else if(to==11){		//Satak
				output = input*64000;
			}else if(to==12){		//Acre
				output = input*640;
			}
		}
		else if(from==9){									//Katha
			if(to==1){				//Square Centimeter
				output = input*404685.64224*1.65;
			}else if(to==2){		//Square Meter
				output = input*40.468564224*1.65;
			}else if(to==3){		//Hectare
				output = input*0.0040468564224*1.65;
			}else if(to==4){		//Square Kilometer
				output = input*0.000040468564224*1.65;
			}else if(to==5){		//Square Inch
				output = input*62726.40*1.65;
			}else if(to==6){		//Square Feet
				output = input*435.60*1.65;
			}else if(to==7){		//Square Yard
				output = input*48.40*1.65;
			}else if(to==8){		//Square Mile
				output = input*0.000015625*1.65;
			}else if(to==9){		//Katha
				output = input;
			}else if(to==10){		//Bigha
				output = input/20;
			}else if(to==11){		//Satak
				output = input*1.65;
			}else if(to==12){		//Acre
				output = input/60.6060606061;
			}
		}
		else if(from==10){									//Bigha
			if(to==1){				//Square Centimeter
				output = input*404685.64224*33;
			}else if(to==2){		//Square Meter
				output = input*40.468564224*33;
			}else if(to==3){		//Hectare
				output = input*0.0040468564224*33;
			}else if(to==4){		//Square Kilometer
				output = input*0.000040468564224*33;
			}else if(to==5){		//Square Inch
				output = input*62726.40*33;
			}else if(to==6){		//Square Feet
				output = input*435.60*33;
			}else if(to==7){		//Square Yard
				output = input*48.40*33;
			}else if(to==8){		//Square Mile
				output = input*0.000015625*33;
			}else if(to==9){		//Katha
				output = input*0.6060606061*33;
			}else if(to==10){		//Bigha
				output = input;
			}else if(to==11){		//Satak
				output = input*33;
			}else if(to==12){		//Acre
				output = input/3.0303030303;
			}
		}
		else if(from==11){									//Satak
			if(to==1){				//Square Centimeter
				output = input*404685.64224;
			}else if(to==2){		//Square Meter
				output = input*40.468564224;
			}else if(to==3){		//Hectare
				output = input*0.0040468564224;
			}else if(to==4){		//Square Kilometer
				output = input*0.000040468564224;
			}else if(to==5){		//Square Inch
				output = input*62726.40;
			}else if(to==6){		//Square Feet
				output = input*435.60;
			}else if(to==7){		//Square Yard
				output = input*48.40;
			}else if(to==8){		//Square Mile
				output = input*0.000015625;
			}else if(to==9){		//Katha
				output = input*0.6060606061;
			}else if(to==10){		//Bigha
				output = input*0.030303030303;
			}else if(to==11){		//Satak
				output = input;
			}else if(to==12){		//Acre
				output = input/100;
			}
		}
		else if(from==12){									//Acre
			if(to==1){				//Square Centimeter
				output = input*40468564.224;
			}else if(to==2){		//Square Meter
				output = input*4046.8564224;
			}else if(to==3){		//Hectare
				output = input*0.40468564224;
			}else if(to==4){		//Square Kilometer
				output = input*0.0040468564224;
			}else if(to==5){		//Square Inch
				output = input*6272640;
			}else if(to==6){		//Square Feet
				output = input*43560;
			}else if(to==7){		//Square Yard
				output = input*4840;
			}else if(to==8){		//Square Mile
				output = input*0.0015625;
			}else if(to==9){		//Katha
				output = input*60.60606061;
			}else if(to==10){		//Bigha
				output = input*3.0303030303;
			}else if(to==11){		//Satak
				output = input*100;
			}else if(to==12){		//Acre
				output = input;
			}
		}
		return output;
	}	
}

------------------------------------------------------------------------
 Unit Converter Operation Area  UnitConverterOperationArea   
------------------------------------------------------------------------
[unit, converter, operation, area, unitconverteroperationarea]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationEnergy.java,Energy
7 , 103
------------------------------------------------------------------------
	/**
	 * Energy											
	**/
	public double Energy(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Joule
			if(to==1){				//Joule
				output = input;
			}else if(to==2){		//Kilojoule
				output = input/1000;
			}else if(to==3){		//Calorie
				output = input/4.1868;
			}else if(to==4){		//Kilocalorie
				output = input/4186.8;
			}else if(to==5){		//Electron-Volts
				output = input*6.241509479607718e+18;
			}else if(to==6){		//Foot-Pound
				output = input*0.7375621492772656;
			}
		}
		else if(from==2){									//Kilojoule
			if(to==1){				//Joule
				output = input*1000;
			}else if(to==2){		//Kilojoule
				output = input;
			}else if(to==3){		//Calorie
				output = input*238.8458966274959;
			}else if(to==4){		//Kilocalorie
				output = input*0.2388458966274959;
			}else if(to==5){		//Electron-Volts
				output = input*6.241509479607718e+21;
			}else if(to==6){		//Foot-Pound
				output = input*737.5621492772656;
			}
		}
		else if(from==3){									//Calorie
			if(to==1){				//Joule
				output = input*4.1868;
			}else if(to==2){		//Kilojoule
				output = input*0.0041868;
			}else if(to==3){		//Calorie
				output = input;
			}else if(to==4){		//Kilocalorie
				output = input*0.001;
			}else if(to==5){		//Electron-Volts
				output = input*2.61319518892216e+19;
			}else if(to==6){		//Foot-Pound
				output = input*3.088025206594056;
			}
		}
		else if(from==4){									//Kilocalorie
			if(to==1){				//Joule
				output = input*4186.8;
			}else if(to==2){		//Kilojoule
				output = input*4.1868;
			}else if(to==3){		//Calorie
				output = input*1000;
			}else if(to==4){		//Kilocalorie
				output = input;
			}else if(to==5){		//Electron-Volts
				output = input*2.61319518892216e+22;
			}else if(to==6){		//Foot-Pound
				output = input*3088.025206594056;
			}
		}
		else if(from==5){									//Electron-Volts
			if(to==1){				//Joule
				output = input*1.60217653e-19;
			}else if(to==2){		//Kilojoule
				output = input*1.60217653e-22;
			}else if(to==3){		//Calorie
				output = input*3.826732898633801e-20;
			}else if(to==4){		//Kilocalorie
				output = input*3.826732898633801e-23;
			}else if(to==5){		//Electron-Volts
				output = input;
			}else if(to==6){		//Foot-Pound
				output = input*1.181704764988391e-19;
			}
		}
		else if(from==6){									//Foot-Pound
			if(to==1){				//Joule
				output = input*1.3558179483314;
			}else if(to==2){		//Kilojoule
				output = input*0.0013558179483314;
			}else if(to==3){		//Calorie
				output = input*0.3238315535328652;
			}else if(to==4){		//Kilocalorie
				output = input*3.238315535328652e-4;
			}else if(to==5){		//Electron-Volts
				output = input*8.462350577132721e+18;
			}else if(to==6){		//Foot-Pound
				output = input;
			}
		}
		return output;
	}

------------------------------------------------------------------------
 Energy  Joule  Joule  Kilojoule  Calorie  Kilocalorie  Electron Volts  Foot Pound  Kilojoule  Joule  Kilojoule  Calorie  Kilocalorie  Electron Volts  Foot Pound  Calorie  Joule  Kilojoule  Calorie  Kilocalorie  Electron Volts  Foot Pound  Kilocalorie  Joule  Kilojoule  Calorie  Kilocalorie  Electron Volts  Foot Pound  Electron Volts  Joule  Kilojoule  Calorie  Kilocalorie  Electron Volts  Foot Pound  Foot Pound  Joule  Kilojoule  Calorie  Kilocalorie  Electron Volts  Foot Pound   
	   Energy 											
	  Energy											
	  output 0 0 from 1 to 1 output input to 2 output input 1000 to 3 output input 4 1868 to 4 output input 4186 8 to 5 output input 6 241509479607718e 18 to 6 output input 0 7375621492772656 from 2 to 1 output input 1000 to 2 output input to 3 output input 238 8458966274959 to 4 output input 0 2388458966274959 to 5 output input 6 241509479607718e 21 to 6 output input 737 5621492772656 from 3 to 1 output input 4 1868 to 2 output input 0 0041868 to 3 output input to 4 output input 0 001 to 5 output input 2 61319518892216e 19 to 6 output input 3 088025206594056 from 4 to 1 output input 4186 8 to 2 output input 4 1868 to 3 output input 1000 to 4 output input to 5 output input 2 61319518892216e 22 to 6 output input 3088 025206594056 from 5 to 1 output input 1 60217653e 19 to 2 output input 1 60217653e 22 to 3 output input 3 826732898633801e 20 to 4 output input 3 826732898633801e 23 to 5 output input to 6 output input 1 181704764988391e 19 from 6 to 1 output input 1 3558179483314 to 2 output input 0 0013558179483314 to 3 output input 0 3238315535328652 to 4 output input 3 238315535328652e 4 to 5 output input 8 462350577132721e 18 to 6 output input output 
------------------------------------------------------------------------
[energy, joule, kilojoule, calorie, kilocalorie, electron, volts, foot, pound, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationEnergy.java,UnitConverterOperationEnergy
6 , 104
------------------------------------------------------------------------
public class UnitConverterOperationEnergy {
	/**
	 * Energy											
	**/
	public double Energy(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Joule
			if(to==1){				//Joule
				output = input;
			}else if(to==2){		//Kilojoule
				output = input/1000;
			}else if(to==3){		//Calorie
				output = input/4.1868;
			}else if(to==4){		//Kilocalorie
				output = input/4186.8;
			}else if(to==5){		//Electron-Volts
				output = input*6.241509479607718e+18;
			}else if(to==6){		//Foot-Pound
				output = input*0.7375621492772656;
			}
		}
		else if(from==2){									//Kilojoule
			if(to==1){				//Joule
				output = input*1000;
			}else if(to==2){		//Kilojoule
				output = input;
			}else if(to==3){		//Calorie
				output = input*238.8458966274959;
			}else if(to==4){		//Kilocalorie
				output = input*0.2388458966274959;
			}else if(to==5){		//Electron-Volts
				output = input*6.241509479607718e+21;
			}else if(to==6){		//Foot-Pound
				output = input*737.5621492772656;
			}
		}
		else if(from==3){									//Calorie
			if(to==1){				//Joule
				output = input*4.1868;
			}else if(to==2){		//Kilojoule
				output = input*0.0041868;
			}else if(to==3){		//Calorie
				output = input;
			}else if(to==4){		//Kilocalorie
				output = input*0.001;
			}else if(to==5){		//Electron-Volts
				output = input*2.61319518892216e+19;
			}else if(to==6){		//Foot-Pound
				output = input*3.088025206594056;
			}
		}
		else if(from==4){									//Kilocalorie
			if(to==1){				//Joule
				output = input*4186.8;
			}else if(to==2){		//Kilojoule
				output = input*4.1868;
			}else if(to==3){		//Calorie
				output = input*1000;
			}else if(to==4){		//Kilocalorie
				output = input;
			}else if(to==5){		//Electron-Volts
				output = input*2.61319518892216e+22;
			}else if(to==6){		//Foot-Pound
				output = input*3088.025206594056;
			}
		}
		else if(from==5){									//Electron-Volts
			if(to==1){				//Joule
				output = input*1.60217653e-19;
			}else if(to==2){		//Kilojoule
				output = input*1.60217653e-22;
			}else if(to==3){		//Calorie
				output = input*3.826732898633801e-20;
			}else if(to==4){		//Kilocalorie
				output = input*3.826732898633801e-23;
			}else if(to==5){		//Electron-Volts
				output = input;
			}else if(to==6){		//Foot-Pound
				output = input*1.181704764988391e-19;
			}
		}
		else if(from==6){									//Foot-Pound
			if(to==1){				//Joule
				output = input*1.3558179483314;
			}else if(to==2){		//Kilojoule
				output = input*0.0013558179483314;
			}else if(to==3){		//Calorie
				output = input*0.3238315535328652;
			}else if(to==4){		//Kilocalorie
				output = input*3.238315535328652e-4;
			}else if(to==5){		//Electron-Volts
				output = input*8.462350577132721e+18;
			}else if(to==6){		//Foot-Pound
				output = input;
			}
		}
		return output;
	}
}

------------------------------------------------------------------------
 Unit Converter Operation Energy  UnitConverterOperationEnergy   
------------------------------------------------------------------------
[unit, converter, operation, energy, unitconverteroperationenergy]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationLength.java,Length
7 , 390
------------------------------------------------------------------------
	/**
	 * Length											
	**/
	public double Length(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Angstrom
			if(to==1){				//Angstrom
				output = input;
			}else if(to==2){		//Nanometer
				output = input*0.1;
			}else if(to==3){		//Micron
				output = input*0.0001;
			}else if(to==4){		//Millimeter
				output = input*0.0000001;
			}else if(to==5){		//Centimeter
				output = input*0.00000001;
			}else if(to==6){		//Meter
				output = input*0.0000000001;
			}else if(to==7){		//Kilometer
				output = input*0.0000000000001;
			}else if(to==8){		//Inch
				output = input*0.00000001*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.00000001*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.00000001*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.0000000000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0000000000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.00000001*0.0019883878151595;
			}
		}
		else if(from==2){							//Nanometer
			if(to==1){				//Angstrom
				output = input*10;
			}else if(to==2){		//Nanometer
				output = input;
			}else if(to==3){		//Micron
				output = input*0.0001;
			}else if(to==4){		//Millimeter
				output = input*0.000001;
			}else if(to==5){		//Centimeter
				output = input*0.0000001;
			}else if(to==6){		//Meter
				output = input*0.000000001;
			}else if(to==7){		//Kilometer
				output = input*0.000000000001;
			}else if(to==8){		//Inch
				output = input*0.0000001*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.0000001*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.0000001*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.000000000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.000000000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0000001*0.0019883878151595;
			}
		}
		else if(from==3){							//Micron
			if(to==1){				//Angstrom
				output = input*10000;
			}else if(to==2){		//Nanometer
				output = input*1000;
			}else if(to==3){		//Micron
				output = input;
			}else if(to==4){		//Millimeter
				output = input*0.001;
			}else if(to==5){		//Centimeter
				output = input*0.0001;
			}else if(to==6){		//Meter
				output = input*0.000001;
			}else if(to==7){		//Kilometer
				output = input*0.000000001;
			}else if(to==8){		//Inch
				output = input*0.0001*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.0001*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.0001*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.000000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.000000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0001*0.0019883878151595;
			}
		}
		else if(from==4){							//Millimeter
			if(to==1){				//Angstrom
				output = input*10000000;
			}else if(to==2){		//Nanometer
				output = input*1000000;
			}else if(to==3){		//Micron
				output = input*1000;
			}else if(to==4){		//Millimeter
				output = input;
			}else if(to==5){		//Centimeter
				output = input*0.1;
			}else if(to==6){		//Meter
				output = input*0.001;
			}else if(to==7){		//Kilometer
				output = input*0.000001;
			}else if(to==8){		//Inch
				output = input*0.1*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.1*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.1*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.1*0.0019883878151595;
			}
		}
		else if(from==5){							//Centimeter
			if(to==1){				//Angstrom
				output = input*100000000;
			}else if(to==2){		//Nanometer
				output = input*10000000;
			}else if(to==3){		//Micron
				output = input*10000;
			}else if(to==4){		//Millimeter
				output = input*10;
			}else if(to==5){		//Centimeter
				output = input;
			}else if(to==6){		//Meter
				output = input*0.01;
			}else if(to==7){		//Kilometer
				output = input*0.00001;
			}else if(to==8){		//Inch
				output = input*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.00001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.00001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0019883878151595;
			}
		}
		else if(from==6){							//Meter
			if(to==1){				//Angstrom
				output = input*100000000*100;
			}else if(to==2){		//Nanometer
				output = input*1000000000;
			}else if(to==3){		//Micron
				output = input*1000000;
			}else if(to==4){		//Millimeter
				output = input*1000;
			}else if(to==5){		//Centimeter
				output = input*100;
			}else if(to==6){		//Meter
				output = input;
			}else if(to==7){		//Kilometer
				output = input*0.001;
			}else if(to==8){		//Inch
				output = input*39.37007874015748;
			}else if(to==9){		//Feet
				output = input*3.28083989501312;
			}else if(to==10){		//Yard
				output = input*1.09361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.19883878151595;
			}
		}
		else if(from==7){							//Kilometer
			if(to==1){				//Angstrom
				output = input*100000000*100000;
			}else if(to==2){		//Nanometer
				output = input*100000000*10000;
			}else if(to==3){		//Micron
				output = input*1000000000;
			}else if(to==4){		//Millimeter
				output = input*1000000;
			}else if(to==5){		//Centimeter
				output = input*100000;
			}else if(to==6){		//Meter
				output = input*1000;
			}else if(to==7){		//Kilometer
				output = input;
			}else if(to==8){		//Inch
				output = input*39370.07874015748;
			}else if(to==9){		//Feet
				output = input*3280.83989501312;
			}else if(to==10){		//Yard
				output = input*1093.61329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*198.83878151595;
			}
		}
		else if(from==8){							//Inch
			if(to==1){				//Angstrom
				output = input*254000000;
			}else if(to==2){		//Nanometer
				output = input*25400000;
			}else if(to==3){		//Micron
				output = input*25400;
			}else if(to==4){		//Millimeter
				output = input*25.4;
			}else if(to==5){		//Centimeter
				output = input*2.54;
			}else if(to==6){		//Meter
				output = input*0.0254;
			}else if(to==7){		//Kilometer
				output = input*0.0000254;
			}else if(to==8){		//Inch
				output = input;
			}else if(to==9){		//Feet
				output = input*0.0833333333333333;
			}else if(to==10){		//Yard
				output = input*0.0277777777777778;
			}else if(to==11){		//Nautical Mile
				output = input*0.0000254*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0000254*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0050505050505051;
			}
		}
		else if(from==9){							//Feet
			if(to==1){				//Angstrom
				output = input*30480000*100;
			}else if(to==2){		//Nanometer
				output = input*304800000;
			}else if(to==3){		//Micron
				output = input*304800;
			}else if(to==4){		//Millimeter
				output = input*304.8;
			}else if(to==5){		//Centimeter
				output = input*30.48;
			}else if(to==6){		//Meter
				output = input*0.3048;
			}else if(to==7){		//Kilometer
				output = input*0.0003048;
			}else if(to==8){		//Inch
				output = input*12;
			}else if(to==9){		//Feet
				output = input;
			}else if(to==10){		//Yard
				output = input*0.3333333333333333;
			}else if(to==11){		//Nautical Mile
				output = input*0.0003048*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0003048*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0606060606060606;
			}
		}
		else if(from==10){							//Yard
			if(to==1){				//Angstrom
				output = input*30480000*300;
			}else if(to==2){		//Nanometer
				output = input*304800000*3;
			}else if(to==3){		//Micron
				output = input*304800*3;
			}else if(to==4){		//Millimeter
				output = input*304.8*3;
			}else if(to==5){		//Centimeter
				output = input*30.48*3;
			}else if(to==6){		//Meter
				output = input*0.3048*3;
			}else if(to==7){		//Kilometer
				output = input*0.0009144;
			}else if(to==8){		//Inch
				output = input*36;
			}else if(to==9){		//Feet
				output = input*3;
			}else if(to==10){		//Yard
				output = input;
			}else if(to==11){		//Nautical Mile
				output = input*0.0009144*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0009144*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.1818181818181818;
			}
		}
		else if(from==11){							//Nautical Mile
			if(to==1){				//Angstrom
				output = input*18520*1000000000;
			}else if(to==2){		//Nanometer
				output = input*1852*1000000000;
			}else if(to==3){		//Micron
				output = input*1852*1000000;
			}else if(to==4){		//Millimeter
				output = input*1852000;
			}else if(to==5){		//Centimeter
				output = input*185200;
			}else if(to==6){		//Meter
				output = input*1852;
			}else if(to==7){		//Kilometer
				output = input*1.852;
			}else if(to==8){		//Inch
				output = input*72913.38582677165;
			}else if(to==9){		//Feet
				output = input*6076.115485564304;
			}else if(to==10){		//Yard
				output = input*2025.371828521435;
			}else if(to==11){		//Nautical Mile
				output = input;
			}else if(to==12){		//Mile
				output = input*1.150779448023543;
			}else if(to==13){		//Rod
				output = input*368.2494233675336;
			}
		}
		else if(from==12){							//Mile
			if(to==1){				//Angstrom
				output = input*1609344*10000000;
			}else if(to==2){		//Nanometer
				output = input*1609344*1000000;
			}else if(to==3){		//Micron
				output = input*1609344*1000;
			}else if(to==4){		//Millimeter
				output = input*1609344;
			}else if(to==5){		//Centimeter
				output = input*160934.4;
			}else if(to==6){		//Meter
				output = input*1609.344;
			}else if(to==7){		//Kilometer
				output = input*1.609344;
			}else if(to==8){		//Inch
				output = input*63360;
			}else if(to==9){		//Feet
				output = input*5280;
			}else if(to==10){		//Yard
				output = input*1760;
			}else if(to==11){		//Nautical Mile
				output = input*0.8689762419006479;
			}else if(to==12){		//Mile
				output = input;
			}else if(to==13){		//Rod
				output = input*320;
			}
		}
		else if(from==13){							//Rod
			if(to==1){				//Angstrom
				output = input*50292000*1000;
			}else if(to==2){		//Nanometer
				output = input*50292000*100;
			}else if(to==3){		//Micron
				output = input*5029200;
			}else if(to==4){		//Millimeter
				output = input*5029.2;
			}else if(to==5){		//Centimeter
				output = input*502.92;
			}else if(to==6){		//Meter
				output = input*5.0292;
			}else if(to==7){		//Kilometer
				output = input*0.0050292;
			}else if(to==8){		//Inch
				output = input*198;
			}else if(to==9){		//Feet
				output = input*16.5;
			}else if(to==10){		//Yard
				output = input*5.5;
			}else if(to==11){		//Nautical Mile
				output = input*0.0027155507559395;
			}else if(to==12){		//Mile
				output = input*0.003125;
			}else if(to==13){		//Rod
				output = input;
			}
		}
		return output;
	}	

------------------------------------------------------------------------
 Length  Angstrom  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Nanometer  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Micron  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Millimeter  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Centimeter  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Meter  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Kilometer  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Inch  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Feet  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Yard  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Nautical  Mile  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Mile  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod  Rod  Angstrom  Nanometer  Micron  Millimeter  Centimeter  Meter  Kilometer  Inch  Feet  Yard  Nautical  Mile  Mile  Rod   
	   Length 											
	  Length											
	  output 0 0 from 1 to 1 output input to 2 output input 0 1 to 3 output input 0 0001 to 4 output input 0 0000001 to 5 output input 0 00000001 to 6 output input 0 0000000001 to 7 output input 0 0000000000001 to 8 output input 0 00000001 0 3937007874015748 to 9 output input 0 00000001 0 0328083989501312 to 10 output input 0 00000001 0 0109361329833771 to 11 output input 0 0000000000001 0 5399568034557235 to 12 output input 0 0000000000001 0 621371192237334 to 13 output input 0 00000001 0 0019883878151595 from 2 to 1 output input 10 to 2 output input to 3 output input 0 0001 to 4 output input 0 000001 to 5 output input 0 0000001 to 6 output input 0 000000001 to 7 output input 0 000000000001 to 8 output input 0 0000001 0 3937007874015748 to 9 output input 0 0000001 0 0328083989501312 to 10 output input 0 0000001 0 0109361329833771 to 11 output input 0 000000000001 0 5399568034557235 to 12 output input 0 000000000001 0 621371192237334 to 13 output input 0 0000001 0 0019883878151595 from 3 to 1 output input 10000 to 2 output input 1000 to 3 output input to 4 output input 0 001 to 5 output input 0 0001 to 6 output input 0 000001 to 7 output input 0 000000001 to 8 output input 0 0001 0 3937007874015748 to 9 output input 0 0001 0 0328083989501312 to 10 output input 0 0001 0 0109361329833771 to 11 output input 0 000000001 0 5399568034557235 to 12 output input 0 000000001 0 621371192237334 to 13 output input 0 0001 0 0019883878151595 from 4 to 1 output input 10000000 to 2 output input 1000000 to 3 output input 1000 to 4 output input to 5 output input 0 1 to 6 output input 0 001 to 7 output input 0 000001 to 8 output input 0 1 0 3937007874015748 to 9 output input 0 1 0 0328083989501312 to 10 output input 0 1 0 0109361329833771 to 11 output input 0 000001 0 5399568034557235 to 12 output input 0 000001 0 621371192237334 to 13 output input 0 1 0 0019883878151595 from 5 to 1 output input 100000000 to 2 output input 10000000 to 3 output input 10000 to 4 output input 10 to 5 output input to 6 output input 0 01 to 7 output input 0 00001 to 8 output input 0 3937007874015748 to 9 output input 0 0328083989501312 to 10 output input 0 0109361329833771 to 11 output input 0 00001 0 5399568034557235 to 12 output input 0 00001 0 621371192237334 to 13 output input 0 0019883878151595 from 6 to 1 output input 100000000 100 to 2 output input 1000000000 to 3 output input 1000000 to 4 output input 1000 to 5 output input 100 to 6 output input to 7 output input 0 001 to 8 output input 39 37007874015748 to 9 output input 3 28083989501312 to 10 output input 1 09361329833771 to 11 output input 0 001 0 5399568034557235 to 12 output input 0 001 0 621371192237334 to 13 output input 0 19883878151595 from 7 to 1 output input 100000000 100000 to 2 output input 100000000 10000 to 3 output input 1000000000 to 4 output input 1000000 to 5 output input 100000 to 6 output input 1000 to 7 output input to 8 output input 39370 07874015748 to 9 output input 3280 83989501312 to 10 output input 1093 61329833771 to 11 output input 0 5399568034557235 to 12 output input 0 621371192237334 to 13 output input 198 83878151595 from 8 to 1 output input 254000000 to 2 output input 25400000 to 3 output input 25400 to 4 output input 25 4 to 5 output input 2 54 to 6 output input 0 0254 to 7 output input 0 0000254 to 8 output input to 9 output input 0 0833333333333333 to 10 output input 0 0277777777777778 to 11 output input 0 0000254 0 5399568034557235 to 12 output input 0 0000254 0 621371192237334 to 13 output input 0 0050505050505051 from 9 to 1 output input 30480000 100 to 2 output input 304800000 to 3 output input 304800 to 4 output input 304 8 to 5 output input 30 48 to 6 output input 0 3048 to 7 output input 0 0003048 to 8 output input 12 to 9 output input to 10 output input 0 3333333333333333 to 11 output input 0 0003048 0 5399568034557235 to 12 output input 0 0003048 0 621371192237334 to 13 output input 0 0606060606060606 from 10 to 1 output input 30480000 300 to 2 output input 304800000 3 to 3 output input 304800 3 to 4 output input 304 8 3 to 5 output input 30 48 3 to 6 output input 0 3048 3 to 7 output input 0 0009144 to 8 output input 36 to 9 output input 3 to 10 output input to 11 output input 0 0009144 0 5399568034557235 to 12 output input 0 0009144 0 621371192237334 to 13 output input 0 1818181818181818 from 11 to 1 output input 18520 1000000000 to 2 output input 1852 1000000000 to 3 output input 1852 1000000 to 4 output input 1852000 to 5 output input 185200 to 6 output input 1852 to 7 output input 1 852 to 8 output input 72913 38582677165 to 9 output input 6076 115485564304 to 10 output input 2025 371828521435 to 11 output input to 12 output input 1 150779448023543 to 13 output input 368 2494233675336 from 12 to 1 output input 1609344 10000000 to 2 output input 1609344 1000000 to 3 output input 1609344 1000 to 4 output input 1609344 to 5 output input 160934 4 to 6 output input 1609 344 to 7 output input 1 609344 to 8 output input 63360 to 9 output input 5280 to 10 output input 1760 to 11 output input 0 8689762419006479 to 12 output input to 13 output input 320 from 13 to 1 output input 50292000 1000 to 2 output input 50292000 100 to 3 output input 5029200 to 4 output input 5029 2 to 5 output input 502 92 to 6 output input 5 0292 to 7 output input 0 0050292 to 8 output input 198 to 9 output input 16 5 to 10 output input 5 5 to 11 output input 0 0027155507559395 to 12 output input 0 003125 to 13 output input output 
------------------------------------------------------------------------
[length, angstrom, nanometer, micron, millimeter, centimeter, meter, kilometer, inch, feet, yard, nautical, mile, rod, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationLength.java,UnitConverterOperationLength
6 , 391
------------------------------------------------------------------------
public class UnitConverterOperationLength {
	/**
	 * Length											
	**/
	public double Length(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Angstrom
			if(to==1){				//Angstrom
				output = input;
			}else if(to==2){		//Nanometer
				output = input*0.1;
			}else if(to==3){		//Micron
				output = input*0.0001;
			}else if(to==4){		//Millimeter
				output = input*0.0000001;
			}else if(to==5){		//Centimeter
				output = input*0.00000001;
			}else if(to==6){		//Meter
				output = input*0.0000000001;
			}else if(to==7){		//Kilometer
				output = input*0.0000000000001;
			}else if(to==8){		//Inch
				output = input*0.00000001*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.00000001*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.00000001*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.0000000000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0000000000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.00000001*0.0019883878151595;
			}
		}
		else if(from==2){							//Nanometer
			if(to==1){				//Angstrom
				output = input*10;
			}else if(to==2){		//Nanometer
				output = input;
			}else if(to==3){		//Micron
				output = input*0.0001;
			}else if(to==4){		//Millimeter
				output = input*0.000001;
			}else if(to==5){		//Centimeter
				output = input*0.0000001;
			}else if(to==6){		//Meter
				output = input*0.000000001;
			}else if(to==7){		//Kilometer
				output = input*0.000000000001;
			}else if(to==8){		//Inch
				output = input*0.0000001*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.0000001*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.0000001*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.000000000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.000000000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0000001*0.0019883878151595;
			}
		}
		else if(from==3){							//Micron
			if(to==1){				//Angstrom
				output = input*10000;
			}else if(to==2){		//Nanometer
				output = input*1000;
			}else if(to==3){		//Micron
				output = input;
			}else if(to==4){		//Millimeter
				output = input*0.001;
			}else if(to==5){		//Centimeter
				output = input*0.0001;
			}else if(to==6){		//Meter
				output = input*0.000001;
			}else if(to==7){		//Kilometer
				output = input*0.000000001;
			}else if(to==8){		//Inch
				output = input*0.0001*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.0001*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.0001*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.000000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.000000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0001*0.0019883878151595;
			}
		}
		else if(from==4){							//Millimeter
			if(to==1){				//Angstrom
				output = input*10000000;
			}else if(to==2){		//Nanometer
				output = input*1000000;
			}else if(to==3){		//Micron
				output = input*1000;
			}else if(to==4){		//Millimeter
				output = input;
			}else if(to==5){		//Centimeter
				output = input*0.1;
			}else if(to==6){		//Meter
				output = input*0.001;
			}else if(to==7){		//Kilometer
				output = input*0.000001;
			}else if(to==8){		//Inch
				output = input*0.1*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.1*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.1*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.000001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.000001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.1*0.0019883878151595;
			}
		}
		else if(from==5){							//Centimeter
			if(to==1){				//Angstrom
				output = input*100000000;
			}else if(to==2){		//Nanometer
				output = input*10000000;
			}else if(to==3){		//Micron
				output = input*10000;
			}else if(to==4){		//Millimeter
				output = input*10;
			}else if(to==5){		//Centimeter
				output = input;
			}else if(to==6){		//Meter
				output = input*0.01;
			}else if(to==7){		//Kilometer
				output = input*0.00001;
			}else if(to==8){		//Inch
				output = input*0.3937007874015748;
			}else if(to==9){		//Feet
				output = input*0.0328083989501312;
			}else if(to==10){		//Yard
				output = input*0.0109361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.00001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.00001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0019883878151595;
			}
		}
		else if(from==6){							//Meter
			if(to==1){				//Angstrom
				output = input*100000000*100;
			}else if(to==2){		//Nanometer
				output = input*1000000000;
			}else if(to==3){		//Micron
				output = input*1000000;
			}else if(to==4){		//Millimeter
				output = input*1000;
			}else if(to==5){		//Centimeter
				output = input*100;
			}else if(to==6){		//Meter
				output = input;
			}else if(to==7){		//Kilometer
				output = input*0.001;
			}else if(to==8){		//Inch
				output = input*39.37007874015748;
			}else if(to==9){		//Feet
				output = input*3.28083989501312;
			}else if(to==10){		//Yard
				output = input*1.09361329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.001*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.001*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.19883878151595;
			}
		}
		else if(from==7){							//Kilometer
			if(to==1){				//Angstrom
				output = input*100000000*100000;
			}else if(to==2){		//Nanometer
				output = input*100000000*10000;
			}else if(to==3){		//Micron
				output = input*1000000000;
			}else if(to==4){		//Millimeter
				output = input*1000000;
			}else if(to==5){		//Centimeter
				output = input*100000;
			}else if(to==6){		//Meter
				output = input*1000;
			}else if(to==7){		//Kilometer
				output = input;
			}else if(to==8){		//Inch
				output = input*39370.07874015748;
			}else if(to==9){		//Feet
				output = input*3280.83989501312;
			}else if(to==10){		//Yard
				output = input*1093.61329833771;
			}else if(to==11){		//Nautical Mile
				output = input*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*198.83878151595;
			}
		}
		else if(from==8){							//Inch
			if(to==1){				//Angstrom
				output = input*254000000;
			}else if(to==2){		//Nanometer
				output = input*25400000;
			}else if(to==3){		//Micron
				output = input*25400;
			}else if(to==4){		//Millimeter
				output = input*25.4;
			}else if(to==5){		//Centimeter
				output = input*2.54;
			}else if(to==6){		//Meter
				output = input*0.0254;
			}else if(to==7){		//Kilometer
				output = input*0.0000254;
			}else if(to==8){		//Inch
				output = input;
			}else if(to==9){		//Feet
				output = input*0.0833333333333333;
			}else if(to==10){		//Yard
				output = input*0.0277777777777778;
			}else if(to==11){		//Nautical Mile
				output = input*0.0000254*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0000254*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0050505050505051;
			}
		}
		else if(from==9){							//Feet
			if(to==1){				//Angstrom
				output = input*30480000*100;
			}else if(to==2){		//Nanometer
				output = input*304800000;
			}else if(to==3){		//Micron
				output = input*304800;
			}else if(to==4){		//Millimeter
				output = input*304.8;
			}else if(to==5){		//Centimeter
				output = input*30.48;
			}else if(to==6){		//Meter
				output = input*0.3048;
			}else if(to==7){		//Kilometer
				output = input*0.0003048;
			}else if(to==8){		//Inch
				output = input*12;
			}else if(to==9){		//Feet
				output = input;
			}else if(to==10){		//Yard
				output = input*0.3333333333333333;
			}else if(to==11){		//Nautical Mile
				output = input*0.0003048*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0003048*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.0606060606060606;
			}
		}
		else if(from==10){							//Yard
			if(to==1){				//Angstrom
				output = input*30480000*300;
			}else if(to==2){		//Nanometer
				output = input*304800000*3;
			}else if(to==3){		//Micron
				output = input*304800*3;
			}else if(to==4){		//Millimeter
				output = input*304.8*3;
			}else if(to==5){		//Centimeter
				output = input*30.48*3;
			}else if(to==6){		//Meter
				output = input*0.3048*3;
			}else if(to==7){		//Kilometer
				output = input*0.0009144;
			}else if(to==8){		//Inch
				output = input*36;
			}else if(to==9){		//Feet
				output = input*3;
			}else if(to==10){		//Yard
				output = input;
			}else if(to==11){		//Nautical Mile
				output = input*0.0009144*0.5399568034557235;
			}else if(to==12){		//Mile
				output = input*0.0009144*0.621371192237334;
			}else if(to==13){		//Rod
				output = input*0.1818181818181818;
			}
		}
		else if(from==11){							//Nautical Mile
			if(to==1){				//Angstrom
				output = input*18520*1000000000;
			}else if(to==2){		//Nanometer
				output = input*1852*1000000000;
			}else if(to==3){		//Micron
				output = input*1852*1000000;
			}else if(to==4){		//Millimeter
				output = input*1852000;
			}else if(to==5){		//Centimeter
				output = input*185200;
			}else if(to==6){		//Meter
				output = input*1852;
			}else if(to==7){		//Kilometer
				output = input*1.852;
			}else if(to==8){		//Inch
				output = input*72913.38582677165;
			}else if(to==9){		//Feet
				output = input*6076.115485564304;
			}else if(to==10){		//Yard
				output = input*2025.371828521435;
			}else if(to==11){		//Nautical Mile
				output = input;
			}else if(to==12){		//Mile
				output = input*1.150779448023543;
			}else if(to==13){		//Rod
				output = input*368.2494233675336;
			}
		}
		else if(from==12){							//Mile
			if(to==1){				//Angstrom
				output = input*1609344*10000000;
			}else if(to==2){		//Nanometer
				output = input*1609344*1000000;
			}else if(to==3){		//Micron
				output = input*1609344*1000;
			}else if(to==4){		//Millimeter
				output = input*1609344;
			}else if(to==5){		//Centimeter
				output = input*160934.4;
			}else if(to==6){		//Meter
				output = input*1609.344;
			}else if(to==7){		//Kilometer
				output = input*1.609344;
			}else if(to==8){		//Inch
				output = input*63360;
			}else if(to==9){		//Feet
				output = input*5280;
			}else if(to==10){		//Yard
				output = input*1760;
			}else if(to==11){		//Nautical Mile
				output = input*0.8689762419006479;
			}else if(to==12){		//Mile
				output = input;
			}else if(to==13){		//Rod
				output = input*320;
			}
		}
		else if(from==13){							//Rod
			if(to==1){				//Angstrom
				output = input*50292000*1000;
			}else if(to==2){		//Nanometer
				output = input*50292000*100;
			}else if(to==3){		//Micron
				output = input*5029200;
			}else if(to==4){		//Millimeter
				output = input*5029.2;
			}else if(to==5){		//Centimeter
				output = input*502.92;
			}else if(to==6){		//Meter
				output = input*5.0292;
			}else if(to==7){		//Kilometer
				output = input*0.0050292;
			}else if(to==8){		//Inch
				output = input*198;
			}else if(to==9){		//Feet
				output = input*16.5;
			}else if(to==10){		//Yard
				output = input*5.5;
			}else if(to==11){		//Nautical Mile
				output = input*0.0027155507559395;
			}else if(to==12){		//Mile
				output = input*0.003125;
			}else if(to==13){		//Rod
				output = input;
			}
		}
		return output;
	}	
}

------------------------------------------------------------------------
 Unit Converter Operation Length  UnitConverterOperationLength   
------------------------------------------------------------------------
[unit, converter, operation, length, unitconverteroperationlength]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationPower.java,Power
7 , 40
------------------------------------------------------------------------
	/**
	 * Power											
	**/
	public double Power(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Watt
			if(to==1){				//Watt
				output = input;
			}else if(to==2){		//Kilowatt
				output = input*0.001;
			}else if(to==3){		//Horse Power
				output = input*0.001341022089595;
			}
		}
		else if(from==2){									//Kilowatt
			if(to==1){				//Watt
				output = input*1000;
			}else if(to==2){		//Kilowatt
				output = input;
			}else if(to==3){		//Horse Power
				output = input*1.341022089595028;
			}
		}
		else if(from==3){									//Horse Power
			if(to==1){				//Watt
				output = input*745.6998715822702;
			}else if(to==2){		//Kilowatt
				output = input*0.7456998715822702;
			}else if(to==3){		//Horse Power
				output = input;
			}
		}
		return output;
	}

------------------------------------------------------------------------
 Power  Watt  Watt  Kilowatt  Horse  Power  Kilowatt  Watt  Kilowatt  Horse  Power  Horse  Power  Watt  Kilowatt  Horse  Power   
	   Power 											
	  Power											
	  output 0 0 from 1 to 1 output input to 2 output input 0 001 to 3 output input 0 001341022089595 from 2 to 1 output input 1000 to 2 output input to 3 output input 1 341022089595028 from 3 to 1 output input 745 6998715822702 to 2 output input 0 7456998715822702 to 3 output input output 
------------------------------------------------------------------------
[power, watt, kilowatt, horse, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationPower.java,UnitConverterOperationPower
6 , 41
------------------------------------------------------------------------
public class UnitConverterOperationPower {
	/**
	 * Power											
	**/
	public double Power(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Watt
			if(to==1){				//Watt
				output = input;
			}else if(to==2){		//Kilowatt
				output = input*0.001;
			}else if(to==3){		//Horse Power
				output = input*0.001341022089595;
			}
		}
		else if(from==2){									//Kilowatt
			if(to==1){				//Watt
				output = input*1000;
			}else if(to==2){		//Kilowatt
				output = input;
			}else if(to==3){		//Horse Power
				output = input*1.341022089595028;
			}
		}
		else if(from==3){									//Horse Power
			if(to==1){				//Watt
				output = input*745.6998715822702;
			}else if(to==2){		//Kilowatt
				output = input*0.7456998715822702;
			}else if(to==3){		//Horse Power
				output = input;
			}
		}
		return output;
	}
}

------------------------------------------------------------------------
 Unit Converter Operation Power  UnitConverterOperationPower   
------------------------------------------------------------------------
[unit, converter, operation, power, unitconverteroperationpower]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationTemperature.java,Temperature
7 , 40
------------------------------------------------------------------------
	/**
	 * Temperature											
	**/
	public double Temperature(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Celsius
			if(to==1){				//Celsius
				output = input;
			}else if(to==2){		//Fahrenheit
				output = ((input/5)*9)+32;
			}else if(to==3){		//Kelvin
				output = input+273.15;
			}
		}
		else if(from==2){									//Fahrenheit
			if(to==1){				//Celsius
				output = ((input-32)/9)*5;
			}else if(to==2){		//Fahrenheit
				output = input;
			}else if(to==3){		//Kelvin
				output = (((input-32)/9)*5)-273.16;
			}
		}
		else if(from==3){									//Kelvin
			if(to==1){				//Celsius
				output = input-273.16;
			}else if(to==2){		//Fahrenheit
				output = (((input-273.16)/5)*9)+32;
			}else if(to==3){		//Kelvin
				output = input;
			}
		}
		return output;
	}

------------------------------------------------------------------------
 Temperature  Celsius  Celsius  Fahrenheit  Kelvin  Fahrenheit  Celsius  Fahrenheit  Kelvin  Kelvin  Celsius  Fahrenheit  Kelvin   
	   Temperature 											
	  Temperature											
	  output 0 0 from 1 to 1 output input to 2 output input 5 9 32 to 3 output input 273 15 from 2 to 1 output input 32 9 5 to 2 output input to 3 output input 32 9 5 273 16 from 3 to 1 output input 273 16 to 2 output input 273 16 5 9 32 to 3 output input output 
------------------------------------------------------------------------
[temperature, celsius, fahrenheit, kelvin, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationTemperature.java,UnitConverterOperationTemperature
6 , 41
------------------------------------------------------------------------
public class UnitConverterOperationTemperature {
	/**
	 * Temperature											
	**/
	public double Temperature(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Celsius
			if(to==1){				//Celsius
				output = input;
			}else if(to==2){		//Fahrenheit
				output = ((input/5)*9)+32;
			}else if(to==3){		//Kelvin
				output = input+273.15;
			}
		}
		else if(from==2){									//Fahrenheit
			if(to==1){				//Celsius
				output = ((input-32)/9)*5;
			}else if(to==2){		//Fahrenheit
				output = input;
			}else if(to==3){		//Kelvin
				output = (((input-32)/9)*5)-273.16;
			}
		}
		else if(from==3){									//Kelvin
			if(to==1){				//Celsius
				output = input-273.16;
			}else if(to==2){		//Fahrenheit
				output = (((input-273.16)/5)*9)+32;
			}else if(to==3){		//Kelvin
				output = input;
			}
		}
		return output;
	}
}

------------------------------------------------------------------------
 Unit Converter Operation Temperature  UnitConverterOperationTemperature   
------------------------------------------------------------------------
[unit, converter, operation, temperature, unitconverteroperationtemperature]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationTime.java,Time
7 , 132
------------------------------------------------------------------------
	/**
	 * Time											
	**/
	public double Time(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Nanosecond
			if(to==1){				//Nanosecond
				output = input;
			}else if(to==2){		//Millisecond
				output = input*0.000001;
			}else if(to==3){		//Second
				output = input*0.000001*0.001;
			}else if(to==4){		//Minute
				output = (input*0.000001*0.001)/60;
			}else if(to==5){		//Hour
				output = (input*0.000001*0.001)/3600;
			}else if(to==6){		//Day
				output = ((input*0.000001*0.001)/3600)/24;
			}else if(to==7){		//Week
				output = ((input*0.000001*0.001)/3600)/168;
			}
		}
		else if(from==2){									//Millisecond
			if(to==1){				//Nanosecond
				output = input*1000000;
			}else if(to==2){		//Millisecond
				output = input;
			}else if(to==3){		//Second
				output = input*0.001;
			}else if(to==4){		//Minute
				output = (input*0.001)/60;
			}else if(to==5){		//Hour
				output = (input*0.001)/3600;
			}else if(to==6){		//Day
				output = ((input*0.001)/3600)/24;
			}else if(to==7){		//Week
				output = ((input*0.001)/3600)/168;
			}
		}
		else if(from==3){									//Second
			if(to==1){				//Nanosecond
				output = input*1000000000;
			}else if(to==2){		//Millisecond
				output = input*1000;
			}else if(to==3){		//Second
				output = input;
			}else if(to==4){		//Minute
				output = input/60;
			}else if(to==5){		//Hour
				output = input/3600;
			}else if(to==6){		//Day
				output = (input/3600)/24;
			}else if(to==7){		//Week
				output = (input/3600)/168;
			}
		}
		else if(from==4){									//Minute
			if(to==1){				//Nanosecond
				output = input*1000000000*60;
			}else if(to==2){		//Millisecond
				output = input*1000*60;
			}else if(to==3){		//Second
				output = input*60;
			}else if(to==4){		//Minute
				output = input;
			}else if(to==5){		//Hour
				output = input/60;
			}else if(to==6){		//Day
				output = (input/60)/24;
			}else if(to==7){		//Week
				output = (input/60)/168;
			}
		}
		else if(from==5){									//Hour
			if(to==1){				//Nanosecond
				output = input*1000000000*3600;
			}else if(to==2){		//Millisecond
				output = input*1000*3600;
			}else if(to==3){		//Second
				output = input*3600;
			}else if(to==4){		//Minute
				output = input*60;
			}else if(to==5){		//Hour
				output = input;
			}else if(to==6){		//Day
				output = input/24;
			}else if(to==7){		//Week
				output = input/168;
			}
		}
		else if(from==6){									//Day
			if(to==1){				//Nanosecond
				output = input*1000000000*3600*24;
			}else if(to==2){		//Millisecond
				output = input*1000*3600*24;
			}else if(to==3){		//Second
				output = input*3600*24;
			}else if(to==4){		//Minute
				output = input*60*24;
			}else if(to==5){		//Hour
				output = input*24;
			}else if(to==6){		//Day
				output = input;
			}else if(to==7){		//Week
				output = input/7;
			}
		}
		else if(from==7){									//Week
			if(to==1){				//Nanosecond
				output = input*1000000000*3600*168;
			}else if(to==2){		//Millisecond
				output = input*1000*3600*168;
			}else if(to==3){		//Second
				output = input*3600*168;
			}else if(to==4){		//Minute
				output = input*60*168;
			}else if(to==5){		//Hour
				output = input*168;
			}else if(to==6){		//Day
				output = input*7;
			}else if(to==7){		//Week
				output = input;
			}
		}
		return output;
	}	

------------------------------------------------------------------------
 Time  Nanosecond  Nanosecond  Millisecond   Minute  Hour  Day  Week  Millisecond  Nanosecond  Millisecond   Minute  Hour  Day  Week   Nanosecond  Millisecond   Minute  Hour  Day  Week  Minute  Nanosecond  Millisecond   Minute  Hour  Day  Week  Hour  Nanosecond  Millisecond   Minute  Hour  Day  Week  Day  Nanosecond  Millisecond   Minute  Hour  Day  Week  Week  Nanosecond  Millisecond   Minute  Hour  Day  Week   
	   Time 											
	  Time											
	  output 0 0 from 1 to 1 output input to 2 output input 0 000001 to 3 output input 0 000001 0 001 to 4 output input 0 000001 0 001 60 to 5 output input 0 000001 0 001 3600 to 6 output input 0 000001 0 001 3600 24 to 7 output input 0 000001 0 001 3600 168 from 2 to 1 output input 1000000 to 2 output input to 3 output input 0 001 to 4 output input 0 001 60 to 5 output input 0 001 3600 to 6 output input 0 001 3600 24 to 7 output input 0 001 3600 168 from 3 to 1 output input 1000000000 to 2 output input 1000 to 3 output input to 4 output input 60 to 5 output input 3600 to 6 output input 3600 24 to 7 output input 3600 168 from 4 to 1 output input 1000000000 60 to 2 output input 1000 60 to 3 output input 60 to 4 output input to 5 output input 60 to 6 output input 60 24 to 7 output input 60 168 from 5 to 1 output input 1000000000 3600 to 2 output input 1000 3600 to 3 output input 3600 to 4 output input 60 to 5 output input to 6 output input 24 to 7 output input 168 from 6 to 1 output input 1000000000 3600 24 to 2 output input 1000 3600 24 to 3 output input 3600 24 to 4 output input 60 24 to 5 output input 24 to 6 output input to 7 output input 7 from 7 to 1 output input 1000000000 3600 168 to 2 output input 1000 3600 168 to 3 output input 3600 168 to 4 output input 60 168 to 5 output input 168 to 6 output input 7 to 7 output input output 
------------------------------------------------------------------------
[time, nanosecond, millisecond, minute, hour, day, week, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationTime.java,UnitConverterOperationTime
6 , 133
------------------------------------------------------------------------
public class UnitConverterOperationTime {
	/**
	 * Time											
	**/
	public double Time(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Nanosecond
			if(to==1){				//Nanosecond
				output = input;
			}else if(to==2){		//Millisecond
				output = input*0.000001;
			}else if(to==3){		//Second
				output = input*0.000001*0.001;
			}else if(to==4){		//Minute
				output = (input*0.000001*0.001)/60;
			}else if(to==5){		//Hour
				output = (input*0.000001*0.001)/3600;
			}else if(to==6){		//Day
				output = ((input*0.000001*0.001)/3600)/24;
			}else if(to==7){		//Week
				output = ((input*0.000001*0.001)/3600)/168;
			}
		}
		else if(from==2){									//Millisecond
			if(to==1){				//Nanosecond
				output = input*1000000;
			}else if(to==2){		//Millisecond
				output = input;
			}else if(to==3){		//Second
				output = input*0.001;
			}else if(to==4){		//Minute
				output = (input*0.001)/60;
			}else if(to==5){		//Hour
				output = (input*0.001)/3600;
			}else if(to==6){		//Day
				output = ((input*0.001)/3600)/24;
			}else if(to==7){		//Week
				output = ((input*0.001)/3600)/168;
			}
		}
		else if(from==3){									//Second
			if(to==1){				//Nanosecond
				output = input*1000000000;
			}else if(to==2){		//Millisecond
				output = input*1000;
			}else if(to==3){		//Second
				output = input;
			}else if(to==4){		//Minute
				output = input/60;
			}else if(to==5){		//Hour
				output = input/3600;
			}else if(to==6){		//Day
				output = (input/3600)/24;
			}else if(to==7){		//Week
				output = (input/3600)/168;
			}
		}
		else if(from==4){									//Minute
			if(to==1){				//Nanosecond
				output = input*1000000000*60;
			}else if(to==2){		//Millisecond
				output = input*1000*60;
			}else if(to==3){		//Second
				output = input*60;
			}else if(to==4){		//Minute
				output = input;
			}else if(to==5){		//Hour
				output = input/60;
			}else if(to==6){		//Day
				output = (input/60)/24;
			}else if(to==7){		//Week
				output = (input/60)/168;
			}
		}
		else if(from==5){									//Hour
			if(to==1){				//Nanosecond
				output = input*1000000000*3600;
			}else if(to==2){		//Millisecond
				output = input*1000*3600;
			}else if(to==3){		//Second
				output = input*3600;
			}else if(to==4){		//Minute
				output = input*60;
			}else if(to==5){		//Hour
				output = input;
			}else if(to==6){		//Day
				output = input/24;
			}else if(to==7){		//Week
				output = input/168;
			}
		}
		else if(from==6){									//Day
			if(to==1){				//Nanosecond
				output = input*1000000000*3600*24;
			}else if(to==2){		//Millisecond
				output = input*1000*3600*24;
			}else if(to==3){		//Second
				output = input*3600*24;
			}else if(to==4){		//Minute
				output = input*60*24;
			}else if(to==5){		//Hour
				output = input*24;
			}else if(to==6){		//Day
				output = input;
			}else if(to==7){		//Week
				output = input/7;
			}
		}
		else if(from==7){									//Week
			if(to==1){				//Nanosecond
				output = input*1000000000*3600*168;
			}else if(to==2){		//Millisecond
				output = input*1000*3600*168;
			}else if(to==3){		//Second
				output = input*3600*168;
			}else if(to==4){		//Minute
				output = input*60*168;
			}else if(to==5){		//Hour
				output = input*168;
			}else if(to==6){		//Day
				output = input*7;
			}else if(to==7){		//Week
				output = input;
			}
		}
		return output;
	}	
}

------------------------------------------------------------------------
 Unit Converter Operation Time  UnitConverterOperationTime   
------------------------------------------------------------------------
[unit, converter, operation, time, unitconverteroperationtime]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationVolume.java,Volume
7 , 165
------------------------------------------------------------------------
	/**
	 * Volume											
	**/
	public double Volume(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Cubic Centimeter
			if(to==1){				//Cubic Centimeter
				output = input;
			}else if(to==2){		//Cubic Meter
				output = input*0.000001;
			}else if(to==3){		//Cubic Inch
				output = input*0.0610237440947323;
			}else if(to==4){		//Cubic Feet
				output = input*3.531466672148859e-5;
			}else if(to==5){		//Cubic Yard
				output = input*1.307950619314392e-6;
			}else if(to==6){		//Liter
				output = input*0.001;
			}else if(to==7){		//Gallon(UK)
				output = input*2.199692482990878e-4;
			}else if(to==8){		//Gallon(US)
				output = input*2.641720523581484e-4;
			}
		}
		else if(from==2){									//Cubic Meter
			if(to==1){				//Cubic Centimeter
				output = input*1000000;
			}else if(to==2){		//Cubic Meter
				output = input;
			}else if(to==3){		//Cubic Inch
				output = input*61023.74409473228;
			}else if(to==4){		//Cubic Feet
				output = input*35.31466672148859;
			}else if(to==5){		//Cubic Yard
				output = input*1.307950619314392;
			}else if(to==6){		//Liter
				output = input*1000;
			}else if(to==7){		//Gallon(UK)
				output = input*219.9692482990878;
			}else if(to==8){		//Gallon(US)
				output = input*264.1720523581484;
			}
		}
		else if(from==3){									//Cubic Inch
			if(to==1){				//Cubic Centimeter
				output = input*16.387064;
			}else if(to==2){		//Cubic Meter
				output = input*0.000016387064;
			}else if(to==3){		//Cubic Inch
				output = input;
			}else if(to==4){		//Cubic Feet
				output = input*5.787037037037037e-4;
			}else if(to==5){		//Cubic Yard
				output = input*2.143347050754458e-5;
			}else if(to==6){		//Liter
				output = input*0.016387064;
			}else if(to==7){		//Gallon(UK)
				output = input*0.003604650149909;
			}else if(to==8){		//Gallon(US)
				output = input*0.0043290043290043;
			}
		}
		else if(from==4){									//Cubic Feet
			if(to==1){				//Cubic Centimeter
				output = input*28316.846592;
			}else if(to==2){		//Cubic Meter
				output = input*0.028316846592;
			}else if(to==3){		//Cubic Inch
				output = input*1728;
			}else if(to==4){		//Cubic Feet
				output = input;
			}else if(to==5){		//Cubic Yard
				output = input*0.037037037037037;
			}else if(to==6){		//Liter
				output = input*28.316846592;
			}else if(to==7){		//Gallon(UK)
				output = input*6.228835459042826;
			}else if(to==8){		//Gallon(US)
				output = input*7.480519480519481;
			}
		}
		else if(from==5){									//Cubic Yard
			if(to==1){				//Cubic Centimeter
				output = input*764554.857984;
			}else if(to==2){		//Cubic Meter
				output = input*0.764554857984;
			}else if(to==3){		//Cubic Inch
				output = input*46656;
			}else if(to==4){		//Cubic Feet
				output = input*27;
			}else if(to==5){		//Cubic Yard
				output = input;
			}else if(to==6){		//Liter
				output = input*764.554857984;
			}else if(to==7){		//Gallon(UK)
				output = input*168.1785573941563;
			}else if(to==8){		//Gallon(US)
				output = input*201.974025974026;
			}
		}
		else if(from==6){									//Liter
			if(to==1){				//Cubic Centimeter
				output = input*1000;
			}else if(to==2){		//Cubic Meter
				output = input*0.001;
			}else if(to==3){		//Cubic Inch
				output = input*61.02374409473228;
			}else if(to==4){		//Cubic Feet
				output = input*0.0353146667214886;
			}else if(to==5){		//Cubic Yard
				output = input*0.0013079506193144;
			}else if(to==6){		//Liter
				output = input;
			}else if(to==7){		//Gallon(UK)
				output = input*0.2199692482990878;
			}else if(to==8){		//Gallon(US)
				output = input*0.2641720523581484;
			}
		}
		else if(from==7){									//Gallon(UK)
			if(to==1){				//Cubic Centimeter
				output = input*4546.09;
			}else if(to==2){		//Cubic Meter
				output = input*0.00454609;
			}else if(to==3){		//Cubic Inch
				output = input*277.4194327916215;
			}else if(to==4){		//Cubic Feet
				output = input*0.1605436532358921;
			}else if(to==5){		//Cubic Yard
				output = input*0.005946061230959;
			}else if(to==6){		//Liter
				output = input*4.54609;
			}else if(to==7){		//Gallon(UK)
				output = input;
			}else if(to==8){		//Gallon(US)
				output = input*1.200949925504855;
			}
		}
		else if(from==8){									//Gallon(US)
			if(to==1){				//Cubic Centimeter
				output = input*3785.411784;
			}else if(to==2){		//Cubic Meter
				output = input*0.003785411784;
			}else if(to==3){		//Cubic Inch
				output = input*231;
			}else if(to==4){		//Cubic Feet
				output = input*0.1336805555555556;
			}else if(to==5){		//Cubic Yard
				output = input*0.0049511316872428;
			}else if(to==6){		//Liter
				output = input*3.785411784;
			}else if(to==7){		//Gallon(UK)
				output = input*0.8326741846289889;
			}else if(to==8){		//Gallon(US)
				output = input;
			}
		}
		return output;
	}

------------------------------------------------------------------------
 Volume  Cubic  Centimeter  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Cubic  Meter  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Cubic  Inch  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Cubic  Feet  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Cubic  Yard  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Liter  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Gallon UK  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon  Gallon  Cubic  Centimeter  Cubic  Meter  Cubic  Inch  Cubic  Feet  Cubic  Yard  Liter  Gallon UK  Gallon   
	   Volume 											
	  Volume											
	  output 0 0 from 1 to 1 output input to 2 output input 0 000001 to 3 output input 0 0610237440947323 to 4 output input 3 531466672148859e 5 to 5 output input 1 307950619314392e 6 to 6 output input 0 001 to 7 output input 2 199692482990878e 4 to 8 output input 2 641720523581484e 4 from 2 to 1 output input 1000000 to 2 output input to 3 output input 61023 74409473228 to 4 output input 35 31466672148859 to 5 output input 1 307950619314392 to 6 output input 1000 to 7 output input 219 9692482990878 to 8 output input 264 1720523581484 from 3 to 1 output input 16 387064 to 2 output input 0 000016387064 to 3 output input to 4 output input 5 787037037037037e 4 to 5 output input 2 143347050754458e 5 to 6 output input 0 016387064 to 7 output input 0 003604650149909 to 8 output input 0 0043290043290043 from 4 to 1 output input 28316 846592 to 2 output input 0 028316846592 to 3 output input 1728 to 4 output input to 5 output input 0 037037037037037 to 6 output input 28 316846592 to 7 output input 6 228835459042826 to 8 output input 7 480519480519481 from 5 to 1 output input 764554 857984 to 2 output input 0 764554857984 to 3 output input 46656 to 4 output input 27 to 5 output input to 6 output input 764 554857984 to 7 output input 168 1785573941563 to 8 output input 201 974025974026 from 6 to 1 output input 1000 to 2 output input 0 001 to 3 output input 61 02374409473228 to 4 output input 0 0353146667214886 to 5 output input 0 0013079506193144 to 6 output input to 7 output input 0 2199692482990878 to 8 output input 0 2641720523581484 from 7 to 1 output input 4546 09 to 2 output input 0 00454609 to 3 output input 277 4194327916215 to 4 output input 0 1605436532358921 to 5 output input 0 005946061230959 to 6 output input 4 54609 to 7 output input to 8 output input 1 200949925504855 from 8 to 1 output input 3785 411784 to 2 output input 0 003785411784 to 3 output input 231 to 4 output input 0 1336805555555556 to 5 output input 0 0049511316872428 to 6 output input 3 785411784 to 7 output input 0 8326741846289889 to 8 output input output 
------------------------------------------------------------------------
[volume, cubic, centimeter, meter, inch, feet, yard, liter, gallon, uk, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationVolume.java,UnitConverterOperationVolume
6 , 166
------------------------------------------------------------------------
public class UnitConverterOperationVolume {
	/**
	 * Volume											
	**/
	public double Volume(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Cubic Centimeter
			if(to==1){				//Cubic Centimeter
				output = input;
			}else if(to==2){		//Cubic Meter
				output = input*0.000001;
			}else if(to==3){		//Cubic Inch
				output = input*0.0610237440947323;
			}else if(to==4){		//Cubic Feet
				output = input*3.531466672148859e-5;
			}else if(to==5){		//Cubic Yard
				output = input*1.307950619314392e-6;
			}else if(to==6){		//Liter
				output = input*0.001;
			}else if(to==7){		//Gallon(UK)
				output = input*2.199692482990878e-4;
			}else if(to==8){		//Gallon(US)
				output = input*2.641720523581484e-4;
			}
		}
		else if(from==2){									//Cubic Meter
			if(to==1){				//Cubic Centimeter
				output = input*1000000;
			}else if(to==2){		//Cubic Meter
				output = input;
			}else if(to==3){		//Cubic Inch
				output = input*61023.74409473228;
			}else if(to==4){		//Cubic Feet
				output = input*35.31466672148859;
			}else if(to==5){		//Cubic Yard
				output = input*1.307950619314392;
			}else if(to==6){		//Liter
				output = input*1000;
			}else if(to==7){		//Gallon(UK)
				output = input*219.9692482990878;
			}else if(to==8){		//Gallon(US)
				output = input*264.1720523581484;
			}
		}
		else if(from==3){									//Cubic Inch
			if(to==1){				//Cubic Centimeter
				output = input*16.387064;
			}else if(to==2){		//Cubic Meter
				output = input*0.000016387064;
			}else if(to==3){		//Cubic Inch
				output = input;
			}else if(to==4){		//Cubic Feet
				output = input*5.787037037037037e-4;
			}else if(to==5){		//Cubic Yard
				output = input*2.143347050754458e-5;
			}else if(to==6){		//Liter
				output = input*0.016387064;
			}else if(to==7){		//Gallon(UK)
				output = input*0.003604650149909;
			}else if(to==8){		//Gallon(US)
				output = input*0.0043290043290043;
			}
		}
		else if(from==4){									//Cubic Feet
			if(to==1){				//Cubic Centimeter
				output = input*28316.846592;
			}else if(to==2){		//Cubic Meter
				output = input*0.028316846592;
			}else if(to==3){		//Cubic Inch
				output = input*1728;
			}else if(to==4){		//Cubic Feet
				output = input;
			}else if(to==5){		//Cubic Yard
				output = input*0.037037037037037;
			}else if(to==6){		//Liter
				output = input*28.316846592;
			}else if(to==7){		//Gallon(UK)
				output = input*6.228835459042826;
			}else if(to==8){		//Gallon(US)
				output = input*7.480519480519481;
			}
		}
		else if(from==5){									//Cubic Yard
			if(to==1){				//Cubic Centimeter
				output = input*764554.857984;
			}else if(to==2){		//Cubic Meter
				output = input*0.764554857984;
			}else if(to==3){		//Cubic Inch
				output = input*46656;
			}else if(to==4){		//Cubic Feet
				output = input*27;
			}else if(to==5){		//Cubic Yard
				output = input;
			}else if(to==6){		//Liter
				output = input*764.554857984;
			}else if(to==7){		//Gallon(UK)
				output = input*168.1785573941563;
			}else if(to==8){		//Gallon(US)
				output = input*201.974025974026;
			}
		}
		else if(from==6){									//Liter
			if(to==1){				//Cubic Centimeter
				output = input*1000;
			}else if(to==2){		//Cubic Meter
				output = input*0.001;
			}else if(to==3){		//Cubic Inch
				output = input*61.02374409473228;
			}else if(to==4){		//Cubic Feet
				output = input*0.0353146667214886;
			}else if(to==5){		//Cubic Yard
				output = input*0.0013079506193144;
			}else if(to==6){		//Liter
				output = input;
			}else if(to==7){		//Gallon(UK)
				output = input*0.2199692482990878;
			}else if(to==8){		//Gallon(US)
				output = input*0.2641720523581484;
			}
		}
		else if(from==7){									//Gallon(UK)
			if(to==1){				//Cubic Centimeter
				output = input*4546.09;
			}else if(to==2){		//Cubic Meter
				output = input*0.00454609;
			}else if(to==3){		//Cubic Inch
				output = input*277.4194327916215;
			}else if(to==4){		//Cubic Feet
				output = input*0.1605436532358921;
			}else if(to==5){		//Cubic Yard
				output = input*0.005946061230959;
			}else if(to==6){		//Liter
				output = input*4.54609;
			}else if(to==7){		//Gallon(UK)
				output = input;
			}else if(to==8){		//Gallon(US)
				output = input*1.200949925504855;
			}
		}
		else if(from==8){									//Gallon(US)
			if(to==1){				//Cubic Centimeter
				output = input*3785.411784;
			}else if(to==2){		//Cubic Meter
				output = input*0.003785411784;
			}else if(to==3){		//Cubic Inch
				output = input*231;
			}else if(to==4){		//Cubic Feet
				output = input*0.1336805555555556;
			}else if(to==5){		//Cubic Yard
				output = input*0.0049511316872428;
			}else if(to==6){		//Liter
				output = input*3.785411784;
			}else if(to==7){		//Gallon(UK)
				output = input*0.8326741846289889;
			}else if(to==8){		//Gallon(US)
				output = input;
			}
		}
		return output;
	}
}

------------------------------------------------------------------------
 Unit Converter Operation Volume  UnitConverterOperationVolume   
------------------------------------------------------------------------
[unit, converter, operation, volume, unitconverteroperationvolume]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationWeight.java,Weight
7 , 132
------------------------------------------------------------------------
	/**
	 * Weight											
	**/
	public double Weight(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Milligram
			if(to==1){				//Milligram
				output = input;
			}else if(to==2){		//Gram
				output = input*0.001;
			}else if(to==3){		//Kilogram
				output = input*0.000001;
			}else if(to==4){		//Tonne
				output = input*0.00000001;
			}else if(to==5){		//Ounce
				output = input*0.001*0.0352739619495804;
			}else if(to==6){		//Pound
				output = input*0.001*0.0022046226218488;
			}else if(to==7){		//Carat
				output = input*0.005;
			}
		}
		else if(from==2){									//Gram
			if(to==1){				//Milligram
				output = input*1000;
			}else if(to==2){		//Gram
				output = input;
			}else if(to==3){		//Kilogram
				output = input*0.001;
			}else if(to==4){		//Tonne
				output = input*0.000001;
			}else if(to==5){		//Ounce
				output = input*0.0352739619495804;
			}else if(to==6){		//Pound
				output = input*0.0022046226218488;
			}else if(to==7){		//Carat
				output = input*5;
			}
		}
		else if(from==3){									//Kilogram
			if(to==1){				//Milligram
				output = input*1000000;
			}else if(to==2){		//Gram
				output = input*1000;
			}else if(to==3){		//Kilogram
				output = input;
			}else if(to==4){		//Tonne
				output = input*0.001;
			}else if(to==5){		//Ounce
				output = input*35.2739619495804;
			}else if(to==6){		//Pound
				output = input*2.2046226218488;
			}else if(to==7){		//Carat
				output = input*5000;
			}
		}
		else if(from==4){									//Tonne
			if(to==1){				//Milligram
				output = input*1000000000;
			}else if(to==2){		//Gram
				output = input*1000000;
			}else if(to==3){		//Kilogram
				output = input*1000;
			}else if(to==4){		//Tonne
				output = input;
			}else if(to==5){		//Ounce
				output = input*35273.9619495804;
			}else if(to==6){		//Pound
				output = input*2204.6226218488;
			}else if(to==7){		//Carat
				output = input*5000000;
			}
		}
		else if(from==5){									//Ounce
			if(to==1){				//Milligram
				output = input*28349.523125;
			}else if(to==2){		//Gram
				output = input*28.349523125;
			}else if(to==3){		//Kilogram
				output = input*0.028349523125;
			}else if(to==4){		//Tonne
				output = input*0.000028349523125;
			}else if(to==5){		//Ounce
				output = input;
			}else if(to==6){		//Pound
				output = input*0.0625;
			}else if(to==7){		//Carat
				output = input*141.747615625;
			}
		}
		else if(from==6){									//Pound
			if(to==1){				//Milligram
				output = input*453592.37;
			}else if(to==2){		//Gram
				output = input*453.59237;
			}else if(to==3){		//Kilogram
				output = input*0.45359237;
			}else if(to==4){		//Tonne
				output = input*0.00045359237;
			}else if(to==5){		//Ounce
				output = input*16;
			}else if(to==6){		//Pound
				output = input;
			}else if(to==7){		//Carat
				output = input*2267.96185;
			}
		}
		else if(from==7){									//Carat
			if(to==1){				//Milligram
				output = input*200;
			}else if(to==2){		//Gram
				output = input*0.2;
			}else if(to==3){		//Kilogram
				output = input*0.0002;
			}else if(to==4){		//Tonne
				output = input*0.0000002;
			}else if(to==5){		//Ounce
				output = input*0.0070547923899161;
			}else if(to==6){		//Pound
				output = input*0.0070547923899161*0.0625;
			}else if(to==7){		//Carat
				output = input;
			}
		}
		return output;
	}

------------------------------------------------------------------------
 Weight  Milligram  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat  Gram  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat  Kilogram  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat  Tonne  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat  Ounce  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat  Pound  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat  Carat  Milligram  Gram  Kilogram  Tonne  Ounce  Pound  Carat   
	   Weight 											
	  Weight											
	  output 0 0 from 1 to 1 output input to 2 output input 0 001 to 3 output input 0 000001 to 4 output input 0 00000001 to 5 output input 0 001 0 0352739619495804 to 6 output input 0 001 0 0022046226218488 to 7 output input 0 005 from 2 to 1 output input 1000 to 2 output input to 3 output input 0 001 to 4 output input 0 000001 to 5 output input 0 0352739619495804 to 6 output input 0 0022046226218488 to 7 output input 5 from 3 to 1 output input 1000000 to 2 output input 1000 to 3 output input to 4 output input 0 001 to 5 output input 35 2739619495804 to 6 output input 2 2046226218488 to 7 output input 5000 from 4 to 1 output input 1000000000 to 2 output input 1000000 to 3 output input 1000 to 4 output input to 5 output input 35273 9619495804 to 6 output input 2204 6226218488 to 7 output input 5000000 from 5 to 1 output input 28349 523125 to 2 output input 28 349523125 to 3 output input 0 028349523125 to 4 output input 0 000028349523125 to 5 output input to 6 output input 0 0625 to 7 output input 141 747615625 from 6 to 1 output input 453592 37 to 2 output input 453 59237 to 3 output input 0 45359237 to 4 output input 0 00045359237 to 5 output input 16 to 6 output input to 7 output input 2267 96185 from 7 to 1 output input 200 to 2 output input 0 2 to 3 output input 0 0002 to 4 output input 0 0000002 to 5 output input 0 0070547923899161 to 6 output input 0 0070547923899161 0 0625 to 7 output input output 
------------------------------------------------------------------------
[weight, milligram, gram, kilogram, tonne, ounce, pound, carat, output, input]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/calculators/unitConverter/UnitConverterOperationWeight.java,UnitConverterOperationWeight
6 , 133
------------------------------------------------------------------------
public class UnitConverterOperationWeight {
	/**
	 * Weight											
	**/
	public double Weight(int from, int to, double input){
		double output=0.0;
		if(from==1){									//Milligram
			if(to==1){				//Milligram
				output = input;
			}else if(to==2){		//Gram
				output = input*0.001;
			}else if(to==3){		//Kilogram
				output = input*0.000001;
			}else if(to==4){		//Tonne
				output = input*0.00000001;
			}else if(to==5){		//Ounce
				output = input*0.001*0.0352739619495804;
			}else if(to==6){		//Pound
				output = input*0.001*0.0022046226218488;
			}else if(to==7){		//Carat
				output = input*0.005;
			}
		}
		else if(from==2){									//Gram
			if(to==1){				//Milligram
				output = input*1000;
			}else if(to==2){		//Gram
				output = input;
			}else if(to==3){		//Kilogram
				output = input*0.001;
			}else if(to==4){		//Tonne
				output = input*0.000001;
			}else if(to==5){		//Ounce
				output = input*0.0352739619495804;
			}else if(to==6){		//Pound
				output = input*0.0022046226218488;
			}else if(to==7){		//Carat
				output = input*5;
			}
		}
		else if(from==3){									//Kilogram
			if(to==1){				//Milligram
				output = input*1000000;
			}else if(to==2){		//Gram
				output = input*1000;
			}else if(to==3){		//Kilogram
				output = input;
			}else if(to==4){		//Tonne
				output = input*0.001;
			}else if(to==5){		//Ounce
				output = input*35.2739619495804;
			}else if(to==6){		//Pound
				output = input*2.2046226218488;
			}else if(to==7){		//Carat
				output = input*5000;
			}
		}
		else if(from==4){									//Tonne
			if(to==1){				//Milligram
				output = input*1000000000;
			}else if(to==2){		//Gram
				output = input*1000000;
			}else if(to==3){		//Kilogram
				output = input*1000;
			}else if(to==4){		//Tonne
				output = input;
			}else if(to==5){		//Ounce
				output = input*35273.9619495804;
			}else if(to==6){		//Pound
				output = input*2204.6226218488;
			}else if(to==7){		//Carat
				output = input*5000000;
			}
		}
		else if(from==5){									//Ounce
			if(to==1){				//Milligram
				output = input*28349.523125;
			}else if(to==2){		//Gram
				output = input*28.349523125;
			}else if(to==3){		//Kilogram
				output = input*0.028349523125;
			}else if(to==4){		//Tonne
				output = input*0.000028349523125;
			}else if(to==5){		//Ounce
				output = input;
			}else if(to==6){		//Pound
				output = input*0.0625;
			}else if(to==7){		//Carat
				output = input*141.747615625;
			}
		}
		else if(from==6){									//Pound
			if(to==1){				//Milligram
				output = input*453592.37;
			}else if(to==2){		//Gram
				output = input*453.59237;
			}else if(to==3){		//Kilogram
				output = input*0.45359237;
			}else if(to==4){		//Tonne
				output = input*0.00045359237;
			}else if(to==5){		//Ounce
				output = input*16;
			}else if(to==6){		//Pound
				output = input;
			}else if(to==7){		//Carat
				output = input*2267.96185;
			}
		}
		else if(from==7){									//Carat
			if(to==1){				//Milligram
				output = input*200;
			}else if(to==2){		//Gram
				output = input*0.2;
			}else if(to==3){		//Kilogram
				output = input*0.0002;
			}else if(to==4){		//Tonne
				output = input*0.0000002;
			}else if(to==5){		//Ounce
				output = input*0.0070547923899161;
			}else if(to==6){		//Pound
				output = input*0.0070547923899161*0.0625;
			}else if(to==7){		//Carat
				output = input;
			}
		}
		return output;
	}
}

------------------------------------------------------------------------
 Unit Converter Operation Weight  UnitConverterOperationWeight   
------------------------------------------------------------------------
[unit, converter, operation, weight, unitconverteroperationweight]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/About.java,initialComponent
38 , 76
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		gui = new AboutGui();
		gui.setVisible(true);
		//**
		// Assignation 																			#*******A*******#
		//**
		jTextAreaNotification = gui.jTextAreaNotification;
		jButtonOK = gui.jButtonOK;
		try {
			info = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/About.txt"));
		} catch (Exception e) {
			info = "EMPTY";
		}
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		jTextAreaNotification.setText(info);
        jTextAreaNotification.setCaretPosition(0);
		jButtonOK.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonOKActionPerformed(evt);
			}
		}); 
		jButtonOK.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonOK.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOKActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			  End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization     
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  gui About Gui  AboutGui gui set Visible  setVisible j Text Area Notification  jTextAreaNotification gui j Text Area Notification  jTextAreaNotification j Button OK  jButtonOK gui j Button OK  jButtonOK info File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts About txt Exception e info EMPTY j Text Area Notification  jTextAreaNotification set Text  setText info j Text Area Notification  jTextAreaNotification set Caret Position  setCaretPosition 0 j Button OK  jButtonOK add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button OK Action Performed  jButtonOKActionPerformed evt j Button OK  jButtonOK get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button OK  jButtonOK get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button OK Action Performed  jButtonOKActionPerformed evt 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, method, initializing, variables, placing, specific, space, frame, specifies, criteria, main, aboutgui, set, visible, setvisible, text, area, notification, jtextareanotification, button, jbuttonok, info, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, txt, exception, empty, settext, caret, position, setcaretposition, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttonokactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/About.java,jButtonOKActionPerformed
79 , 82
------------------------------------------------------------------------
	//**
	private void jButtonOKActionPerformed(ActionEvent evt){	
		gui.dispose();
	}

------------------------------------------------------------------------
 j Button OK Action Performed  jButtonOKActionPerformed    gui dispose 
------------------------------------------------------------------------
[button, action, performed, jbuttonokactionperformed, gui, dispose]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/About.java,main
92 , 102
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("com.alee.laf.WebLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new About();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel alee laf Web Look And Feel  WebLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel com alee laf Web Look And Feel  WebLookAndFeel Exception ex About 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, alee, laf, web, weblookandfeel, catch, exception, operation, unsuccessful, create, method]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/About.java,About
34 , 37
------------------------------------------------------------------------
	/***##Constructor##***/
	public About() {
		initialComponent();
	}

------------------------------------------------------------------------
 About   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/About.java,About
18 , 103
------------------------------------------------------------------------
/**
 * Shows necessary information over the software.
 * 
 * @author Minhas Kamal
 */
public class About{
	// GUI Declaration
	private AboutGui gui;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JTextArea jTextAreaNotification;
	private JButton jButtonOK;
	//operational variable
	private String info;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public About() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	@SuppressWarnings("serial")
	private void initialComponent() {
		// GUI Initialization
		gui = new AboutGui();
		gui.setVisible(true);
		//**
		// Assignation 																			#*******A*******#
		//**
		jTextAreaNotification = gui.jTextAreaNotification;
		jButtonOK = gui.jButtonOK;
		try {
			info = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/About.txt"));
		} catch (Exception e) {
			info = "EMPTY";
		}
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		jTextAreaNotification.setText(info);
        jTextAreaNotification.setCaretPosition(0);
		jButtonOK.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				jButtonOKActionPerformed(evt);
			}
		}); 
		jButtonOK.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonOK.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOKActionPerformed(evt);
	        }
	    });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	private void jButtonOKActionPerformed(ActionEvent evt){	
		gui.dispose();
	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("com.alee.laf.WebLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new About();
	}
}

------------------------------------------------------------------------
 About  GUI  Declaration   operational  variable   
   Shows   information    software 
   
      Minhas  Kamal 
  Kamal
  About Gui  AboutGui gui J Text Area  JTextArea j Text Area Notification  jTextAreaNotification J Button  JButton j Button OK  jButtonOK String info 
------------------------------------------------------------------------
[gui, declaration, operational, variable, shows, information, software, minhas, kamal, aboutgui, text, area, jtextarea, notification, jtextareanotification, button, jbutton, jbuttonok, string, info]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/AboutGui.java,initialComponent
38 , 87
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jLabelMain=new JLabel();
		jScrollPane = new JScrollPane();
		jTextAreaNotification = new JTextArea();
		jButtonOK = new JButton();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		jLabelMain.setIcon(new ImageIcon(getClass().getResource("/res/imgs/AboutBackground.jpg")));
        jLabelMain.setBounds(0, 0, 370, 425);
        jLabelMain.setLayout(null);
		jScrollPane.setViewportView(jTextAreaNotification);
		jScrollPane.setBounds(10, 10, 348, 356);
		jScrollPane.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jTextAreaNotification.setForeground(new Color(102, 0, 106));
        jTextAreaNotification.setSelectedTextColor(new Color(255, 170, 255));
        jTextAreaNotification.setSelectionColor(new Color(80, 0, 80));
        jTextAreaNotification.setFont(new Font("Gabriola", 0, 19)); // NOI18N
        jTextAreaNotification.setEditable(false);
        jTextAreaNotification.setLineWrap(true);
        jTextAreaNotification.setWrapStyleWord(true);
        jButtonOK.setText("OK");
        jButtonOK.setBounds(297, 380, 60, 30);
        jButtonOK.setBackground(new Color(212, 227, 250));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
        jLabelMain.add(jScrollPane); 
        jLabelMain.add(jButtonOK);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
        setIconImage(new ImageIcon(getClass().getResource("/res/imgs/AboutIcon.png")).getImage());
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setBounds(200, 150, 375, 450);
		setTitle("About");
		setLayout(null);
		add(jLabelMain);
		setResizable(false);
		setFocusable(true);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										  End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	  End   Adding  Components  															 _______ A _______  _______A_______    NOI 18 N  NOI18N   Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Label Main  jLabelMain J Label  JLabel j Scroll Pane  jScrollPane J Scroll Pane  JScrollPane j Text Area Notification  jTextAreaNotification J Text Area  JTextArea j Button OK  jButtonOK J Button  JButton j Label Main  jLabelMain set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs About Background  AboutBackground jpg j Label Main  jLabelMain set Bounds  setBounds 0 0 370 425 j Label Main  jLabelMain set Layout  setLayout j Scroll Pane  jScrollPane set Viewport View  setViewportView j Text Area Notification  jTextAreaNotification j Scroll Pane  jScrollPane set Bounds  setBounds 10 10 348 356 j Scroll Pane  jScrollPane set Border  setBorder Soft Bevel Border  SoftBevelBorder Bevel Border  BevelBorder LOWERED j Scroll Pane  jScrollPane set Vertical Scroll Bar Policy  setVerticalScrollBarPolicy Scroll Pane Constants  ScrollPaneConstants VERTICAL SCROLLBAR ALWAYS  VERTICAL_SCROLLBAR_ALWAYS j Text Area Notification  jTextAreaNotification set Foreground  setForeground Color 102 0 106 j Text Area Notification  jTextAreaNotification set Selected Text Color  setSelectedTextColor Color 255 170 255 j Text Area Notification  jTextAreaNotification set Selection Color  setSelectionColor Color 80 0 80 j Text Area Notification  jTextAreaNotification set Font  setFont Font Gabriola 0 19 j Text Area Notification  jTextAreaNotification set Editable  setEditable j Text Area Notification  jTextAreaNotification set Line Wrap  setLineWrap j Text Area Notification  jTextAreaNotification set Wrap Style Word  setWrapStyleWord j Button OK  jButtonOK set Text  setText OK j Button OK  jButtonOK set Bounds  setBounds 297 380 60 30 j Button OK  jButtonOK set Background  setBackground Color 212 227 250 j Label Main  jLabelMain add j Scroll Pane  jScrollPane j Label Main  jLabelMain add j Button OK  jButtonOK set Icon Image  setIconImage Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs About Icon  AboutIcon png get Image  getImage set Default Close Operation  setDefaultCloseOperation DISPOSE ON CLOSE  DISPOSE_ON_CLOSE set Bounds  setBounds 200 150 375 450 set Title  setTitle About set Layout  setLayout add j Label Main  jLabelMain set Resizable  setResizable set Focusable  setFocusable 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, noi, noi18n, criterion, frame, method, initializing, gui, variables, placing, specific, space, specifies, criteria, main, label, jlabelmain, jlabel, scroll, pane, jscrollpane, text, area, notification, jtextareanotification, jtextarea, button, jbuttonok, jbutton, set, icon, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, background, aboutbackground, jpg, setbounds, layout, setlayout, viewport, view, setviewportview, border, setborder, soft, bevel, softbevelborder, bevelborder, lowered, vertical, bar, policy, setverticalscrollbarpolicy, constants, scrollpaneconstants, scrollbar, vertical_scrollbar_always, foreground, setforeground, color, selected, setselectedtextcolor, selection, setselectioncolor, font, setfont, gabriola, editable, seteditable, line, wrap, setlinewrap, style, word, setwrapstyleword, settext, setbackground, add, seticonimage, abouticon, png, getimage, default, close, operation, setdefaultcloseoperation, dispose, dispose_on_close, title, settitle, resizable, setresizable, focusable, setfocusable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/AboutGui.java,main
88 , 99
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("com.alee.laf.WebLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		AboutGui gui = new AboutGui();
		gui.setVisible(true);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel alee laf Web Look And Feel  WebLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel com alee laf Web Look And Feel  WebLookAndFeel Exception ex About Gui  AboutGui gui About Gui  AboutGui gui set Visible  setVisible 
------------------------------------------------------------------------
[main, set, nimbus, feel, javax, swing, ui, manager, uimanager, setlookandfeel, alee, laf, web, weblookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, gui, aboutgui, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/AboutGui.java,AboutGui
34 , 37
------------------------------------------------------------------------
	/***##Constructor##***/
	public AboutGui() {
		initialComponent();
	}

------------------------------------------------------------------------
 About Gui  AboutGui   Constructor  initial Component  initialComponent 
------------------------------------------------------------------------
[gui, aboutgui, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/about/AboutGui.java,AboutGui
19 , 100
------------------------------------------------------------------------
/**
 * Shows necessary information over the software.
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class AboutGui extends JFrame {
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JLabel jLabelMain;
	JScrollPane jScrollPane;
	JTextArea jTextAreaNotification;
	JButton jButtonOK;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public AboutGui() {
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jLabelMain=new JLabel();
		jScrollPane = new JScrollPane();
		jTextAreaNotification = new JTextArea();
		jButtonOK = new JButton();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		jLabelMain.setIcon(new ImageIcon(getClass().getResource("/res/imgs/AboutBackground.jpg")));
        jLabelMain.setBounds(0, 0, 370, 425);
        jLabelMain.setLayout(null);
		jScrollPane.setViewportView(jTextAreaNotification);
		jScrollPane.setBounds(10, 10, 348, 356);
		jScrollPane.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
		jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jTextAreaNotification.setForeground(new Color(102, 0, 106));
        jTextAreaNotification.setSelectedTextColor(new Color(255, 170, 255));
        jTextAreaNotification.setSelectionColor(new Color(80, 0, 80));
        jTextAreaNotification.setFont(new Font("Gabriola", 0, 19)); // NOI18N
        jTextAreaNotification.setEditable(false);
        jTextAreaNotification.setLineWrap(true);
        jTextAreaNotification.setWrapStyleWord(true);
        jButtonOK.setText("OK");
        jButtonOK.setBounds(297, 380, 60, 30);
        jButtonOK.setBackground(new Color(212, 227, 250));
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
        jLabelMain.add(jScrollPane); 
        jLabelMain.add(jButtonOK);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
        setIconImage(new ImageIcon(getClass().getResource("/res/imgs/AboutIcon.png")).getImage());
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setBounds(200, 150, 375, 450);
		setTitle("About");
		setLayout(null);
		add(jLabelMain);
		setResizable(false);
		setFocusable(true);
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("com.alee.laf.WebLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		AboutGui gui = new AboutGui();
		gui.setVisible(true);
	}
}

------------------------------------------------------------------------
 About Gui  AboutGui    
   Shows   information    software 
   
      Minhas  Kamal 
  Kamal
  J Label  JLabel j Label Main  jLabelMain J Scroll Pane  JScrollPane j Scroll Pane  jScrollPane J Text Area  JTextArea j Text Area Notification  jTextAreaNotification J Button  JButton j Button OK  jButtonOK 
------------------------------------------------------------------------
[gui, aboutgui, shows, information, software, minhas, kamal, label, jlabel, main, jlabelmain, scroll, pane, jscrollpane, text, area, jtextarea, notification, jtextareanotification, button, jbutton, jbuttonok]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,initialComponent
57 , 90
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		// GUI Initialization
		gui = new ProfileGui();
		gui.setVisible(true);
		//**
		// Assignation 																			#*******A*******#
		//**
    	jButtonPhoto = gui.jButtonPhoto;
        jLabelDate = gui.jLabelDate;
        jLabelPhoto = gui.jLabelPhoto;
        jTextAreaInformation = gui.jTextAreaInformation;
        numberOfPhotos = gui.numberOfPhotos;
        try {
        	developerInfo = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/Developer.txt"));
		} catch (Exception e) {
			developerInfo = "EMPTY";
		}
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
        jLabelDate.setText("Date: " + date);
        jTextAreaInformation.setText(developerInfo);
        jButtonPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jPanelPhotoActionPerformed(evt);
            }
        });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			  End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization     
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  gui Profile Gui  ProfileGui gui set Visible  setVisible j Button Photo  jButtonPhoto gui j Button Photo  jButtonPhoto j Label Date  jLabelDate gui j Label Date  jLabelDate j Label Photo  jLabelPhoto gui j Label Photo  jLabelPhoto j Text Area Information  jTextAreaInformation gui j Text Area Information  jTextAreaInformation number Of Photos  numberOfPhotos gui number Of Photos  numberOfPhotos developer Info  developerInfo File IO  FileIO read Whole File  readWholeFile get Class  getClass get Resource As Stream  getResourceAsStream res txts Developer txt Exception e developer Info  developerInfo EMPTY j Label Date  jLabelDate set Text  setText Date date j Text Area Information  jTextAreaInformation set Text  setText developer Info  developerInfo j Button Photo  jButtonPhoto add Action Listener  addActionListener java awt event Action Listener  ActionListener action Performed  actionPerformed java awt event Action Event  ActionEvent evt j Panel Photo Action Performed  jPanelPhotoActionPerformed evt 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, method, initializing, variables, placing, specific, space, frame, specifies, criteria, main, profile, profilegui, set, visible, setvisible, button, photo, jbuttonphoto, label, date, jlabeldate, jlabelphoto, text, area, information, jtextareainformation, number, photos, numberofphotos, developer, info, developerinfo, file, io, fileio, read, readwholefile, class, getclass, resource, stream, getresourceasstream, res, txts, txt, exception, empty, settext, add, listener, addactionlistener, java, awt, event, actionlistener, performed, actionperformed, actionevent, evt, panel, jpanelphotoactionperformed]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,jPanelPhotoActionPerformed
93 , 100
------------------------------------------------------------------------
	//**
	private void jPanelPhotoActionPerformed(java.awt.event.ActionEvent evt) {  
		if(!isStanding){
			isStanding=true;
		}else{
			isStanding=false;
		}
    }

------------------------------------------------------------------------
 j Panel Photo Action Performed  jPanelPhotoActionPerformed    is Standing  isStanding is Standing  isStanding is Standing  isStanding 
------------------------------------------------------------------------
[panel, photo, action, performed, jpanelphotoactionperformed, standing, isstanding]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,run
108 , 134
------------------------------------------------------------------------
	//**
	@SuppressWarnings("static-access")
	public void run() {
		int criticalPoint=numberOfPhotos*(-180) - numberOfPhotos - 1;
		while(true){
			if(!isStanding){
				position--;
			}
			for(int i=0; i<numberOfPhotos+1; i++){
				jLabelPhoto[i].setLocation(position + (i*181), 0);			
			}
			try {
				thread.sleep(4);
				for(int i=0; i<numberOfPhotos; i++){
					if(position == i*(-180) - i - 1){
						thread.sleep(900);
						break;
					}
				}
			}catch(Exception e) {
				//do nothing
			}
			if(position == criticalPoint){
				position=0;
			}
		}
	}

------------------------------------------------------------------------
 run      critical Point  criticalPoint number Of Photos  numberOfPhotos 180 number Of Photos  numberOfPhotos 1 is Standing  isStanding position i 0 i number Of Photos  numberOfPhotos 1 i j Label Photo  jLabelPhoto i set Location  setLocation position i 181 0 thread sleep 4 i 0 i number Of Photos  numberOfPhotos i position i 180 i 1 thread sleep 900 Exception e position critical Point  criticalPoint position 0 
------------------------------------------------------------------------
[run, critical, point, criticalpoint, number, photos, numberofphotos, standing, isstanding, position, label, photo, jlabelphoto, set, location, setlocation, thread, sleep, exception]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,main
136 , 146
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new Profile();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Profile 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, profile]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,Profile
38 , 47
------------------------------------------------------------------------
	/***##Constructor##***/
	public Profile() {
		date="17-Jan-2014";
    	isStanding=false;
    	position=0;
		initialComponent();
		//*Thread*//
        thread = new Thread(this);
        thread.start();
	}

------------------------------------------------------------------------
 Profile  Thread   Constructor  date 17 Jan 2014 is Standing  isStanding position 0 initial Component  initialComponent thread Thread thread start 
------------------------------------------------------------------------
[profile, thread, constructor, date, jan, standing, isstanding, position, initial, component, initialcomponent, start]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,Profile
48 , 56
------------------------------------------------------------------------
	public Profile(String date) {
    	this.date=date;
    	isStanding=false;
    	position=0;
    	initialComponent();
    	//*Thread*//
        thread = new Thread(this);
        thread.start();
    }

------------------------------------------------------------------------
 Profile  Thread   date date is Standing  isStanding position 0 initial Component  initialComponent thread Thread thread start 
------------------------------------------------------------------------
[profile, thread, date, standing, isstanding, position, initial, component, initialcomponent, start]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/Profile.java,Profile
14 , 147
------------------------------------------------------------------------
/**
 * Shows developer's profile.
 * 
 * @author Minhas Kamal
 */
public class Profile implements Runnable{
	// GUI Declaration
	private ProfileGui gui;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	private JButton jButtonPhoto;
	private JLabel jLabelDate;
    private JLabel jLabelPhoto[];
    private JTextArea jTextAreaInformation;
    //other variables
    private String date;			//Change it accordingly
    private int numberOfPhotos;		//number of profile photos
    private int position;			//position determiner 
    private boolean isStanding;		//picture show is standing or not
    private String developerInfo;
    //thread
    private Thread thread;			//main thread
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public Profile() {
		date="17-Jan-2014";
    	isStanding=false;
    	position=0;
		initialComponent();
		//*Thread*//
        thread = new Thread(this);
        thread.start();
	}
	public Profile(String date) {
    	this.date=date;
    	isStanding=false;
    	position=0;
    	initialComponent();
    	//*Thread*//
        thread = new Thread(this);
        thread.start();
    }
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		// GUI Initialization
		gui = new ProfileGui();
		gui.setVisible(true);
		//**
		// Assignation 																			#*******A*******#
		//**
    	jButtonPhoto = gui.jButtonPhoto;
        jLabelDate = gui.jLabelDate;
        jLabelPhoto = gui.jLabelPhoto;
        jTextAreaInformation = gui.jTextAreaInformation;
        numberOfPhotos = gui.numberOfPhotos;
        try {
        	developerInfo = FileIO.readWholeFile(getClass().getResourceAsStream("/res/txts/Developer.txt"));
		} catch (Exception e) {
			developerInfo = "EMPTY";
		}
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
        jLabelDate.setText("Date: " + date);
        jTextAreaInformation.setText(developerInfo);
        jButtonPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jPanelPhotoActionPerformed(evt);
            }
        });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	private void jPanelPhotoActionPerformed(java.awt.event.ActionEvent evt) {  
		if(!isStanding){
			isStanding=true;
		}else{
			isStanding=false;
		}
    }
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	@SuppressWarnings("static-access")
	public void run() {
		int criticalPoint=numberOfPhotos*(-180) - numberOfPhotos - 1;
		while(true){
			if(!isStanding){
				position--;
			}
			for(int i=0; i<numberOfPhotos+1; i++){
				jLabelPhoto[i].setLocation(position + (i*181), 0);			
			}
			try {
				thread.sleep(4);
				for(int i=0; i<numberOfPhotos; i++){
					if(position == i*(-180) - i - 1){
						thread.sleep(900);
						break;
					}
				}
			}catch(Exception e) {
				//do nothing
			}
			if(position == criticalPoint){
				position=0;
			}
		}
	}
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new Profile();
	}
}

------------------------------------------------------------------------
 Profile  GUI  Declaration   Change    number   profile  photos  position  determiner  picture  show   standing    main  thread   
   Shows  developer  profile 
   
      Minhas  Kamal 
  Kamal
  Profile Gui  ProfileGui gui J Button  JButton j Button Photo  jButtonPhoto J Label  JLabel j Label Date  jLabelDate J Label  JLabel j Label Photo  jLabelPhoto J Text Area  JTextArea j Text Area Information  jTextAreaInformation String date number Of Photos  numberOfPhotos position is Standing  isStanding String developer Info  developerInfo Thread thread 
------------------------------------------------------------------------
[profile, gui, declaration, change, number, photos, position, determiner, picture, show, standing, main, thread, shows, developer, minhas, kamal, profilegui, button, jbutton, photo, jbuttonphoto, label, jlabel, date, jlabeldate, jlabelphoto, text, area, jtextarea, information, jtextareainformation, string, numberofphotos, isstanding, info, developerinfo]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/ProfileGui.java,initialComponent
38 , 120
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jLabelMain = new JLabel();
    	jButtonPhoto = new JButton();
        jLabelName = new JLabel();
        jLabelInstitute = new JLabel();
        jLabelDate = new JLabel();
        jLabelEmail = new JLabel();
        jLabelPhoto = new JLabel[numberOfPhotos+1];	//we need one extra photo
        jTextAreaInformation = new JTextArea();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
        jLabelMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/DeveloperBackGround.jpg")));
        jLabelMain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabelMain.setBounds(0, 0, 525, 340);
        jLabelMain.setLayout(null);
        jLabelName.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelName.setText("Minhas Kamal");
        jLabelName.setToolTipText("Name");
        jLabelName.setBounds(20, 60, 120, 20);
        jLabelInstitute.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelInstitute.setText("Institute of Information Technology, DU.");
        jLabelInstitute.setToolTipText("Educational Institute");
        jLabelInstitute.setBounds(20, 90, 290, 20);
        jLabelDate.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelDate.setToolTipText("Date of Completion");
        jLabelDate.setBounds(20, 120, 200, 20);
        jLabelEmail.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelEmail.setText("Email: minhaskamal024@gmail.com");
        jLabelEmail.setBounds(20, 150, 260, 20);
        jButtonPhoto.setToolTipText("Click to play/pause");
        jButtonPhoto.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonPhoto.setLayout(null);
        jButtonPhoto.setBounds(328, 15, 180, 195);
        //photos
        for(int i=0; i<numberOfPhotos; i++){
        	jLabelPhoto[i]=new JLabel();
        	jLabelPhoto[i].setBounds(i*181, 0, 180, 195);
        	jLabelPhoto[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/DeveloperImg" +
        			(i+1) + ".png")));
        }
        jLabelPhoto[numberOfPhotos]=new JLabel();
    	jLabelPhoto[numberOfPhotos].setBounds(numberOfPhotos*181, 0, 180, 195);
    	jLabelPhoto[numberOfPhotos].setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/DeveloperImg" +
    			1 + ".png")));
        //text area
        jTextAreaInformation.setEditable(false);
        jTextAreaInformation.setBackground(new java.awt.Color(210, 210, 210));
        jTextAreaInformation.setColumns(20);
        jTextAreaInformation.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextAreaInformation.setRows(5);
        jTextAreaInformation.setToolTipText("My Study Life");
        jTextAreaInformation.setBorder((new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jTextAreaInformation.setBounds(10, 225, 500, 75);
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
        for(int i=0; i<=numberOfPhotos; i++){
        	jButtonPhoto.add(jLabelPhoto[i]);
        }
        //adding features to the main panel
        jLabelMain.add(jLabelName); jLabelMain.add(jLabelInstitute); jLabelMain.add(jLabelDate); jLabelMain.add(jLabelEmail);
        jLabelMain.add(jButtonPhoto); jLabelMain.add(jTextAreaInformation);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
        setIconImage(new ImageIcon(getClass().getResource("/res/imgs/DeveloperIcon.png")).getImage());
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); 
        setTitle("Developer's Profile");
        setLayout(null);
        setSize(525, 340);
        setLocation(250, 200);
        setResizable(false);
        add(jLabelMain);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										  End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	  End   Adding  Components  															 _______ A _______  _______A_______      extra  photo   NOI 18 N  NOI18N  NOI 18 N  NOI18N  NOI 18 N  NOI18N  NOI 18 N  NOI18N  photos  text  area  NOI 18 N  NOI18N   adding  features    main  panel  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Label Main  jLabelMain J Label  JLabel j Button Photo  jButtonPhoto J Button  JButton j Label Name  jLabelName J Label  JLabel j Label Institute  jLabelInstitute J Label  JLabel j Label Date  jLabelDate J Label  JLabel j Label Email  jLabelEmail J Label  JLabel j Label Photo  jLabelPhoto J Label  JLabel number Of Photos  numberOfPhotos 1 j Text Area Information  jTextAreaInformation J Text Area  JTextArea j Label Main  jLabelMain set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Developer Back Ground  DeveloperBackGround jpg j Label Main  jLabelMain set Border  setBorder javax swing border Soft Bevel Border  SoftBevelBorder javax swing border Bevel Border  BevelBorder RAISED j Label Main  jLabelMain set Bounds  setBounds 0 0 525 340 j Label Main  jLabelMain set Layout  setLayout j Label Name  jLabelName set Font  setFont java awt Font Lucida Bright 2 15 j Label Name  jLabelName set Text  setText Minhas Kamal j Label Name  jLabelName set Tool Tip Text  setToolTipText Name j Label Name  jLabelName set Bounds  setBounds 20 60 120 20 j Label Institute  jLabelInstitute set Font  setFont java awt Font Lucida Bright 2 15 j Label Institute  jLabelInstitute set Text  setText Institute of Information Technology DU j Label Institute  jLabelInstitute set Tool Tip Text  setToolTipText Educational Institute j Label Institute  jLabelInstitute set Bounds  setBounds 20 90 290 20 j Label Date  jLabelDate set Font  setFont java awt Font Lucida Bright 2 15 j Label Date  jLabelDate set Tool Tip Text  setToolTipText Date of Completion j Label Date  jLabelDate set Bounds  setBounds 20 120 200 20 j Label Email  jLabelEmail set Font  setFont java awt Font Lucida Bright 2 15 j Label Email  jLabelEmail set Text  setText Email minhaskamal 024@gmail  minhaskamal024@gmail com j Label Email  jLabelEmail set Bounds  setBounds 20 150 260 20 j Button Photo  jButtonPhoto set Tool Tip Text  setToolTipText Click to play pause j Button Photo  jButtonPhoto set Cursor  setCursor java awt Cursor java awt Cursor DEFAULT CURSOR  DEFAULT_CURSOR j Button Photo  jButtonPhoto set Layout  setLayout j Button Photo  jButtonPhoto set Bounds  setBounds 328 15 180 195 i 0 i number Of Photos  numberOfPhotos i j Label Photo  jLabelPhoto i J Label  JLabel j Label Photo  jLabelPhoto i set Bounds  setBounds i 181 0 180 195 j Label Photo  jLabelPhoto i set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Developer Img  DeveloperImg i 1 png j Label Photo  jLabelPhoto number Of Photos  numberOfPhotos J Label  JLabel j Label Photo  jLabelPhoto number Of Photos  numberOfPhotos set Bounds  setBounds number Of Photos  numberOfPhotos 181 0 180 195 j Label Photo  jLabelPhoto number Of Photos  numberOfPhotos set Icon  setIcon javax swing Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Developer Img  DeveloperImg 1 png j Text Area Information  jTextAreaInformation set Editable  setEditable j Text Area Information  jTextAreaInformation set Background  setBackground java awt Color 210 210 210 j Text Area Information  jTextAreaInformation set Columns  setColumns 20 j Text Area Information  jTextAreaInformation set Font  setFont java awt Font Times New Roman 0 13 j Text Area Information  jTextAreaInformation set Rows  setRows 5 j Text Area Information  jTextAreaInformation set Tool Tip Text  setToolTipText My Study Life j Text Area Information  jTextAreaInformation set Border  setBorder javax swing border Soft Bevel Border  SoftBevelBorder javax swing border Bevel Border  BevelBorder LOWERED j Text Area Information  jTextAreaInformation set Bounds  setBounds 10 225 500 75 i 0 i number Of Photos  numberOfPhotos i j Button Photo  jButtonPhoto add j Label Photo  jLabelPhoto i j Label Main  jLabelMain add j Label Name  jLabelName j Label Main  jLabelMain add j Label Institute  jLabelInstitute j Label Main  jLabelMain add j Label Date  jLabelDate j Label Main  jLabelMain add j Label Email  jLabelEmail j Label Main  jLabelMain add j Button Photo  jButtonPhoto j Label Main  jLabelMain add j Text Area Information  jTextAreaInformation set Icon Image  setIconImage Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Developer Icon  DeveloperIcon png get Image  getImage set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants DISPOSE ON CLOSE  DISPOSE_ON_CLOSE set Title  setTitle Developer s Profile set Layout  setLayout set Size  setSize 525 340 set Location  setLocation 250 200 set Resizable  setResizable add j Label Main  jLabelMain 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, extra, photo, noi, noi18n, photos, text, area, features, main, panel, criterion, frame, method, initializing, gui, variables, placing, specific, space, specifies, criteria, label, jlabelmain, jlabel, button, jbuttonphoto, jbutton, jlabelname, institute, jlabelinstitute, date, jlabeldate, email, jlabelemail, jlabelphoto, number, numberofphotos, information, jtextareainformation, jtextarea, set, icon, seticon, javax, swing, image, imageicon, class, getclass, resource, getresource, res, imgs, developer, back, ground, developerbackground, jpg, border, setborder, soft, bevel, softbevelborder, bevelborder, raised, setbounds, layout, setlayout, font, setfont, java, awt, lucida, bright, settext, minhas, kamal, tool, tip, settooltiptext, technology, du, educational, completion, minhaskamal, minhaskamal024@gmail, click, play, pause, cursor, setcursor, default, default_cursor, img, developerimg, png, editable, seteditable, background, setbackground, color, columns, setcolumns, times, roman, rows, setrows, study, life, lowered, add, seticonimage, developericon, getimage, close, operation, setdefaultcloseoperation, window, constants, windowconstants, dispose, dispose_on_close, title, settitle, profile, size, setsize, location, setlocation, resizable, setresizable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/ProfileGui.java,main
121 , 132
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		ProfileGui gui = new ProfileGui();
		gui.setVisible(true);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Profile Gui  ProfileGui gui Profile Gui  ProfileGui gui set Visible  setVisible 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, profile, gui, profilegui, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/ProfileGui.java,ProfileGui
33 , 37
------------------------------------------------------------------------
	/***##Constructor##***/
	public ProfileGui() {
		numberOfPhotos=7;
		initialComponent();
	}

------------------------------------------------------------------------
 Profile Gui  ProfileGui   Constructor  number Of Photos  numberOfPhotos 7 initial Component  initialComponent 
------------------------------------------------------------------------
[profile, gui, profilegui, constructor, number, photos, numberofphotos, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/developer/ProfileGui.java,ProfileGui
15 , 133
------------------------------------------------------------------------
/**
 * Shows developer's profile.
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class ProfileGui extends JFrame {
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JLabel jLabelMain;
	JButton jButtonPhoto;
	JLabel jLabelName, jLabelInstitute, jLabelDate, jLabelEmail;
    JLabel jLabelPhoto[];
    JTextArea jTextAreaInformation;
    //other variables
    int numberOfPhotos;		//number of profile photos
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public ProfileGui() {
		numberOfPhotos=7;
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jLabelMain = new JLabel();
    	jButtonPhoto = new JButton();
        jLabelName = new JLabel();
        jLabelInstitute = new JLabel();
        jLabelDate = new JLabel();
        jLabelEmail = new JLabel();
        jLabelPhoto = new JLabel[numberOfPhotos+1];	//we need one extra photo
        jTextAreaInformation = new JTextArea();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
        jLabelMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/DeveloperBackGround.jpg")));
        jLabelMain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabelMain.setBounds(0, 0, 525, 340);
        jLabelMain.setLayout(null);
        jLabelName.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelName.setText("Minhas Kamal");
        jLabelName.setToolTipText("Name");
        jLabelName.setBounds(20, 60, 120, 20);
        jLabelInstitute.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelInstitute.setText("Institute of Information Technology, DU.");
        jLabelInstitute.setToolTipText("Educational Institute");
        jLabelInstitute.setBounds(20, 90, 290, 20);
        jLabelDate.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelDate.setToolTipText("Date of Completion");
        jLabelDate.setBounds(20, 120, 200, 20);
        jLabelEmail.setFont(new java.awt.Font("Lucida Bright", 2, 15)); // NOI18N
        jLabelEmail.setText("Email: minhaskamal024@gmail.com");
        jLabelEmail.setBounds(20, 150, 260, 20);
        jButtonPhoto.setToolTipText("Click to play/pause");
        jButtonPhoto.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonPhoto.setLayout(null);
        jButtonPhoto.setBounds(328, 15, 180, 195);
        //photos
        for(int i=0; i<numberOfPhotos; i++){
        	jLabelPhoto[i]=new JLabel();
        	jLabelPhoto[i].setBounds(i*181, 0, 180, 195);
        	jLabelPhoto[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/DeveloperImg" +
        			(i+1) + ".png")));
        }
        jLabelPhoto[numberOfPhotos]=new JLabel();
    	jLabelPhoto[numberOfPhotos].setBounds(numberOfPhotos*181, 0, 180, 195);
    	jLabelPhoto[numberOfPhotos].setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/imgs/DeveloperImg" +
    			1 + ".png")));
        //text area
        jTextAreaInformation.setEditable(false);
        jTextAreaInformation.setBackground(new java.awt.Color(210, 210, 210));
        jTextAreaInformation.setColumns(20);
        jTextAreaInformation.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextAreaInformation.setRows(5);
        jTextAreaInformation.setToolTipText("My Study Life");
        jTextAreaInformation.setBorder((new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jTextAreaInformation.setBounds(10, 225, 500, 75);
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
        for(int i=0; i<=numberOfPhotos; i++){
        	jButtonPhoto.add(jLabelPhoto[i]);
        }
        //adding features to the main panel
        jLabelMain.add(jLabelName); jLabelMain.add(jLabelInstitute); jLabelMain.add(jLabelDate); jLabelMain.add(jLabelEmail);
        jLabelMain.add(jButtonPhoto); jLabelMain.add(jTextAreaInformation);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
        setIconImage(new ImageIcon(getClass().getResource("/res/imgs/DeveloperIcon.png")).getImage());
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); 
        setTitle("Developer's Profile");
        setLayout(null);
        setSize(525, 340);
        setLocation(250, 200);
        setResizable(false);
        add(jLabelMain);
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		ProfileGui gui = new ProfileGui();
		gui.setVisible(true);
	}
}

------------------------------------------------------------------------
 Profile Gui  ProfileGui   number   profile  photos   
   Shows  developer  profile 
   
      Minhas  Kamal 
  Kamal
  J Label  JLabel j Label Main  jLabelMain J Button  JButton j Button Photo  jButtonPhoto J Label  JLabel j Label Name  jLabelName j Label Institute  jLabelInstitute j Label Date  jLabelDate j Label Email  jLabelEmail J Label  JLabel j Label Photo  jLabelPhoto J Text Area  JTextArea j Text Area Information  jTextAreaInformation number Of Photos  numberOfPhotos 
------------------------------------------------------------------------
[profile, gui, profilegui, number, photos, shows, developer, minhas, kamal, label, jlabel, main, jlabelmain, button, jbutton, photo, jbuttonphoto, jlabelname, institute, jlabelinstitute, date, jlabeldate, email, jlabelemail, jlabelphoto, text, area, jtextarea, information, jtextareainformation, numberofphotos]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java,initialComponent
31 , 91
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables, placing them all to specific space on the frame and adding action
	 * listener to them. Also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																					#*******I*******#
		//**
		jPanelMain=new JPanel();
		jScrollPane=new JScrollPane();
		jTextAreaNotification=new JTextArea();
		jButtonOK = new JButton();
		// End of Initialization																			#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 													#*******S*******#
		//**
		jPanelMain.setBackground(new java.awt.Color(255, 255, 205));
        jPanelMain.setBounds(0, 0, 350, 350);
        jPanelMain.setLayout(null);
		jScrollPane.setViewportView(jTextAreaNotification);
		jScrollPane.setBounds(10, 10, 330, 330);
		jScrollPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jTextAreaNotification.setText(instruction);
		jTextAreaNotification.setForeground(new java.awt.Color(102, 53, 0));
		jTextAreaNotification.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
		jTextAreaNotification.setEditable(false);
		jTextAreaNotification.setLineWrap(true);
		jTextAreaNotification.setWrapStyleWord(true);
		jTextAreaNotification.setCaretPosition(0);
        jButtonOK.setText("OK");
        jButtonOK.setBounds(280, 360, 60, 30);
        jButtonOK.setBackground(new java.awt.Color(255, 255, 205));
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jButtonOK.getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonOK.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(java.awt.event.ActionEvent evt) {
	        	jButtonOKActionPerformed(evt);
	        }
	    });
		// End of Setting Bounds and Attributes 															#_______S_______#
		//**
		// Adding Components 																				#*******A*******#
		//**
        jPanelMain.add(jScrollPane); 
		// End of Adding Components 																		#_______A_______#
		//**Setting Criterion of the Frame**//
		setIconImage(new ImageIcon(getClass().getResource("/res/imgs/InstructionIcon.png")).getImage());
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setTitle("Instruction");
		setBounds(200, 150, 355, 430);
		setLayout(null);
		setResizable(false);
		add(jPanelMain); add(jButtonOK);
		setFocusable(true);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																					  End   Initialization 																			  Initialization																			 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  													  End   Setting  Bounds   Attributes  															 _______ S _______  _______S_______   Adding  Components  																				  End   Adding  Components  																		 _______ A _______  _______A_______    NOI 18 N  NOI18N   Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables  placing     specific  space    frame   adding  action 
	  action
	   listener     specifies  criteria    main  frame 
	  j Panel Main  jPanelMain J Panel  JPanel j Scroll Pane  jScrollPane J Scroll Pane  JScrollPane j Text Area Notification  jTextAreaNotification J Text Area  JTextArea j Button OK  jButtonOK J Button  JButton j Panel Main  jPanelMain set Background  setBackground java awt Color 255 255 205 j Panel Main  jPanelMain set Bounds  setBounds 0 0 350 350 j Panel Main  jPanelMain set Layout  setLayout j Scroll Pane  jScrollPane set Viewport View  setViewportView j Text Area Notification  jTextAreaNotification j Scroll Pane  jScrollPane set Bounds  setBounds 10 10 330 330 j Scroll Pane  jScrollPane set Border  setBorder javax swing border Soft Bevel Border  SoftBevelBorder javax swing border Bevel Border  BevelBorder LOWERED j Scroll Pane  jScrollPane set Vertical Scroll Bar Policy  setVerticalScrollBarPolicy Scroll Pane Constants  ScrollPaneConstants VERTICAL SCROLLBAR ALWAYS  VERTICAL_SCROLLBAR_ALWAYS j Text Area Notification  jTextAreaNotification set Text  setText instruction j Text Area Notification  jTextAreaNotification set Foreground  setForeground java awt Color 102 53 0 j Text Area Notification  jTextAreaNotification set Font  setFont java awt Font Tahoma 0 14 j Text Area Notification  jTextAreaNotification set Editable  setEditable j Text Area Notification  jTextAreaNotification set Line Wrap  setLineWrap j Text Area Notification  jTextAreaNotification set Wrap Style Word  setWrapStyleWord j Text Area Notification  jTextAreaNotification set Caret Position  setCaretPosition 0 j Button OK  jButtonOK set Text  setText OK j Button OK  jButtonOK set Bounds  setBounds 280 360 60 30 j Button OK  jButtonOK set Background  setBackground java awt Color 255 255 205 j Button OK  jButtonOK add Action Listener  addActionListener java awt event Action Listener  ActionListener action Performed  actionPerformed java awt event Action Event  ActionEvent evt j Button OK Action Performed  jButtonOKActionPerformed evt j Button OK  jButtonOK get Input Map  getInputMap javax swing J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put javax swing Key Stroke  KeyStroke get Key Stroke  getKeyStroke java awt event Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button OK  jButtonOK get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed java awt event Action Event  ActionEvent evt j Button OK Action Performed  jButtonOKActionPerformed evt j Panel Main  jPanelMain add j Scroll Pane  jScrollPane set Icon Image  setIconImage Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Instruction Icon  InstructionIcon png get Image  getImage set Default Close Operation  setDefaultCloseOperation DISPOSE ON CLOSE  DISPOSE_ON_CLOSE set Title  setTitle Instruction set Bounds  setBounds 200 150 355 430 set Layout  setLayout set Resizable  setResizable add j Panel Main  jPanelMain add j Button OK  jButtonOK set Focusable  setFocusable 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, noi, noi18n, criterion, frame, method, initializing, gui, variables, placing, specific, space, action, listener, specifies, criteria, main, panel, jpanelmain, jpanel, scroll, pane, jscrollpane, text, area, notification, jtextareanotification, jtextarea, button, jbuttonok, jbutton, set, background, setbackground, java, awt, color, setbounds, layout, setlayout, viewport, view, setviewportview, border, setborder, javax, swing, soft, bevel, softbevelborder, bevelborder, lowered, vertical, bar, policy, setverticalscrollbarpolicy, constants, scrollpaneconstants, scrollbar, vertical_scrollbar_always, settext, instruction, foreground, setforeground, font, setfont, tahoma, editable, seteditable, line, wrap, setlinewrap, style, word, setwrapstyleword, caret, position, setcaretposition, add, addactionlistener, event, actionlistener, performed, actionperformed, actionevent, evt, jbuttonokactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction, icon, image, seticonimage, imageicon, class, getclass, resource, getresource, res, imgs, instructionicon, png, getimage, default, close, operation, setdefaultcloseoperation, dispose, dispose_on_close, title, settitle, resizable, setresizable, focusable, setfocusable]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java,jButtonOKActionPerformed
94 , 97
------------------------------------------------------------------------
	//**
	private void jButtonOKActionPerformed(ActionEvent evt){	
		dispose();
	}

------------------------------------------------------------------------
 j Button OK Action Performed  jButtonOKActionPerformed    dispose 
------------------------------------------------------------------------
[button, action, performed, jbuttonokactionperformed, dispose]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java,main
99 , 110
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		Instruction gui = new Instruction();
		gui.setVisible(true);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Instruction gui Instruction gui set Visible  setVisible 
------------------------------------------------------------------------
[main, set, nimbus, feel, javax, swing, ui, manager, uimanager, setlookandfeel, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, instruction, gui, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java,Instruction
21 , 26
------------------------------------------------------------------------
	/***##Constructor##***/
	public Instruction() {
		//write your message here
		this.instruction = "Instruction";
		initialComponent();
	}

------------------------------------------------------------------------
 Instruction  write   message    Constructor  instruction Instruction initial Component  initialComponent 
------------------------------------------------------------------------
[instruction, write, message, constructor, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java,Instruction
27 , 30
------------------------------------------------------------------------
	public Instruction(String instruction) {
		this.instruction = instruction;
		initialComponent();
	}

------------------------------------------------------------------------
 Instruction   instruction instruction initial Component  initialComponent 
------------------------------------------------------------------------
[instruction, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/help/instruction/Instruction.java,Instruction
9 , 115
------------------------------------------------------------------------
@SuppressWarnings("serial")
public class Instruction extends JFrame {
	//**
	// Variable Declaration 																				#*******D*******#
	//**
	private JPanel jPanelMain;
	private JScrollPane jScrollPane;
	private JTextArea jTextAreaNotification;
	private JButton jButtonOK;
	//operational variables
	private String instruction;
	// End of Variable Declaration 																			#_______D_______#
	/***##Constructor##***/
	public Instruction() {
		//write your message here
		this.instruction = "Instruction";
		initialComponent();
	}
	public Instruction(String instruction) {
		this.instruction = instruction;
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables, placing them all to specific space on the frame and adding action
	 * listener to them. Also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																					#*******I*******#
		//**
		jPanelMain=new JPanel();
		jScrollPane=new JScrollPane();
		jTextAreaNotification=new JTextArea();
		jButtonOK = new JButton();
		// End of Initialization																			#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 													#*******S*******#
		//**
		jPanelMain.setBackground(new java.awt.Color(255, 255, 205));
        jPanelMain.setBounds(0, 0, 350, 350);
        jPanelMain.setLayout(null);
		jScrollPane.setViewportView(jTextAreaNotification);
		jScrollPane.setBounds(10, 10, 330, 330);
		jScrollPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jTextAreaNotification.setText(instruction);
		jTextAreaNotification.setForeground(new java.awt.Color(102, 53, 0));
		jTextAreaNotification.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
		jTextAreaNotification.setEditable(false);
		jTextAreaNotification.setLineWrap(true);
		jTextAreaNotification.setWrapStyleWord(true);
		jTextAreaNotification.setCaretPosition(0);
        jButtonOK.setText("OK");
        jButtonOK.setBounds(280, 360, 60, 30);
        jButtonOK.setBackground(new java.awt.Color(255, 255, 205));
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jButtonOK.getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonOK.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(java.awt.event.ActionEvent evt) {
	        	jButtonOKActionPerformed(evt);
	        }
	    });
		// End of Setting Bounds and Attributes 															#_______S_______#
		//**
		// Adding Components 																				#*******A*******#
		//**
        jPanelMain.add(jScrollPane); 
		// End of Adding Components 																		#_______A_______#
		//**Setting Criterion of the Frame**//
		setIconImage(new ImageIcon(getClass().getResource("/res/imgs/InstructionIcon.png")).getImage());
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setTitle("Instruction");
		setBounds(200, 150, 355, 430);
		setLayout(null);
		setResizable(false);
		add(jPanelMain); add(jButtonOK);
		setFocusable(true);
	}
	//**
	// Action Events 																						#********AE*******#
	//**
	private void jButtonOKActionPerformed(ActionEvent evt){	
		dispose();
	}
	// End of Action Events 																				#________AE_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		Instruction gui = new Instruction();
		gui.setVisible(true);
	}
	//**
	// Auxiliary Methods 																					#********AM*******#
	//**
	// End of Auxiliary Methods 																			#________AM_______#
}

------------------------------------------------------------------------
 Instruction   operational  variables   J Panel  JPanel j Panel Main  jPanelMain J Scroll Pane  JScrollPane j Scroll Pane  jScrollPane J Text Area  JTextArea j Text Area Notification  jTextAreaNotification J Button  JButton j Button OK  jButtonOK String instruction 
------------------------------------------------------------------------
[instruction, operational, variables, panel, jpanel, main, jpanelmain, scroll, pane, jscrollpane, text, area, jtextarea, notification, jtextareanotification, button, jbutton, jbuttonok, string]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/MainApp.java,main
10 , 21
------------------------------------------------------------------------
	public static void main(String args[]) {
		/**///using NIMBUS 
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
			//javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");			
			//javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
			//javax.swing.UIManager.setLookAndFeel("com.alee.laf.WebLookAndFeel");
		} catch (Exception ex) {
			//do nothing
		}
		new SimpleCalculator();
	}

------------------------------------------------------------------------
 main   NIMBUS  javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel sun java swing plaf windows Windows Look And Feel  WindowsLookAndFeel 			  javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel sun java swing plaf windows Windows Classic Look And Feel  WindowsClassicLookAndFeel  javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel alee laf Web Look And Feel  WebLookAndFeel     javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel com sun java swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Simple Calculator  SimpleCalculator 
------------------------------------------------------------------------
[main, nimbus, javax, swing, ui, manager, uimanager, set, feel, setlookandfeel, sun, java, plaf, windows, windowslookandfeel, classic, windowsclassiclookandfeel, alee, laf, web, weblookandfeel, nimbuslookandfeel, exception, simple, calculator, simplecalculator]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/MainApp.java,MainApp
9 , 22
------------------------------------------------------------------------
public class MainApp {
	public static void main(String args[]) {
		/**///using NIMBUS 
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
			//javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");			
			//javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
			//javax.swing.UIManager.setLookAndFeel("com.alee.laf.WebLookAndFeel");
		} catch (Exception ex) {
			//do nothing
		}
		new SimpleCalculator();
	}
}

------------------------------------------------------------------------
 Main App  MainApp   
------------------------------------------------------------------------
[main, app, mainapp]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,initialComponent
44 , 87
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		// GUI Initialization
		gui = new UltimateCalculatorFrameGui();
		gui.setVisible(true);
		//**
		// Assignation 																			#*******A*******#
		//**
		jCBItemMode = gui.jCBItemMode;	//number of modes
		jMenuItemInstruction =  gui.jMenuItemInstruction;
		jMenuItemDeveloper = gui.jMenuItemDeveloper;
		jMenuItemAbout = gui.jMenuItemAbout;
		modes = gui.modes;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		for(int i=0; i<modes; i++) {
			jCBItemMode[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jCBItemModeActionPerformed(evt);
	            }
	        });
		}
		jMenuItemInstruction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jMenuItemInstructionActionPerformed(evt);
            }
        });
		jMenuItemDeveloper.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jMenuItemDeveloperActionPerformed(evt);
            }
        });
		jMenuItemAbout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jMenuItemAboutActionPerformed(evt);
            }
        });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Assignation  																			   End   Assignation 																	  Assignation																	 _______ A _______  _______A_______   Adding  Action  Events    Attributes 												  Attributes												 AA  End   Adding  Action  Events    Attributes 										  Attributes										 _______ AA _______  _______AA_______  GUI  Initialization  number   modes    
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  gui Ultimate Calculator Frame Gui  UltimateCalculatorFrameGui gui set Visible  setVisible j CB Item Mode  jCBItemMode gui j CB Item Mode  jCBItemMode j Menu Item Instruction  jMenuItemInstruction gui j Menu Item Instruction  jMenuItemInstruction j Menu Item Developer  jMenuItemDeveloper gui j Menu Item Developer  jMenuItemDeveloper j Menu Item About  jMenuItemAbout gui j Menu Item About  jMenuItemAbout modes gui modes i 0 i modes i j CB Item Mode  jCBItemMode i add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j CB Item Mode Action Performed  jCBItemModeActionPerformed evt j Menu Item Instruction  jMenuItemInstruction add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Menu Item Instruction Action Performed  jMenuItemInstructionActionPerformed evt j Menu Item Developer  jMenuItemDeveloper add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Menu Item Developer Action Performed  jMenuItemDeveloperActionPerformed evt j Menu Item About  jMenuItemAbout add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Menu Item About Action Performed  jMenuItemAboutActionPerformed evt 
------------------------------------------------------------------------
[initial, component, initialcomponent, assignation, end, _______, _______a_______, adding, action, events, attributes, aa, _______aa_______, gui, initialization, number, modes, method, initializing, variables, placing, specific, space, frame, specifies, criteria, main, ultimate, calculator, ultimatecalculatorframegui, set, visible, setvisible, cb, item, mode, jcbitemmode, menu, instruction, jmenuiteminstruction, developer, jmenuitemdeveloper, jmenuitemabout, add, listener, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jcbitemmodeactionperformed, jmenuiteminstructionactionperformed, jmenuitemdeveloperactionperformed, jmenuitemaboutactionperformed]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,jCBItemModeActionPerformed
91 , 109
------------------------------------------------------------------------
	//menu items
  	private void jCBItemModeActionPerformed(ActionEvent evt){
  		if(evt.getActionCommand()=="Simple"){
  			new SimpleCalculator();
  		}else if(evt.getActionCommand()=="Advanced"){
  			new AdvancedCalculator();
  		}else if(evt.getActionCommand()=="Base"){
  			new BaseCalculator();
  		}else if(evt.getActionCommand()=="Equation"){
  			new EquationCalculator();
  		}else if(evt.getActionCommand()=="Unit Converter"){
  			new UnitConverter();
  		}else if(evt.getActionCommand()=="Date Calculator"){
  			new DateCalculator();
  		}else if(evt.getActionCommand()=="Prime Number"){
  			new PrimeNumberHunter();
  		}
  		gui.dispose();
  	}

------------------------------------------------------------------------
 j CB Item Mode Action Performed  jCBItemModeActionPerformed  menu  items   evt get Action Command  getActionCommand Simple Simple Calculator  SimpleCalculator evt get Action Command  getActionCommand Advanced Advanced Calculator  AdvancedCalculator evt get Action Command  getActionCommand Base Base Calculator  BaseCalculator evt get Action Command  getActionCommand Equation Equation Calculator  EquationCalculator evt get Action Command  getActionCommand Unit Converter Unit Converter  UnitConverter evt get Action Command  getActionCommand Date Calculator Date Calculator  DateCalculator evt get Action Command  getActionCommand Prime Number Prime Number Hunter  PrimeNumberHunter gui dispose 
------------------------------------------------------------------------
[cb, item, mode, action, performed, jcbitemmodeactionperformed, menu, items, evt, command, getactioncommand, simple, calculator, simplecalculator, advanced, advancedcalculator, base, basecalculator, equation, equationcalculator, unit, converter, unitconverter, date, datecalculator, prime, number, hunter, primenumberhunter, gui, dispose]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,jMenuItemInstructionActionPerformed
110 , 112
------------------------------------------------------------------------
  	private void jMenuItemInstructionActionPerformed(ActionEvent evt){
  		new Instruction(instruction).setVisible(true);
  	}

------------------------------------------------------------------------
 j Menu Item Instruction Action Performed  jMenuItemInstructionActionPerformed   Instruction instruction set Visible  setVisible 
------------------------------------------------------------------------
[menu, item, instruction, action, performed, jmenuiteminstructionactionperformed, set, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,jMenuItemDeveloperActionPerformed
113 , 115
------------------------------------------------------------------------
  	private void jMenuItemDeveloperActionPerformed(ActionEvent evt){
  		new Profile("17-Jan-2014");
  	}

------------------------------------------------------------------------
 j Menu Item Developer Action Performed  jMenuItemDeveloperActionPerformed   Profile 17 Jan 2014 
------------------------------------------------------------------------
[menu, item, developer, action, performed, jmenuitemdeveloperactionperformed, profile, jan]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,jMenuItemAboutActionPerformed
116 , 118
------------------------------------------------------------------------
  	private void jMenuItemAboutActionPerformed(ActionEvent e){
  		new About();
  	}

------------------------------------------------------------------------
 j Menu Item About Action Performed  jMenuItemAboutActionPerformed   About 
------------------------------------------------------------------------
[menu, item, action, performed, jmenuitemaboutactionperformed]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,main
128 , 138
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new UltimateCalculatorFrame();
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Ultimate Calculator Frame  UltimateCalculatorFrame 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, method, ultimate, calculator, frame, ultimatecalculatorframe]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,UltimateCalculatorFrame
39 , 43
------------------------------------------------------------------------
	/***##Constructor##***/
	public UltimateCalculatorFrame() {
		instruction="";
		initialComponent();
	}

------------------------------------------------------------------------
 Ultimate Calculator Frame  UltimateCalculatorFrame   Constructor  instruction initial Component  initialComponent 
------------------------------------------------------------------------
[ultimate, calculator, frame, ultimatecalculatorframe, constructor, instruction, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrame.java,UltimateCalculatorFrame
22 , 139
------------------------------------------------------------------------
/**
 * This is the super class of all calculator frames, which contains all the common features.
 * 
 * @author Minhas Kamal
 */
public class UltimateCalculatorFrame{
	// GUI Declaration
	protected UltimateCalculatorFrameGui gui;
	//**
	// Variable Declaration 																	#*******D*******#
	//**
    protected JCheckBoxMenuItem jCBItemMode[];
    private JMenuItem jMenuItemInstruction, jMenuItemDeveloper, jMenuItemAbout;
    //other variables
    private int modes;
    protected String instruction;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public UltimateCalculatorFrame() {
		instruction="";
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		// GUI Initialization
		gui = new UltimateCalculatorFrameGui();
		gui.setVisible(true);
		//**
		// Assignation 																			#*******A*******#
		//**
		jCBItemMode = gui.jCBItemMode;	//number of modes
		jMenuItemInstruction =  gui.jMenuItemInstruction;
		jMenuItemDeveloper = gui.jMenuItemDeveloper;
		jMenuItemAbout = gui.jMenuItemAbout;
		modes = gui.modes;
		// End of Assignation																	#_______A_______#
		//**
		// Adding Action Events & Other Attributes												#*******AA*******#
		//**
		for(int i=0; i<modes; i++) {
			jCBItemMode[i].addActionListener(new ActionListener() {
	            public void actionPerformed(ActionEvent evt) {
	            	jCBItemModeActionPerformed(evt);
	            }
	        });
		}
		jMenuItemInstruction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jMenuItemInstructionActionPerformed(evt);
            }
        });
		jMenuItemDeveloper.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jMenuItemDeveloperActionPerformed(evt);
            }
        });
		jMenuItemAbout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
            	jMenuItemAboutActionPerformed(evt);
            }
        });
		// End of Adding Action Events & Other Attributes										#_______AA_______#
	}
	//**
	// Action Events 																			#*******AE*******#
	//**
	//menu items
  	private void jCBItemModeActionPerformed(ActionEvent evt){
  		if(evt.getActionCommand()=="Simple"){
  			new SimpleCalculator();
  		}else if(evt.getActionCommand()=="Advanced"){
  			new AdvancedCalculator();
  		}else if(evt.getActionCommand()=="Base"){
  			new BaseCalculator();
  		}else if(evt.getActionCommand()=="Equation"){
  			new EquationCalculator();
  		}else if(evt.getActionCommand()=="Unit Converter"){
  			new UnitConverter();
  		}else if(evt.getActionCommand()=="Date Calculator"){
  			new DateCalculator();
  		}else if(evt.getActionCommand()=="Prime Number"){
  			new PrimeNumberHunter();
  		}
  		gui.dispose();
  	}
  	private void jMenuItemInstructionActionPerformed(ActionEvent evt){
  		new Instruction(instruction).setVisible(true);
  	}
  	private void jMenuItemDeveloperActionPerformed(ActionEvent evt){
  		new Profile("17-Jan-2014");
  	}
  	private void jMenuItemAboutActionPerformed(ActionEvent e){
  		new About();
  	}
	// End of Action Events 																	#_______AE_______#
	//**
	// Auxiliary Methods 																		#*******AM*******#
	//**
	// End of Auxiliary Methods 																#_______AM_______#
	//**
	// Unimplemented Methods 																	#*******UM*******#
	//**
	// End of Unimplemented Methods 															#_______UM_______#
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create */
		new UltimateCalculatorFrame();
	}
}

------------------------------------------------------------------------
 Ultimate Calculator Frame  UltimateCalculatorFrame  GUI  Declaration    variables   
      super  class    calculator  frames      common  features 
   
      Minhas  Kamal 
  Kamal
  Ultimate Calculator Frame Gui  UltimateCalculatorFrameGui gui J Check Box Menu Item  JCheckBoxMenuItem j CB Item Mode  jCBItemMode J Menu Item  JMenuItem j Menu Item Instruction  jMenuItemInstruction j Menu Item Developer  jMenuItemDeveloper j Menu Item About  jMenuItemAbout modes String instruction 
------------------------------------------------------------------------
[ultimate, calculator, frame, ultimatecalculatorframe, gui, declaration, variables, super, class, frames, common, features, minhas, kamal, ultimatecalculatorframegui, check, box, menu, item, jcheckboxmenuitem, cb, mode, jcbitemmode, jmenuitem, instruction, jmenuiteminstruction, developer, jmenuitemdeveloper, jmenuitemabout, modes, string]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrameGui.java,initialComponent
38 , 102
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jMenuBarMain = new JMenuBar();
		jMenuMode = new JMenu(); jMenuHelp = new JMenu(); jMenuAccessories = new JMenu();
		jCBItemMode = new JCheckBoxMenuItem[modes];	//number of modes
		separator = new JSeparator();
		jMenuItemInstruction =  new JMenuItem();
		jMenuItemDeveloper = new JMenuItem();
		jMenuItemAbout = new JMenuItem();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Menus
		jMenuMode.setText("Mode  ");
		jMenuHelp.setText("Help  ");
		jMenuAccessories.setText("Accessories");
		//Menu Items
		for(int i=0; i<modes; i++) {
			jCBItemMode[i] = new JCheckBoxMenuItem();
		}
		jCBItemMode[0].setText("Simple"); jCBItemMode[1].setText("Advanced"); 
			jCBItemMode[2].setText("Base"); jCBItemMode[3].setText("Equation");
			jCBItemMode[4].setText("Unit Converter"); jCBItemMode[5].setText("Date Calculator");
			jCBItemMode[6].setText("Prime Number");
		jMenuItemInstruction.setText("Instruction"); 
		jMenuItemInstruction.setIcon(new ImageIcon(getClass().getResource("/res/imgs/InstructionIcon.png"))); 
		jMenuItemDeveloper.setText("Developer");
		jMenuItemDeveloper.setIcon(new ImageIcon(getClass().getResource("/res/imgs/DeveloperIcon.png"))); 
		jMenuItemAbout.setText("About");
		jMenuItemAbout.setIcon(new ImageIcon(getClass().getResource("/res/imgs/AboutIcon.png"))); 
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding menus to the menu bar
		jMenuBarMain.add(jMenuMode);
		jMenuBarMain.add(jMenuHelp);
		//adding menu items
		for(int i=0; i<4; i++) {
			jMenuMode.add(jCBItemMode[i]);	//adding modes
		}
		jMenuMode.add(separator);
		jMenuMode.add(jMenuAccessories);
		for(int i=4; i<modes; i++) {
			jMenuAccessories.add(jCBItemMode[i]);	//adding modes
		}
		jMenuHelp.add(jMenuItemInstruction); jMenuHelp.add(jMenuItemDeveloper);
		jMenuHelp.add(jMenuItemAbout);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		setJMenuBar(jMenuBarMain);
		setTitle("Ultimate Calculator");
		setIconImage(new ImageIcon(getClass().getResource("/res/imgs/UltimateCalculatorIcon.png")).getImage());
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setLayout(null);
    	setResizable(false);
    	setBounds(230, 115, 200, 300);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																		  End   Initialization 																  Initialization																 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  										   End   Setting  Bounds   Attributes  												 _______ S _______  _______S_______   Adding  Components  																	   End   Adding  Components  															 _______ A _______  _______A_______   number   modes  Menus  Menu  Items  adding  menus    menu  bar  adding  menu  items  adding  modes  adding  modes  Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables   placing     specific  space   
	    frame    specifies  criteria    main  frame 
	  j Menu Bar Main  jMenuBarMain J Menu Bar  JMenuBar j Menu Mode  jMenuMode J Menu  JMenu j Menu Help  jMenuHelp J Menu  JMenu j Menu Accessories  jMenuAccessories J Menu  JMenu j CB Item Mode  jCBItemMode J Check Box Menu Item  JCheckBoxMenuItem modes separator J Separator  JSeparator j Menu Item Instruction  jMenuItemInstruction J Menu Item  JMenuItem j Menu Item Developer  jMenuItemDeveloper J Menu Item  JMenuItem j Menu Item About  jMenuItemAbout J Menu Item  JMenuItem j Menu Mode  jMenuMode set Text  setText Mode j Menu Help  jMenuHelp set Text  setText Help j Menu Accessories  jMenuAccessories set Text  setText Accessories i 0 i modes i j CB Item Mode  jCBItemMode i J Check Box Menu Item  JCheckBoxMenuItem j CB Item Mode  jCBItemMode 0 set Text  setText Simple j CB Item Mode  jCBItemMode 1 set Text  setText Advanced j CB Item Mode  jCBItemMode 2 set Text  setText Base j CB Item Mode  jCBItemMode 3 set Text  setText Equation j CB Item Mode  jCBItemMode 4 set Text  setText Unit Converter j CB Item Mode  jCBItemMode 5 set Text  setText Date Calculator j CB Item Mode  jCBItemMode 6 set Text  setText Prime Number j Menu Item Instruction  jMenuItemInstruction set Text  setText Instruction j Menu Item Instruction  jMenuItemInstruction set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Instruction Icon  InstructionIcon png j Menu Item Developer  jMenuItemDeveloper set Text  setText Developer j Menu Item Developer  jMenuItemDeveloper set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Developer Icon  DeveloperIcon png j Menu Item About  jMenuItemAbout set Text  setText About j Menu Item About  jMenuItemAbout set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs About Icon  AboutIcon png j Menu Bar Main  jMenuBarMain add j Menu Mode  jMenuMode j Menu Bar Main  jMenuBarMain add j Menu Help  jMenuHelp i 0 i 4 i j Menu Mode  jMenuMode add j CB Item Mode  jCBItemMode i j Menu Mode  jMenuMode add separator j Menu Mode  jMenuMode add j Menu Accessories  jMenuAccessories i 4 i modes i j Menu Accessories  jMenuAccessories add j CB Item Mode  jCBItemMode i j Menu Help  jMenuHelp add j Menu Item Instruction  jMenuItemInstruction j Menu Help  jMenuHelp add j Menu Item Developer  jMenuItemDeveloper j Menu Help  jMenuHelp add j Menu Item About  jMenuItemAbout set J Menu Bar  setJMenuBar j Menu Bar Main  jMenuBarMain set Title  setTitle Ultimate Calculator set Icon Image  setIconImage Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Ultimate Calculator Icon  UltimateCalculatorIcon png get Image  getImage set Default Close Operation  setDefaultCloseOperation javax swing Window Constants  WindowConstants EXIT ON CLOSE  EXIT_ON_CLOSE set Layout  setLayout set Resizable  setResizable set Bounds  setBounds 230 115 200 300 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, number, modes, menus, menu, items, bar, criterion, frame, method, initializing, gui, variables, placing, specific, space, specifies, criteria, main, jmenubarmain, jmenubar, mode, jmenumode, jmenu, jmenuhelp, accessories, jmenuaccessories, cb, item, jcbitemmode, check, box, jcheckboxmenuitem, separator, jseparator, instruction, jmenuiteminstruction, jmenuitem, developer, jmenuitemdeveloper, jmenuitemabout, set, text, settext, simple, advanced, base, equation, unit, converter, date, calculator, prime, icon, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, instructionicon, png, developericon, abouticon, add, setjmenubar, title, settitle, ultimate, seticonimage, ultimatecalculatoricon, getimage, default, close, operation, setdefaultcloseoperation, javax, swing, window, constants, windowconstants, exit, exit_on_close, layout, setlayout, resizable, setresizable, setbounds]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrameGui.java,main
103 , 114
------------------------------------------------------------------------
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		UltimateCalculatorFrameGui gui = new UltimateCalculatorFrameGui();
		gui.setVisible(true);
	}

------------------------------------------------------------------------
 main   Set   NIMBUS    feel  
		try  
			 UI Manager  
			UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form    Main  Method   UI Manager  UIManager set Look And Feel  setLookAndFeel javax swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Ultimate Calculator Frame Gui  UltimateCalculatorFrameGui gui Ultimate Calculator Frame Gui  UltimateCalculatorFrameGui gui set Visible  setVisible 
------------------------------------------------------------------------
[main, set, nimbus, feel, ui, manager, uimanager, setlookandfeel, javax, swing, plaf, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, method, ultimate, calculator, frame, gui, ultimatecalculatorframegui, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrameGui.java,UltimateCalculatorFrameGui
33 , 37
------------------------------------------------------------------------
	/***##Constructor##***/
	public UltimateCalculatorFrameGui() {
		modes=7;
		initialComponent();
	}

------------------------------------------------------------------------
 Ultimate Calculator Frame Gui  UltimateCalculatorFrameGui   Constructor  modes 7 initial Component  initialComponent 
------------------------------------------------------------------------
[ultimate, calculator, frame, gui, ultimatecalculatorframegui, constructor, modes, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/mainFrame/UltimateCalculatorFrameGui.java,UltimateCalculatorFrameGui
15 , 115
------------------------------------------------------------------------
/**
 * This is the super class of all calculator frames, which contains all the common features.
 * 
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class UltimateCalculatorFrameGui extends JFrame {
	//**
	// Variable Declaration 																	#*******D*******#
	//**
	JMenuBar jMenuBarMain;
	JMenu jMenuMode, jMenuHelp, jMenuAccessories;
    JCheckBoxMenuItem jCBItemMode[];
    JSeparator separator;
    JMenuItem jMenuItemInstruction, jMenuItemDeveloper, jMenuItemAbout;
    //other variables
    int modes;
	// End of Variable Declaration 																#_______D_______#
	/***##Constructor##***/
	public UltimateCalculatorFrameGui() {
		modes=7;
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables and placing them all to specific space on 
	 * the frame. It also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																		#*******I*******#
		//**
		jMenuBarMain = new JMenuBar();
		jMenuMode = new JMenu(); jMenuHelp = new JMenu(); jMenuAccessories = new JMenu();
		jCBItemMode = new JCheckBoxMenuItem[modes];	//number of modes
		separator = new JSeparator();
		jMenuItemInstruction =  new JMenuItem();
		jMenuItemDeveloper = new JMenuItem();
		jMenuItemAbout = new JMenuItem();
		// End of Initialization																#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 										#*******S*******#
		//**
		//Menus
		jMenuMode.setText("Mode  ");
		jMenuHelp.setText("Help  ");
		jMenuAccessories.setText("Accessories");
		//Menu Items
		for(int i=0; i<modes; i++) {
			jCBItemMode[i] = new JCheckBoxMenuItem();
		}
		jCBItemMode[0].setText("Simple"); jCBItemMode[1].setText("Advanced"); 
			jCBItemMode[2].setText("Base"); jCBItemMode[3].setText("Equation");
			jCBItemMode[4].setText("Unit Converter"); jCBItemMode[5].setText("Date Calculator");
			jCBItemMode[6].setText("Prime Number");
		jMenuItemInstruction.setText("Instruction"); 
		jMenuItemInstruction.setIcon(new ImageIcon(getClass().getResource("/res/imgs/InstructionIcon.png"))); 
		jMenuItemDeveloper.setText("Developer");
		jMenuItemDeveloper.setIcon(new ImageIcon(getClass().getResource("/res/imgs/DeveloperIcon.png"))); 
		jMenuItemAbout.setText("About");
		jMenuItemAbout.setIcon(new ImageIcon(getClass().getResource("/res/imgs/AboutIcon.png"))); 
		// End of Setting Bounds and Attributes 												#_______S_______#
		//**
		// Adding Components 																	#*******A*******#
		//**
		//adding menus to the menu bar
		jMenuBarMain.add(jMenuMode);
		jMenuBarMain.add(jMenuHelp);
		//adding menu items
		for(int i=0; i<4; i++) {
			jMenuMode.add(jCBItemMode[i]);	//adding modes
		}
		jMenuMode.add(separator);
		jMenuMode.add(jMenuAccessories);
		for(int i=4; i<modes; i++) {
			jMenuAccessories.add(jCBItemMode[i]);	//adding modes
		}
		jMenuHelp.add(jMenuItemInstruction); jMenuHelp.add(jMenuItemDeveloper);
		jMenuHelp.add(jMenuItemAbout);
		// End of Adding Components 															#_______A_______#
		//**Setting Criterion of the Frame**//
		setJMenuBar(jMenuBarMain);
		setTitle("Ultimate Calculator");
		setIconImage(new ImageIcon(getClass().getResource("/res/imgs/UltimateCalculatorIcon.png")).getImage());
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setLayout(null);
    	setResizable(false);
    	setBounds(230, 115, 200, 300);
	}
	/********* Main Method *********/
	public static void main(String args[]) {
		/*// Set the NIMBUS look and feel //*/
		try {
			UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		UltimateCalculatorFrameGui gui = new UltimateCalculatorFrameGui();
		gui.setVisible(true);
	}
}

------------------------------------------------------------------------
 Ultimate Calculator Frame Gui  UltimateCalculatorFrameGui    variables   
      super  class    calculator  frames      common  features 
   
      Minhas  Kamal 
  Kamal
  J Menu Bar  JMenuBar j Menu Bar Main  jMenuBarMain J Menu  JMenu j Menu Mode  jMenuMode j Menu Help  jMenuHelp j Menu Accessories  jMenuAccessories J Check Box Menu Item  JCheckBoxMenuItem j CB Item Mode  jCBItemMode J Separator  JSeparator separator J Menu Item  JMenuItem j Menu Item Instruction  jMenuItemInstruction j Menu Item Developer  jMenuItemDeveloper j Menu Item About  jMenuItemAbout modes 
------------------------------------------------------------------------
[ultimate, calculator, frame, gui, ultimatecalculatorframegui, variables, super, class, frames, common, features, minhas, kamal, menu, bar, jmenubar, main, jmenubarmain, jmenu, mode, jmenumode, jmenuhelp, accessories, jmenuaccessories, check, box, item, jcheckboxmenuitem, cb, jcbitemmode, separator, jseparator, jmenuitem, instruction, jmenuiteminstruction, developer, jmenuitemdeveloper, jmenuitemabout, modes]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,initialComponent
40 , 124
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables, placing them all to specific space on the frame and adding action
	 * listener to them. Also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																					#*******I*******#
		//**
		jLabelMain = new JLabel();
		jLabelIcon = new JLabel();
		jLabelText1 = new JLabel();	
		jLabelText2 = new JLabel();	
		jLabelText3 = new JLabel();	
		jButtonYes = new JButton();
		jButtonNo = new JButton();
		// End of Initialization																			#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 													#*******S*******#
		//**
		jLabelMain.setIcon(new ImageIcon(getClass().getResource("/res/imgs/ConfirmBackground.png")));
        jLabelMain.setBounds(0, 0, 400, 200);
        jLabelMain.setLayout(null);
        jLabelIcon.setBounds(10, 33, 70, 70);
       	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/ConfirmQuestion.png")));
        jLabelText1.setBounds(100, 40, 280, 25);
        jLabelText1.setFont(new Font("Lucida", 0, 16));
        jLabelText1.setText(message[0]);
        jLabelText2.setBounds(100, 65, 280, 25);
        jLabelText2.setFont(new Font("Lucida", 0, 16));
        jLabelText2.setText(message[1]);        
        jLabelText3.setBounds(100, 90, 280, 25);
        jLabelText3.setFont(new Font("Lucida", 0, 16));
        jLabelText3.setText(message[2]);        
        jButtonYes.setText("Yes");
        jButtonYes.setBounds(240, 130, 60, 30);
        jButtonYes.setBackground(new Color(212, 227, 250));
        jButtonYes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonYesActionPerformed(evt);
            }
        });
        jButtonYes.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonYes.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonYesActionPerformed(evt);
	        }
	    });
	    jButtonNo.setText("No");
	    jButtonNo.setBounds(310, 130, 60, 30);
	    jButtonNo.setBackground(new Color(212, 227, 250));
	    jButtonNo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonNoActionPerformed(evt);
            }
        });
	    jButtonNo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_N,0), "N_pressed");
	    jButtonNo.getActionMap().put("ENTER_N", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNoActionPerformed(evt);
	        }
	    });
		// End of Setting Bounds and Attributes 															#_______S_______#
		//**
		// Adding Components 																				#*******A*******#
		//**
		jLabelMain.add(jLabelIcon);
		jLabelMain.add(jLabelText1);
		jLabelMain.add(jLabelText2);
		jLabelMain.add(jLabelText3);
		jLabelMain.add(jButtonYes);
		jLabelMain.add(jButtonNo);
		// End of Adding Components 																		#_______A_______#
		//**Setting Criterion of the Frame**//
		setIconImage(new ImageIcon(getClass().getResource("")).getImage());
		setBounds(240, 200, 400, 200);
		setTitle("Confirm");
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setLayout(null);
		setResizable(false);
		setModal(true);
		add(jLabelMain);
		setVisible(true);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																					  End   Initialization 																			  Initialization																			 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  													  End   Setting  Bounds   Attributes  															 _______ S _______  _______S_______   Adding  Components  																				  End   Adding  Components  																		 _______ A _______  _______A_______     Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables  placing     specific  space    frame   adding  action 
	  action
	   listener     specifies  criteria    main  frame 
	  j Label Main  jLabelMain J Label  JLabel j Label Icon  jLabelIcon J Label  JLabel j Label Text 1  jLabelText1 J Label  JLabel j Label Text 2  jLabelText2 J Label  JLabel j Label Text 3  jLabelText3 J Label  JLabel j Button Yes  jButtonYes J Button  JButton j Button No  jButtonNo J Button  JButton j Label Main  jLabelMain set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Confirm Background  ConfirmBackground png j Label Main  jLabelMain set Bounds  setBounds 0 0 400 200 j Label Main  jLabelMain set Layout  setLayout j Label Icon  jLabelIcon set Bounds  setBounds 10 33 70 70 j Label Icon  jLabelIcon set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Confirm Question  ConfirmQuestion png j Label Text 1  jLabelText1 set Bounds  setBounds 100 40 280 25 j Label Text 1  jLabelText1 set Font  setFont Font Lucida 0 16 j Label Text 1  jLabelText1 set Text  setText message 0 j Label Text 2  jLabelText2 set Bounds  setBounds 100 65 280 25 j Label Text 2  jLabelText2 set Font  setFont Font Lucida 0 16 j Label Text 2  jLabelText2 set Text  setText message 1 j Label Text 3  jLabelText3 set Bounds  setBounds 100 90 280 25 j Label Text 3  jLabelText3 set Font  setFont Font Lucida 0 16 j Label Text 3  jLabelText3 set Text  setText message 2 j Button Yes  jButtonYes set Text  setText Yes j Button Yes  jButtonYes set Bounds  setBounds 240 130 60 30 j Button Yes  jButtonYes set Background  setBackground Color 212 227 250 j Button Yes  jButtonYes add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button Yes Action Performed  jButtonYesActionPerformed evt j Button Yes  jButtonYes get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button Yes  jButtonYes get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button Yes Action Performed  jButtonYesActionPerformed evt j Button No  jButtonNo set Text  setText No j Button No  jButtonNo set Bounds  setBounds 310 130 60 30 j Button No  jButtonNo set Background  setBackground Color 212 227 250 j Button No  jButtonNo add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button No Action Performed  jButtonNoActionPerformed evt j Button No  jButtonNo get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK N  VK_N 0 N _pressed  N_pressed j Button No  jButtonNo get Action Map  getActionMap put ENTER N  ENTER_N Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button No Action Performed  jButtonNoActionPerformed evt j Label Main  jLabelMain add j Label Icon  jLabelIcon j Label Main  jLabelMain add j Label Text 1  jLabelText1 j Label Main  jLabelMain add j Label Text 2  jLabelText2 j Label Main  jLabelMain add j Label Text 3  jLabelText3 j Label Main  jLabelMain add j Button Yes  jButtonYes j Label Main  jLabelMain add j Button No  jButtonNo set Icon Image  setIconImage Image Icon  ImageIcon get Class  getClass get Resource  getResource get Image  getImage set Bounds  setBounds 240 200 400 200 set Title  setTitle Confirm set Default Close Operation  setDefaultCloseOperation DISPOSE ON CLOSE  DISPOSE_ON_CLOSE set Layout  setLayout set Resizable  setResizable set Modal  setModal add j Label Main  jLabelMain set Visible  setVisible 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, criterion, frame, method, initializing, gui, variables, placing, specific, space, action, listener, specifies, criteria, main, label, jlabelmain, jlabel, icon, jlabelicon, text, jlabeltext1, jlabeltext2, jlabeltext3, button, jbuttonyes, jbutton, jbuttonno, set, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, confirm, background, confirmbackground, png, setbounds, layout, setlayout, question, confirmquestion, font, setfont, lucida, settext, message, setbackground, color, add, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttonyesactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction, jbuttonnoactionperformed, vk_n, n_pressed, enter_n, seticonimage, getimage, title, settitle, default, close, operation, setdefaultcloseoperation, dispose, dispose_on_close, resizable, setresizable, modal, setmodal, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,jButtonYesActionPerformed
127 , 131
------------------------------------------------------------------------
	//**
	private void jButtonYesActionPerformed(ActionEvent evt){
		decision=1;
		dispose();
	}

------------------------------------------------------------------------
 j Button Yes Action Performed  jButtonYesActionPerformed    decision 1 dispose 
------------------------------------------------------------------------
[button, action, performed, jbuttonyesactionperformed, decision, dispose]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,jButtonNoActionPerformed
132 , 135
------------------------------------------------------------------------
	private void jButtonNoActionPerformed(ActionEvent evt){
		decision=0;
		dispose();
	}

------------------------------------------------------------------------
 j Button No Action Performed  jButtonNoActionPerformed   decision 0 dispose 
------------------------------------------------------------------------
[button, action, performed, jbuttonnoactionperformed, decision, dispose]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,main
137 , 147
------------------------------------------------------------------------
	/**///Main Method
	public static void main(String args[]) {
		/*// Set the Web look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		new Confirm("Hi You are grounded for your \ninsignificant and nonsence \nactions.");
	}

------------------------------------------------------------------------
 main  Main  Method   Set   Web    feel  
		try  
			javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel sun java swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form   javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel com sun java swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Confirm Hi You are grounded your ninsignificant and nonsence nactions 
------------------------------------------------------------------------
[main, method, set, web, feel, javax, swing, ui, manager, uimanager, setlookandfeel, sun, java, plaf, nimbus, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, confirm, grounded, ninsignificant, nonsence, nactions]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,getMessage
151 , 167
------------------------------------------------------------------------
	//**
	private String[] getMessage(String message){
		String[] messages = new String[3];
		if(message.contains("\n")){
			messages[0] = message.substring(0, message.indexOf("\n"));
			message = message.substring(message.indexOf("\n")+1);
			if(message.contains("\n")){
				messages[1] = message.substring(0, message.indexOf("\n"));
				messages[2] = message.substring(message.indexOf("\n")+1);
			}else{
				messages[1] = message;
			}
		}else{
			messages[0] = message;
		}
		return messages;
	}

------------------------------------------------------------------------
 get Message  getMessage    String messages String 3 message contains n messages 0 message substring 0 message index Of  indexOf n message message substring message index Of  indexOf n 1 message contains n messages 1 message substring 0 message index Of  indexOf n messages 2 message substring message index Of  indexOf n 1 messages 1 message messages 0 message messages 
------------------------------------------------------------------------
[message, getmessage, string, messages, substring, index, indexof]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,getDecision
168 , 170
------------------------------------------------------------------------
	public static int getDecision(){
		return decision;
	}

------------------------------------------------------------------------
 get Decision  getDecision   decision 
------------------------------------------------------------------------
[decision, getdecision]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,Confirm
30 , 39
------------------------------------------------------------------------
	/**
	 * Constructor.
	 * Shows message to the user & takes confirmation over an important decision.
	 * @param message main part of message to be shown
	 */
	public Confirm(String message) {
		this.message = getMessage("Are you sure?\n" + message);
		decision=0;
		initialComponent();
	}

------------------------------------------------------------------------
 Confirm   
	   Constructor 
	   Shows  message    user   takes  confirmation    important  decision 
	      message  main  part   message    shown 
	  shown
	  message get Message  getMessage Are you sure n message decision 0 initial Component  initialComponent 
------------------------------------------------------------------------
[confirm, constructor, shows, message, user, takes, confirmation, important, decision, main, part, shown, getmessage, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/confirm/Confirm.java,Confirm
12 , 172
------------------------------------------------------------------------
/**
 * Shows a confirmation dialog.
 *
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class Confirm extends JDialog {
	//**
	// Variable Declaration 																				#*******D*******#
	//**
	private JLabel jLabelMain;
	private JLabel jLabelIcon;
	private JLabel jLabelText1, jLabelText2, jLabelText3;	
	private JButton jButtonYes, jButtonNo;
	//other variables
	private String[] message;
	private static int decision;	//0-No, 1-Yes
	// End of Variable Declaration 																			#_______D_______#
	/**
	 * Constructor.
	 * Shows message to the user & takes confirmation over an important decision.
	 * @param message main part of message to be shown
	 */
	public Confirm(String message) {
		this.message = getMessage("Are you sure?\n" + message);
		decision=0;
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables, placing them all to specific space on the frame and adding action
	 * listener to them. Also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																					#*******I*******#
		//**
		jLabelMain = new JLabel();
		jLabelIcon = new JLabel();
		jLabelText1 = new JLabel();	
		jLabelText2 = new JLabel();	
		jLabelText3 = new JLabel();	
		jButtonYes = new JButton();
		jButtonNo = new JButton();
		// End of Initialization																			#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 													#*******S*******#
		//**
		jLabelMain.setIcon(new ImageIcon(getClass().getResource("/res/imgs/ConfirmBackground.png")));
        jLabelMain.setBounds(0, 0, 400, 200);
        jLabelMain.setLayout(null);
        jLabelIcon.setBounds(10, 33, 70, 70);
       	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/ConfirmQuestion.png")));
        jLabelText1.setBounds(100, 40, 280, 25);
        jLabelText1.setFont(new Font("Lucida", 0, 16));
        jLabelText1.setText(message[0]);
        jLabelText2.setBounds(100, 65, 280, 25);
        jLabelText2.setFont(new Font("Lucida", 0, 16));
        jLabelText2.setText(message[1]);        
        jLabelText3.setBounds(100, 90, 280, 25);
        jLabelText3.setFont(new Font("Lucida", 0, 16));
        jLabelText3.setText(message[2]);        
        jButtonYes.setText("Yes");
        jButtonYes.setBounds(240, 130, 60, 30);
        jButtonYes.setBackground(new Color(212, 227, 250));
        jButtonYes.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonYesActionPerformed(evt);
            }
        });
        jButtonYes.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonYes.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonYesActionPerformed(evt);
	        }
	    });
	    jButtonNo.setText("No");
	    jButtonNo.setBounds(310, 130, 60, 30);
	    jButtonNo.setBackground(new Color(212, 227, 250));
	    jButtonNo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonNoActionPerformed(evt);
            }
        });
	    jButtonNo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_N,0), "N_pressed");
	    jButtonNo.getActionMap().put("ENTER_N", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonNoActionPerformed(evt);
	        }
	    });
		// End of Setting Bounds and Attributes 															#_______S_______#
		//**
		// Adding Components 																				#*******A*******#
		//**
		jLabelMain.add(jLabelIcon);
		jLabelMain.add(jLabelText1);
		jLabelMain.add(jLabelText2);
		jLabelMain.add(jLabelText3);
		jLabelMain.add(jButtonYes);
		jLabelMain.add(jButtonNo);
		// End of Adding Components 																		#_______A_______#
		//**Setting Criterion of the Frame**//
		setIconImage(new ImageIcon(getClass().getResource("")).getImage());
		setBounds(240, 200, 400, 200);
		setTitle("Confirm");
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setLayout(null);
		setResizable(false);
		setModal(true);
		add(jLabelMain);
		setVisible(true);
	}
	//**
	// Action Events 																						#********AE*******#
	//**
	private void jButtonYesActionPerformed(ActionEvent evt){
		decision=1;
		dispose();
	}
	private void jButtonNoActionPerformed(ActionEvent evt){
		decision=0;
		dispose();
	}
	// End of Action Events 																				#________AE_______#
	/**///Main Method
	public static void main(String args[]) {
		/*// Set the Web look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		new Confirm("Hi You are grounded for your \ninsignificant and nonsence \nactions.");
	}
	/**/
	//**
	// Auxiliary Methods 																					#********AM*******#
	//**
	private String[] getMessage(String message){
		String[] messages = new String[3];
		if(message.contains("\n")){
			messages[0] = message.substring(0, message.indexOf("\n"));
			message = message.substring(message.indexOf("\n")+1);
			if(message.contains("\n")){
				messages[1] = message.substring(0, message.indexOf("\n"));
				messages[2] = message.substring(message.indexOf("\n")+1);
			}else{
				messages[1] = message;
			}
		}else{
			messages[0] = message;
		}
		return messages;
	}
	public static int getDecision(){
		return decision;
	}
	// End of Auxiliary Methods 																			#________AM_______#
}

------------------------------------------------------------------------
 Confirm    variables     
   Shows   confirmation  dialog 
  
      Minhas  Kamal 
  Kamal
  J Label  JLabel j Label Main  jLabelMain J Label  JLabel j Label Icon  jLabelIcon J Label  JLabel j Label Text 1  jLabelText1 j Label Text 2  jLabelText2 j Label Text 3  jLabelText3 J Button  JButton j Button Yes  jButtonYes j Button No  jButtonNo String message decision 
------------------------------------------------------------------------
[confirm, variables, shows, confirmation, dialog, minhas, kamal, label, jlabel, main, jlabelmain, icon, jlabelicon, text, jlabeltext1, jlabeltext2, jlabeltext3, button, jbutton, jbuttonyes, jbuttonno, string, message, decision]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java,initialComponent
46 , 116
------------------------------------------------------------------------
	/**
	 * Method for Initializing all the GUI variables, placing them all to specific space on the frame and adding action
	 * listener to them. Also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																					#*******I*******#
		//**
		jLabelMain = new JLabel();
		jLabelIcon = new JLabel();
		jLabelText = new JLabel[3];	
		jButtonOK = new JButton();
		// End of Initialization																			#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 													#*******S*******#
		//**
		jLabelMain.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageBackground.png")));
        jLabelMain.setBounds(0, 0, 400, 200);
        jLabelMain.setLayout(null);
        jLabelIcon.setBounds(10, 33, 70, 70);
        if(messageType==CONFIRMATION_MESSAGE){
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageConfirmation.png")));
        }else if(messageType==WARNING_MESSAGE){
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageWarning.png")));
        }else if(messageType==ERROR_MESSAGE){
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageError.png")));
        }else {
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageNormal.png")));
        }
        for(int i=0; i<3; i++){
        	jLabelText[i] = new JLabel();
	        jLabelText[i].setBounds(100, 40+i*25, 280, 25);
	        jLabelText[i].setFont(new Font("Lucida", 0, 16));
	        jLabelText[i].setText(message[i]);
		}
        jButtonOK.setText("OK");
        jButtonOK.setBounds(310, 130, 60, 30);
        jButtonOK.setBackground(new Color(212, 227, 250));
        jButtonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jButtonOK.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonOK.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOKActionPerformed(evt);
	        }
	    });
		// End of Setting Bounds and Attributes 															#_______S_______#
		//**
		// Adding Components 																				#*******A*******#
		//**
		jLabelMain.add(jLabelIcon);
		jLabelMain.add(jLabelText[0]);
		jLabelMain.add(jLabelText[1]);
		jLabelMain.add(jLabelText[2]);
		jLabelMain.add(jButtonOK);
		// End of Adding Components 																		#_______A_______#
		//**Setting Criterion of the Frame**//
		setIconImage(new ImageIcon(getClass().getResource("")).getImage());
		setBounds(240, 200, 400, 200);
		setTitle("Message");
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setLayout(null);
		setResizable(false);
		setModal(true);
		add(jLabelMain);
		setVisible(true);
	}

------------------------------------------------------------------------
 initial Component  initialComponent   Initialization  																					  End   Initialization 																			  Initialization																			 _______ I _______  _______I_______   Setting  Bounds   Attributes    Elements  													  End   Setting  Bounds   Attributes  															 _______ S _______  _______S_______   Adding  Components  																				  End   Adding  Components  																		 _______ A _______  _______A_______     Setting  Criterion    Frame   
	   Method   Initializing    GUI  variables  placing     specific  space    frame   adding  action 
	  action
	   listener     specifies  criteria    main  frame 
	  j Label Main  jLabelMain J Label  JLabel j Label Icon  jLabelIcon J Label  JLabel j Label Text  jLabelText J Label  JLabel 3 j Button OK  jButtonOK J Button  JButton j Label Main  jLabelMain set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Message Background  MessageBackground png j Label Main  jLabelMain set Bounds  setBounds 0 0 400 200 j Label Main  jLabelMain set Layout  setLayout j Label Icon  jLabelIcon set Bounds  setBounds 10 33 70 70 message Type  messageType CONFIRMATION MESSAGE  CONFIRMATION_MESSAGE j Label Icon  jLabelIcon set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Message Confirmation  MessageConfirmation png message Type  messageType WARNING MESSAGE  WARNING_MESSAGE j Label Icon  jLabelIcon set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Message Warning  MessageWarning png message Type  messageType ERROR MESSAGE  ERROR_MESSAGE j Label Icon  jLabelIcon set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Message Error  MessageError png j Label Icon  jLabelIcon set Icon  setIcon Image Icon  ImageIcon get Class  getClass get Resource  getResource res imgs Message Normal  MessageNormal png i 0 i 3 i j Label Text  jLabelText i J Label  JLabel j Label Text  jLabelText i set Bounds  setBounds 100 40 i 25 280 25 j Label Text  jLabelText i set Font  setFont Font Lucida 0 16 j Label Text  jLabelText i set Text  setText message i j Button OK  jButtonOK set Text  setText OK j Button OK  jButtonOK set Bounds  setBounds 310 130 60 30 j Button OK  jButtonOK set Background  setBackground Color 212 227 250 j Button OK  jButtonOK add Action Listener  addActionListener Action Listener  ActionListener action Performed  actionPerformed Action Event  ActionEvent evt j Button OK Action Performed  jButtonOKActionPerformed evt j Button OK  jButtonOK get Input Map  getInputMap J Component  JComponent WHEN IN FOCUSED WINDOW  WHEN_IN_FOCUSED_WINDOW put Key Stroke  KeyStroke get Key Stroke  getKeyStroke Key Event  KeyEvent VK ENTER  VK_ENTER 0 ENTER _pressed  ENTER_pressed j Button OK  jButtonOK get Action Map  getActionMap put ENTER _pressed  ENTER_pressed Abstract Action  AbstractAction action Performed  actionPerformed Action Event  ActionEvent evt j Button OK Action Performed  jButtonOKActionPerformed evt j Label Main  jLabelMain add j Label Icon  jLabelIcon j Label Main  jLabelMain add j Label Text  jLabelText 0 j Label Main  jLabelMain add j Label Text  jLabelText 1 j Label Main  jLabelMain add j Label Text  jLabelText 2 j Label Main  jLabelMain add j Button OK  jButtonOK set Icon Image  setIconImage Image Icon  ImageIcon get Class  getClass get Resource  getResource get Image  getImage set Bounds  setBounds 240 200 400 200 set Title  setTitle Message set Default Close Operation  setDefaultCloseOperation DISPOSE ON CLOSE  DISPOSE_ON_CLOSE set Layout  setLayout set Resizable  setResizable set Modal  setModal add j Label Main  jLabelMain set Visible  setVisible 
------------------------------------------------------------------------
[initial, component, initialcomponent, initialization, end, _______, _______i_______, setting, bounds, attributes, elements, _______s_______, adding, components, _______a_______, criterion, frame, method, initializing, gui, variables, placing, specific, space, action, listener, specifies, criteria, main, label, jlabelmain, jlabel, icon, jlabelicon, text, jlabeltext, button, jbuttonok, jbutton, set, seticon, image, imageicon, class, getclass, resource, getresource, res, imgs, message, background, messagebackground, png, setbounds, layout, setlayout, type, messagetype, confirmation, confirmation_message, messageconfirmation, warning, warning_message, messagewarning, error, error_message, messageerror, normal, messagenormal, font, setfont, lucida, settext, setbackground, color, add, addactionlistener, actionlistener, performed, actionperformed, event, actionevent, evt, jbuttonokactionperformed, input, map, getinputmap, jcomponent, focused, window, when_in_focused_window, put, key, stroke, keystroke, getkeystroke, keyevent, vk, enter, vk_enter, _pressed, enter_pressed, getactionmap, abstract, abstractaction, seticonimage, getimage, title, settitle, default, close, operation, setdefaultcloseoperation, dispose, dispose_on_close, resizable, setresizable, modal, setmodal, visible, setvisible]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java,jButtonOKActionPerformed
119 , 122
------------------------------------------------------------------------
	//**
	private void jButtonOKActionPerformed(ActionEvent evt){
		dispose();
	}

------------------------------------------------------------------------
 j Button OK Action Performed  jButtonOKActionPerformed    dispose 
------------------------------------------------------------------------
[button, action, performed, jbuttonokactionperformed, dispose]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java,main
124 , 134
------------------------------------------------------------------------
	/**///Main Method
	public static void main(String args[]) {
		/*// Set the Web look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		new Message("Hi You are grounded for your \ninsignificant and nonsence \nactions.", Message.CONFIRMATION_MESSAGE);
	}

------------------------------------------------------------------------
 main  Main  Method   Set   Web    feel  
		try  
			javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel sun java swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel 
		  catch  Exception   
			     operation   unsuccessful 
		  unsuccessful
		 
		  Create   display   form   javax swing UI Manager  UIManager set Look And Feel  setLookAndFeel com sun java swing plaf nimbus Nimbus Look And Feel  NimbusLookAndFeel Exception ex Message Hi You are grounded your ninsignificant and nonsence nactions Message CONFIRMATION MESSAGE  CONFIRMATION_MESSAGE 
------------------------------------------------------------------------
[main, method, set, web, feel, javax, swing, ui, manager, uimanager, setlookandfeel, sun, java, plaf, nimbus, nimbuslookandfeel, catch, exception, operation, unsuccessful, create, display, form, message, grounded, ninsignificant, nonsence, nactions, confirmation, confirmation_message]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java,getMessage
138 , 154
------------------------------------------------------------------------
	//**
	private String[] getMessage(String message){
		String[] messages = new String[3];
		if(message.contains("\n")){
			messages[0] = message.substring(0, message.indexOf("\n"));
			message = message.substring(message.indexOf("\n")+1);
			if(message.contains("\n")){
				messages[1] = message.substring(0, message.indexOf("\n"));
				messages[2] = message.substring(message.indexOf("\n")+1);
			}else{
				messages[1] = message;
			}
		}else{
			messages[0] = message;
		}
		return messages;
	}

------------------------------------------------------------------------
 get Message  getMessage    String messages String 3 message contains n messages 0 message substring 0 message index Of  indexOf n message message substring message index Of  indexOf n 1 message contains n messages 1 message substring 0 message index Of  indexOf n messages 2 message substring message index Of  indexOf n 1 messages 1 message messages 0 message messages 
------------------------------------------------------------------------
[message, getmessage, string, messages, substring, index, indexof]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java,Message
34 , 45
------------------------------------------------------------------------
	/**
	 * Constructor.
	 * Shows message to the user to guide or give information of the operation status.
	 * @param message main part of message to be shown
	 * @param messageType type of message, like- plain message(0), confirmation message(1), warning message(210) and
	 * 	error message(420)
	 */
	public Message(String message, int messageType) {
		this.message = getMessage(message);
		this.messageType=messageType;
		initialComponent();
	}

------------------------------------------------------------------------
 Message   
	   Constructor 
	   Shows  message    user   guide   give  information    operation  status 
	      message  main  part   message    shown 
	  shown
	      message Type  messageType  type   message   plain  message  confirmation  message  warning  message 210  and 
	  and
	   	error  message 420 
	  message get Message  getMessage message message Type  messageType message Type  messageType initial Component  initialComponent 
------------------------------------------------------------------------
[message, constructor, shows, user, guide, give, information, operation, status, main, part, shown, type, messagetype, plain, confirmation, warning, error, getmessage, initial, component, initialcomponent]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/notifications/message/Message.java,Message
12 , 156
------------------------------------------------------------------------
/**
 * Shows different types of messages.
 *
 * @author Minhas Kamal
 */
@SuppressWarnings("serial")
public class Message extends JDialog {
	public static final int NORMAL_MESSAGE = 0;
	public static final int CONFIRMATION_MESSAGE = 1;
	public static final int WARNING_MESSAGE = 210;
	public static final int ERROR_MESSAGE = 420;
	//**
	// Variable Declaration 																				#*******D*******#
	//**
	private JLabel jLabelMain;
	private JLabel jLabelIcon;
	private JLabel[] jLabelText;	
	private JButton jButtonOK;
	//other variables
	private String[] message;
	private int messageType;
	// End of Variable Declaration 																			#_______D_______#
	/**
	 * Constructor.
	 * Shows message to the user to guide or give information of the operation status.
	 * @param message main part of message to be shown
	 * @param messageType type of message, like- plain message(0), confirmation message(1), warning message(210) and
	 * 	error message(420)
	 */
	public Message(String message, int messageType) {
		this.message = getMessage(message);
		this.messageType=messageType;
		initialComponent();
	}
	/**
	 * Method for Initializing all the GUI variables, placing them all to specific space on the frame and adding action
	 * listener to them. Also specifies criteria of the main frame.
	 */
	private void initialComponent() {
		//**
		// Initialization 																					#*******I*******#
		//**
		jLabelMain = new JLabel();
		jLabelIcon = new JLabel();
		jLabelText = new JLabel[3];	
		jButtonOK = new JButton();
		// End of Initialization																			#_______I_______#
		//**
		// Setting Bounds and Attributes of the Elements 													#*******S*******#
		//**
		jLabelMain.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageBackground.png")));
        jLabelMain.setBounds(0, 0, 400, 200);
        jLabelMain.setLayout(null);
        jLabelIcon.setBounds(10, 33, 70, 70);
        if(messageType==CONFIRMATION_MESSAGE){
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageConfirmation.png")));
        }else if(messageType==WARNING_MESSAGE){
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageWarning.png")));
        }else if(messageType==ERROR_MESSAGE){
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageError.png")));
        }else {
        	jLabelIcon.setIcon(new ImageIcon(getClass().getResource("/res/imgs/MessageNormal.png")));
        }
        for(int i=0; i<3; i++){
        	jLabelText[i] = new JLabel();
	        jLabelText[i].setBounds(100, 40+i*25, 280, 25);
	        jLabelText[i].setFont(new Font("Lucida", 0, 16));
	        jLabelText[i].setText(message[i]);
		}
        jButtonOK.setText("OK");
        jButtonOK.setBounds(310, 130, 60, 30);
        jButtonOK.setBackground(new Color(212, 227, 250));
        jButtonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jButtonOK.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).
	    	put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), "ENTER_pressed");
	    jButtonOK.getActionMap().put("ENTER_pressed", new AbstractAction() {
	        public void actionPerformed(ActionEvent evt) {
	        	jButtonOKActionPerformed(evt);
	        }
	    });
		// End of Setting Bounds and Attributes 															#_______S_______#
		//**
		// Adding Components 																				#*******A*******#
		//**
		jLabelMain.add(jLabelIcon);
		jLabelMain.add(jLabelText[0]);
		jLabelMain.add(jLabelText[1]);
		jLabelMain.add(jLabelText[2]);
		jLabelMain.add(jButtonOK);
		// End of Adding Components 																		#_______A_______#
		//**Setting Criterion of the Frame**//
		setIconImage(new ImageIcon(getClass().getResource("")).getImage());
		setBounds(240, 200, 400, 200);
		setTitle("Message");
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		setLayout(null);
		setResizable(false);
		setModal(true);
		add(jLabelMain);
		setVisible(true);
	}
	//**
	// Action Events 																						#********AE*******#
	//**
	private void jButtonOKActionPerformed(ActionEvent evt){
		dispose();
	}
	// End of Action Events 																				#________AE_______#
	/**///Main Method
	public static void main(String args[]) {
		/*// Set the Web look and feel //*/
		try {
			javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
		} catch (Exception ex) {
			// do nothing if operation is unsuccessful
		}
		/* Create and display the form */
		new Message("Hi You are grounded for your \ninsignificant and nonsence \nactions.", Message.CONFIRMATION_MESSAGE);
	}
	/**/
	//**
	// Auxiliary Methods 																					#********AM*******#
	//**
	private String[] getMessage(String message){
		String[] messages = new String[3];
		if(message.contains("\n")){
			messages[0] = message.substring(0, message.indexOf("\n"));
			message = message.substring(message.indexOf("\n")+1);
			if(message.contains("\n")){
				messages[1] = message.substring(0, message.indexOf("\n"));
				messages[2] = message.substring(message.indexOf("\n")+1);
			}else{
				messages[1] = message;
			}
		}else{
			messages[0] = message;
		}
		return messages;
	}
	// End of Auxiliary Methods 																			#________AM_______#
}

------------------------------------------------------------------------
 Message    variables   
   Shows   types   messages 
  
      Minhas  Kamal 
  Kamal
  NORMAL MESSAGE  NORMAL_MESSAGE 0 CONFIRMATION MESSAGE  CONFIRMATION_MESSAGE 1 WARNING MESSAGE  WARNING_MESSAGE 210 ERROR MESSAGE  ERROR_MESSAGE 420 J Label  JLabel j Label Main  jLabelMain J Label  JLabel j Label Icon  jLabelIcon J Label  JLabel j Label Text  jLabelText J Button  JButton j Button OK  jButtonOK String message message Type  messageType 
------------------------------------------------------------------------
[message, variables, shows, types, messages, minhas, kamal, normal, normal_message, confirmation, confirmation_message, warning, warning_message, error, error_message, label, jlabel, main, jlabelmain, icon, jlabelicon, text, jlabeltext, button, jbutton, jbuttonok, string, type, messagetype]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/utils/fileIO/FileIO.java,readWholeFile
19 , 30
------------------------------------------------------------------------
	/**
	 * Takes a file path & returns whole content of the file. Used for reading external
	 * files.
	 * @param filePath input file path
	 * @return full information of the file
	 * @throws Exception 
	 */
	public static String readWholeFile(String filePath) throws Exception{
		byte[] bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(new File(filePath).toURI()));
		String Information = new String(bytes);	//contains the full file
		return Information; 
	}

------------------------------------------------------------------------
 read Whole File  readWholeFile    full  file   
	   Takes   file  path   returns   content    file    reading  external 
	  external
	   files 
	      file Path  filePath  input  file  path 
	  path
	      full  information    file 
	  file
	      Exception  
	  bytes java nio file Files read All Bytes  readAllBytes java nio file Paths get File file Path  filePath to URI  toURI String Information String bytes Information 
------------------------------------------------------------------------
[read, file, readwholefile, full, takes, path, returns, content, reading, external, files, filepath, input, information, exception, bytes, java, nio, readallbytes, paths, uri, touri, string]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/utils/fileIO/FileIO.java,readWholeFile
31 , 49
------------------------------------------------------------------------
	/**
	 * Takes a input stream & returns whole content of the file. Mainly used for reading
	 * files inside jar.
	 * @param filePath input file path
	 * @return full information of the file
	 * @throws Exception 
	 */
	public static String readWholeFile(InputStream inputStream) throws Exception{
		String string = "";	//for temporary data store
		String Information = "";	//#contains the full file 
		BufferedReader mainBR = new BufferedReader(new InputStreamReader(inputStream));
		string = mainBR.readLine();
		while(string!=null){	//reading step by step
			Information += string + "\n"; 
			string = mainBR.readLine();
		}
		mainBR.close();
		return Information; 
	}

------------------------------------------------------------------------
 read Whole File  readWholeFile   temporary  data  store    full  file  reading  step   step   
	   Takes   input  stream   returns   content    file     reading 
	  reading
	   files  inside  jar 
	      file Path  filePath  input  file  path 
	  path
	      full  information    file 
	  file
	      Exception  
	  String string String Information Buffered Reader  BufferedReader main BR  mainBR Buffered Reader  BufferedReader Input Stream Reader  InputStreamReader input Stream  inputStream string main BR  mainBR read Line  readLine string Information string n string main BR  mainBR read Line  readLine main BR  mainBR close Information 
------------------------------------------------------------------------
[read, file, readwholefile, temporary, data, store, full, reading, step, takes, input, stream, returns, content, files, inside, jar, path, filepath, information, exception, string, buffered, reader, bufferedreader, main, br, mainbr, inputstreamreader, inputstream, line, readline, close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/utils/fileIO/FileIO.java,writeWholeFile
50 , 62
------------------------------------------------------------------------
	/**
	 * Takes file path and information to be written as string and writes the whole string to the file at once.
	 * If file name already exists over-writes it, else creates new file. 
	 * @param FileName full file path
	 * @param Information information to be written
	 * @throws Exception 
	 */
	public static void writeWholeFile(String FileName, String Information) throws Exception{
		BufferedWriter mainBW = new BufferedWriter(new FileWriter(FileName));
		mainBW.write(Information);
		mainBW.close();
		return ;
	}

------------------------------------------------------------------------
 write Whole File  writeWholeFile   
	   Takes  file  path   information    written   string   writes    string    file   
	    file    exists  writes    creates   file  
	      File Name  FileName  full  file  path 
	  path
	      Information  information    written 
	  written
	      Exception  
	  Buffered Writer  BufferedWriter main BW  mainBW Buffered Writer  BufferedWriter File Writer  FileWriter File Name  FileName main BW  mainBW write Information main BW  mainBW close 
------------------------------------------------------------------------
[write, file, writewholefile, takes, path, information, written, string, writes, exists, creates, filename, full, exception, buffered, writer, bufferedwriter, main, bw, mainbw, filewriter, close]
------------------------
UltimateCalculator-master/src/com/minhasKamal/ultimateCalculator/utils/fileIO/FileIO.java,FileIO
13 , 63
------------------------------------------------------------------------
/**
 * Contains file read & file write static operations.
 *
 * @author Minhas Kamal
 */
public class FileIO {
	/**
	 * Takes a file path & returns whole content of the file. Used for reading external
	 * files.
	 * @param filePath input file path
	 * @return full information of the file
	 * @throws Exception 
	 */
	public static String readWholeFile(String filePath) throws Exception{
		byte[] bytes = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(new File(filePath).toURI()));
		String Information = new String(bytes);	//contains the full file
		return Information; 
	}
	/**
	 * Takes a input stream & returns whole content of the file. Mainly used for reading
	 * files inside jar.
	 * @param filePath input file path
	 * @return full information of the file
	 * @throws Exception 
	 */
	public static String readWholeFile(InputStream inputStream) throws Exception{
		String string = "";	//for temporary data store
		String Information = "";	//#contains the full file 
		BufferedReader mainBR = new BufferedReader(new InputStreamReader(inputStream));
		string = mainBR.readLine();
		while(string!=null){	//reading step by step
			Information += string + "\n"; 
			string = mainBR.readLine();
		}
		mainBR.close();
		return Information; 
	}
	/**
	 * Takes file path and information to be written as string and writes the whole string to the file at once.
	 * If file name already exists over-writes it, else creates new file. 
	 * @param FileName full file path
	 * @param Information information to be written
	 * @throws Exception 
	 */
	public static void writeWholeFile(String FileName, String Information) throws Exception{
		BufferedWriter mainBW = new BufferedWriter(new FileWriter(FileName));
		mainBW.write(Information);
		mainBW.close();
		return ;
	}
}

------------------------------------------------------------------------
 File IO  FileIO   
    file  read   file  write  static  operations 
  
      Minhas  Kamal 
  Kamal
  
------------------------------------------------------------------------
[file, io, fileio, read, write, static, operations, minhas, kamal]
